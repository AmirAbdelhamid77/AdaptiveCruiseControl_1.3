
AdaptiveCruiseControl_1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003904  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003a34  08003a34  00004a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab8  08003ab8  00005030  2**0
                  CONTENTS
  4 .ARM          00000000  08003ab8  08003ab8  00005030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ab8  08003ab8  00005030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab8  08003ab8  00004ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003abc  08003abc  00004abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08003ac0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000030  08003af0  00005030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08003af0  00005350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ed3  00000000  00000000  00005059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ea4  00000000  00000000  00008f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000430  00000000  00000000  00009dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000319  00000000  00000000  0000a200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff56  00000000  00000000  0000a519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005490  00000000  00000000  0001a46f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0002b453  00000000  00000000  0001f8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0004ad52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001224  00000000  00000000  0004ad98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0004bfbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000030 	.word	0x20000030
 800014c:	00000000 	.word	0x00000000
 8000150:	08003a1c 	.word	0x08003a1c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000034 	.word	0x20000034
 800016c:	08003a1c 	.word	0x08003a1c

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	@ 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_frsub>:
 80009ec:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009f0:	e002      	b.n	80009f8 <__addsf3>
 80009f2:	bf00      	nop

080009f4 <__aeabi_fsub>:
 80009f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009f8 <__addsf3>:
 80009f8:	0042      	lsls	r2, r0, #1
 80009fa:	bf1f      	itttt	ne
 80009fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a00:	ea92 0f03 	teqne	r2, r3
 8000a04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a0c:	d06a      	beq.n	8000ae4 <__addsf3+0xec>
 8000a0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a16:	bfc1      	itttt	gt
 8000a18:	18d2      	addgt	r2, r2, r3
 8000a1a:	4041      	eorgt	r1, r0
 8000a1c:	4048      	eorgt	r0, r1
 8000a1e:	4041      	eorgt	r1, r0
 8000a20:	bfb8      	it	lt
 8000a22:	425b      	neglt	r3, r3
 8000a24:	2b19      	cmp	r3, #25
 8000a26:	bf88      	it	hi
 8000a28:	4770      	bxhi	lr
 8000a2a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a32:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a3e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a42:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4249      	negne	r1, r1
 8000a4a:	ea92 0f03 	teq	r2, r3
 8000a4e:	d03f      	beq.n	8000ad0 <__addsf3+0xd8>
 8000a50:	f1a2 0201 	sub.w	r2, r2, #1
 8000a54:	fa41 fc03 	asr.w	ip, r1, r3
 8000a58:	eb10 000c 	adds.w	r0, r0, ip
 8000a5c:	f1c3 0320 	rsb	r3, r3, #32
 8000a60:	fa01 f103 	lsl.w	r1, r1, r3
 8000a64:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a68:	d502      	bpl.n	8000a70 <__addsf3+0x78>
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a70:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a74:	d313      	bcc.n	8000a9e <__addsf3+0xa6>
 8000a76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a7a:	d306      	bcc.n	8000a8a <__addsf3+0x92>
 8000a7c:	0840      	lsrs	r0, r0, #1
 8000a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a82:	f102 0201 	add.w	r2, r2, #1
 8000a86:	2afe      	cmp	r2, #254	@ 0xfe
 8000a88:	d251      	bcs.n	8000b2e <__addsf3+0x136>
 8000a8a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a92:	bf08      	it	eq
 8000a94:	f020 0001 	biceq.w	r0, r0, #1
 8000a98:	ea40 0003 	orr.w	r0, r0, r3
 8000a9c:	4770      	bx	lr
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	eb40 0000 	adc.w	r0, r0, r0
 8000aa4:	3a01      	subs	r2, #1
 8000aa6:	bf28      	it	cs
 8000aa8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000aac:	d2ed      	bcs.n	8000a8a <__addsf3+0x92>
 8000aae:	fab0 fc80 	clz	ip, r0
 8000ab2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ab6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000abe:	bfaa      	itet	ge
 8000ac0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ac4:	4252      	neglt	r2, r2
 8000ac6:	4318      	orrge	r0, r3
 8000ac8:	bfbc      	itt	lt
 8000aca:	40d0      	lsrlt	r0, r2
 8000acc:	4318      	orrlt	r0, r3
 8000ace:	4770      	bx	lr
 8000ad0:	f092 0f00 	teq	r2, #0
 8000ad4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ad8:	bf06      	itte	eq
 8000ada:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ade:	3201      	addeq	r2, #1
 8000ae0:	3b01      	subne	r3, #1
 8000ae2:	e7b5      	b.n	8000a50 <__addsf3+0x58>
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d021      	beq.n	8000b38 <__addsf3+0x140>
 8000af4:	ea92 0f03 	teq	r2, r3
 8000af8:	d004      	beq.n	8000b04 <__addsf3+0x10c>
 8000afa:	f092 0f00 	teq	r2, #0
 8000afe:	bf08      	it	eq
 8000b00:	4608      	moveq	r0, r1
 8000b02:	4770      	bx	lr
 8000b04:	ea90 0f01 	teq	r0, r1
 8000b08:	bf1c      	itt	ne
 8000b0a:	2000      	movne	r0, #0
 8000b0c:	4770      	bxne	lr
 8000b0e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b12:	d104      	bne.n	8000b1e <__addsf3+0x126>
 8000b14:	0040      	lsls	r0, r0, #1
 8000b16:	bf28      	it	cs
 8000b18:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b1c:	4770      	bx	lr
 8000b1e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b22:	bf3c      	itt	cc
 8000b24:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bxcc	lr
 8000b2a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b2e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b3c:	bf16      	itet	ne
 8000b3e:	4608      	movne	r0, r1
 8000b40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b44:	4601      	movne	r1, r0
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	bf06      	itte	eq
 8000b4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b4e:	ea90 0f01 	teqeq	r0, r1
 8000b52:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_ui2f>:
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e004      	b.n	8000b68 <__aeabi_i2f+0x8>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_i2f>:
 8000b60:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b64:	bf48      	it	mi
 8000b66:	4240      	negmi	r0, r0
 8000b68:	ea5f 0c00 	movs.w	ip, r0
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b74:	4601      	mov	r1, r0
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	e01c      	b.n	8000bb6 <__aeabi_l2f+0x2a>

08000b7c <__aeabi_ul2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e00a      	b.n	8000ba0 <__aeabi_l2f+0x14>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_l2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__aeabi_l2f+0x14>
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	ea5f 0c01 	movs.w	ip, r1
 8000ba4:	bf02      	ittt	eq
 8000ba6:	4684      	moveq	ip, r0
 8000ba8:	4601      	moveq	r1, r0
 8000baa:	2000      	moveq	r0, #0
 8000bac:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000bb6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000bba:	fabc f28c 	clz	r2, ip
 8000bbe:	3a08      	subs	r2, #8
 8000bc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bc4:	db10      	blt.n	8000be8 <__aeabi_l2f+0x5c>
 8000bc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bca:	4463      	add	r3, ip
 8000bcc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f102 0220 	add.w	r2, r2, #32
 8000bec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_fmul>:
 8000c08:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c10:	bf1e      	ittt	ne
 8000c12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c16:	ea92 0f0c 	teqne	r2, ip
 8000c1a:	ea93 0f0c 	teqne	r3, ip
 8000c1e:	d06f      	beq.n	8000d00 <__aeabi_fmul+0xf8>
 8000c20:	441a      	add	r2, r3
 8000c22:	ea80 0c01 	eor.w	ip, r0, r1
 8000c26:	0240      	lsls	r0, r0, #9
 8000c28:	bf18      	it	ne
 8000c2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c2e:	d01e      	beq.n	8000c6e <__aeabi_fmul+0x66>
 8000c30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c44:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c48:	bf3e      	ittt	cc
 8000c4a:	0049      	lslcc	r1, r1, #1
 8000c4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c50:	005b      	lslcc	r3, r3, #1
 8000c52:	ea40 0001 	orr.w	r0, r0, r1
 8000c56:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c5a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c5c:	d81d      	bhi.n	8000c9a <__aeabi_fmul+0x92>
 8000c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c66:	bf08      	it	eq
 8000c68:	f020 0001 	biceq.w	r0, r0, #1
 8000c6c:	4770      	bx	lr
 8000c6e:	f090 0f00 	teq	r0, #0
 8000c72:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c76:	bf08      	it	eq
 8000c78:	0249      	lsleq	r1, r1, #9
 8000c7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c82:	3a7f      	subs	r2, #127	@ 0x7f
 8000c84:	bfc2      	ittt	gt
 8000c86:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c8e:	4770      	bxgt	lr
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	dc5d      	bgt.n	8000d58 <__aeabi_fmul+0x150>
 8000c9c:	f112 0f19 	cmn.w	r2, #25
 8000ca0:	bfdc      	itt	le
 8000ca2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ca6:	4770      	bxle	lr
 8000ca8:	f1c2 0200 	rsb	r2, r2, #0
 8000cac:	0041      	lsls	r1, r0, #1
 8000cae:	fa21 f102 	lsr.w	r1, r1, r2
 8000cb2:	f1c2 0220 	rsb	r2, r2, #32
 8000cb6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cbe:	f140 0000 	adc.w	r0, r0, #0
 8000cc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cc6:	bf08      	it	eq
 8000cc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ccc:	4770      	bx	lr
 8000cce:	f092 0f00 	teq	r2, #0
 8000cd2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cd6:	bf02      	ittt	eq
 8000cd8:	0040      	lsleq	r0, r0, #1
 8000cda:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cde:	3a01      	subeq	r2, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <__aeabi_fmul+0xce>
 8000ce2:	ea40 000c 	orr.w	r0, r0, ip
 8000ce6:	f093 0f00 	teq	r3, #0
 8000cea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0049      	lsleq	r1, r1, #1
 8000cf2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000cf6:	3b01      	subeq	r3, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xe6>
 8000cfa:	ea41 010c 	orr.w	r1, r1, ip
 8000cfe:	e78f      	b.n	8000c20 <__aeabi_fmul+0x18>
 8000d00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	bf18      	it	ne
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d00a      	beq.n	8000d26 <__aeabi_fmul+0x11e>
 8000d10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d14:	bf18      	it	ne
 8000d16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d1a:	d1d8      	bne.n	8000cce <__aeabi_fmul+0xc6>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f090 0f00 	teq	r0, #0
 8000d2a:	bf17      	itett	ne
 8000d2c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d30:	4608      	moveq	r0, r1
 8000d32:	f091 0f00 	teqne	r1, #0
 8000d36:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d3a:	d014      	beq.n	8000d66 <__aeabi_fmul+0x15e>
 8000d3c:	ea92 0f0c 	teq	r2, ip
 8000d40:	d101      	bne.n	8000d46 <__aeabi_fmul+0x13e>
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	d10f      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d46:	ea93 0f0c 	teq	r3, ip
 8000d4a:	d103      	bne.n	8000d54 <__aeabi_fmul+0x14c>
 8000d4c:	024b      	lsls	r3, r1, #9
 8000d4e:	bf18      	it	ne
 8000d50:	4608      	movne	r0, r1
 8000d52:	d108      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d54:	ea80 0001 	eor.w	r0, r0, r1
 8000d58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d6a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_fdiv>:
 8000d70:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d78:	bf1e      	ittt	ne
 8000d7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7e:	ea92 0f0c 	teqne	r2, ip
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d069      	beq.n	8000e5c <__aeabi_fdiv+0xec>
 8000d88:	eba2 0203 	sub.w	r2, r2, r3
 8000d8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d96:	d037      	beq.n	8000e08 <__aeabi_fdiv+0x98>
 8000d98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000da0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf38      	it	cc
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000db2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000db6:	428b      	cmp	r3, r1
 8000db8:	bf24      	itt	cs
 8000dba:	1a5b      	subcs	r3, r3, r1
 8000dbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dc4:	bf24      	itt	cs
 8000dc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dd2:	bf24      	itt	cs
 8000dd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ddc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000de0:	bf24      	itt	cs
 8000de2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000de6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000df2:	d1e0      	bne.n	8000db6 <__aeabi_fdiv+0x46>
 8000df4:	2afd      	cmp	r2, #253	@ 0xfd
 8000df6:	f63f af50 	bhi.w	8000c9a <__aeabi_fmul+0x92>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e00:	bf08      	it	eq
 8000e02:	f020 0001 	biceq.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e10:	327f      	adds	r2, #127	@ 0x7f
 8000e12:	bfc2      	ittt	gt
 8000e14:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1c:	4770      	bxgt	lr
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	3a01      	subs	r2, #1
 8000e28:	e737      	b.n	8000c9a <__aeabi_fmul+0x92>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fdiv+0xc2>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xda>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e795      	b.n	8000d88 <__aeabi_fdiv+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d108      	bne.n	8000e78 <__aeabi_fdiv+0x108>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	f47f af7d 	bne.w	8000d66 <__aeabi_fmul+0x15e>
 8000e6c:	ea93 0f0c 	teq	r3, ip
 8000e70:	f47f af70 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e776      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e78:	ea93 0f0c 	teq	r3, ip
 8000e7c:	d104      	bne.n	8000e88 <__aeabi_fdiv+0x118>
 8000e7e:	024b      	lsls	r3, r1, #9
 8000e80:	f43f af4c 	beq.w	8000d1c <__aeabi_fmul+0x114>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e76e      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e92:	d1ca      	bne.n	8000e2a <__aeabi_fdiv+0xba>
 8000e94:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e98:	f47f af5c 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e9c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ea0:	f47f af3c 	bne.w	8000d1c <__aeabi_fmul+0x114>
 8000ea4:	e75f      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000ea6:	bf00      	nop

08000ea8 <__gesf2>:
 8000ea8:	f04f 3cff 	mov.w	ip, #4294967295
 8000eac:	e006      	b.n	8000ebc <__cmpsf2+0x4>
 8000eae:	bf00      	nop

08000eb0 <__lesf2>:
 8000eb0:	f04f 0c01 	mov.w	ip, #1
 8000eb4:	e002      	b.n	8000ebc <__cmpsf2+0x4>
 8000eb6:	bf00      	nop

08000eb8 <__cmpsf2>:
 8000eb8:	f04f 0c01 	mov.w	ip, #1
 8000ebc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ec8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ecc:	bf18      	it	ne
 8000ece:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed2:	d011      	beq.n	8000ef8 <__cmpsf2+0x40>
 8000ed4:	b001      	add	sp, #4
 8000ed6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eda:	bf18      	it	ne
 8000edc:	ea90 0f01 	teqne	r0, r1
 8000ee0:	bf58      	it	pl
 8000ee2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ee6:	bf88      	it	hi
 8000ee8:	17c8      	asrhi	r0, r1, #31
 8000eea:	bf38      	it	cc
 8000eec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef0:	bf18      	it	ne
 8000ef2:	f040 0001 	orrne.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	d102      	bne.n	8000f04 <__cmpsf2+0x4c>
 8000efe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f02:	d105      	bne.n	8000f10 <__cmpsf2+0x58>
 8000f04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f08:	d1e4      	bne.n	8000ed4 <__cmpsf2+0x1c>
 8000f0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f0e:	d0e1      	beq.n	8000ed4 <__cmpsf2+0x1c>
 8000f10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <__aeabi_cfrcmple>:
 8000f18:	4684      	mov	ip, r0
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	4661      	mov	r1, ip
 8000f1e:	e7ff      	b.n	8000f20 <__aeabi_cfcmpeq>

08000f20 <__aeabi_cfcmpeq>:
 8000f20:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f22:	f7ff ffc9 	bl	8000eb8 <__cmpsf2>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	bf48      	it	mi
 8000f2a:	f110 0f00 	cmnmi.w	r0, #0
 8000f2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f30 <__aeabi_fcmpeq>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff fff4 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f38:	bf0c      	ite	eq
 8000f3a:	2001      	moveq	r0, #1
 8000f3c:	2000      	movne	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmplt>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffea 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f4c:	bf34      	ite	cc
 8000f4e:	2001      	movcc	r0, #1
 8000f50:	2000      	movcs	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmple>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffe0 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpge>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffd2 	bl	8000f18 <__aeabi_cfrcmple>
 8000f74:	bf94      	ite	ls
 8000f76:	2001      	movls	r0, #1
 8000f78:	2000      	movhi	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_fcmpgt>:
 8000f80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f84:	f7ff ffc8 	bl	8000f18 <__aeabi_cfrcmple>
 8000f88:	bf34      	ite	cc
 8000f8a:	2001      	movcc	r0, #1
 8000f8c:	2000      	movcs	r0, #0
 8000f8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f92:	bf00      	nop

08000f94 <__aeabi_f2uiz>:
 8000f94:	0042      	lsls	r2, r0, #1
 8000f96:	d20e      	bcs.n	8000fb6 <__aeabi_f2uiz+0x22>
 8000f98:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f9c:	d30b      	bcc.n	8000fb6 <__aeabi_f2uiz+0x22>
 8000f9e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fa6:	d409      	bmi.n	8000fbc <__aeabi_f2uiz+0x28>
 8000fa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fb0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb4:	4770      	bx	lr
 8000fb6:	f04f 0000 	mov.w	r0, #0
 8000fba:	4770      	bx	lr
 8000fbc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fc0:	d101      	bne.n	8000fc6 <__aeabi_f2uiz+0x32>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	d102      	bne.n	8000fcc <__aeabi_f2uiz+0x38>
 8000fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fca:	4770      	bx	lr
 8000fcc:	f04f 0000 	mov.w	r0, #0
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <ACC_Start>:

/**
 * @brief Start the ACC system
 * @param acc: Pointer to ACC structure
 */
void ACC_Start(ACC_t* acc) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    // Reset control parameters
    acc->SpeedErrorIntegral = 0.0f;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	635a      	str	r2, [r3, #52]	@ 0x34
    acc->SpeedErrorDerivative = 0.0f;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	639a      	str	r2, [r3, #56]	@ 0x38
    acc->LastSpeedError = 0.0f;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    // Start the timer for control updates
    MCAL_TIM_Base_Start(SYSTEM_TIMER);
 8000ff4:	4805      	ldr	r0, [pc, #20]	@ (800100c <ACC_Start+0x38>)
 8000ff6:	f002 f8b1 	bl	800315c <MCAL_TIM_Base_Start>
    
    // Set state to active
    acc->State = ACC_STATE_ACTIVE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40000800 	.word	0x40000800

08001010 <ACC_EmergencyStop>:

/**
 * @brief Emergency stop the ACC system
 * @param acc: Pointer to ACC structure
 */
void ACC_EmergencyStop(ACC_t* acc) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    // Stop all motors immediately
    HAL_MOTOR_StopAll();
 8001018:	f001 f8ac 	bl	8002174 <HAL_MOTOR_StopAll>
    
    // Set state to emergency stop
    acc->State = ACC_STATE_EMERGENCY_STOP;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2202      	movs	r2, #2
 8001020:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <ACC_GetCurrentSpeed>:
/**
 * @brief Get the current vehicle speed
 * @param acc: Pointer to ACC structure
 * @return Current speed in cm/s (average of left and right wheels)
 */
float ACC_GetCurrentSpeed(ACC_t* acc) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
    // Calculate average speed from both sensors
    float leftSpeed = HAL_SPEED_SENSOR_GetSpeed(acc->LeftSpeedSensor);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	4618      	mov	r0, r3
 800103a:	f001 f9cd 	bl	80023d8 <HAL_SPEED_SENSOR_GetSpeed>
 800103e:	60f8      	str	r0, [r7, #12]
    float rightSpeed = HAL_SPEED_SENSOR_GetSpeed(acc->RightSpeedSensor);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	4618      	mov	r0, r3
 8001046:	f001 f9c7 	bl	80023d8 <HAL_SPEED_SENSOR_GetSpeed>
 800104a:	60b8      	str	r0, [r7, #8]
    
    return (leftSpeed + rightSpeed) / 2.0f;
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f7ff fcd2 	bl	80009f8 <__addsf3>
 8001054:	4603      	mov	r3, r0
 8001056:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fe88 	bl	8000d70 <__aeabi_fdiv>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <ACC_GetFrontDistance>:
/**
 * @brief Get the distance to the front obstacle
 * @param acc: Pointer to ACC structure
 * @return Distance in mm
 */
uint32_t ACC_GetFrontDistance(ACC_t* acc) {
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
    return HAL_ULTRASONIC_GetDistance(acc->FrontUltrasonic);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f001 fa9e 	bl	80025b8 <HAL_ULTRASONIC_GetDistance>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <ACC_Update>:

/**
 * @brief Main control update function (called periodically)
 * @param acc: Pointer to ACC structure
 */
void ACC_Update(ACC_t* acc) {
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b08b      	sub	sp, #44	@ 0x2c
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    // Only update if in active state
    if (acc->State != ACC_STATE_ACTIVE) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001096:	2b01      	cmp	r3, #1
 8001098:	f040 8191 	bne.w	80013be <ACC_Update+0x336>
        return;
    }
    
    // Trigger ultrasonic measurements
    HAL_ULTRASONIC_StartMeasurement(acc->FrontUltrasonic);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 fa23 	bl	80024ec <HAL_ULTRASONIC_StartMeasurement>
    
    // Update speed sensors
    HAL_SPEED_SENSOR_Update(acc->LeftSpeedSensor);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 f9b0 	bl	8002410 <HAL_SPEED_SENSOR_Update>
    HAL_SPEED_SENSOR_Update(acc->RightSpeedSensor);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 f9ab 	bl	8002410 <HAL_SPEED_SENSOR_Update>
    
    // Get current measurements
    float currentSpeed = ACC_GetCurrentSpeed(acc);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffb6 	bl	800102c <ACC_GetCurrentSpeed>
 80010c0:	61f8      	str	r0, [r7, #28]
    uint32_t frontDistance = ACC_GetFrontDistance(acc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffd1 	bl	800106a <ACC_GetFrontDistance>
 80010c8:	61b8      	str	r0, [r7, #24]
    
    // Check for emergency stop condition
    if (frontDistance < ACC_EMERGENCY_BRAKE_DISTANCE) {
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	2bf9      	cmp	r3, #249	@ 0xf9
 80010ce:	d803      	bhi.n	80010d8 <ACC_Update+0x50>
        ACC_EmergencyStop(acc);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff9d 	bl	8001010 <ACC_EmergencyStop>
        return;
 80010d6:	e173      	b.n	80013c0 <ACC_Update+0x338>
    }
    
    // Calculate adjusted target speed based on obstacle distance
    float adjustedTargetSpeed = acc->TargetSpeed;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // If obstacle detected, reduce speed proportionally
    if (frontDistance < acc->SafeDistance) {
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d22e      	bcs.n	8001146 <ACC_Update+0xbe>
        // Calculate adjustment factor (0-1 based on how close we are to the minimum distance)
        float distanceFactor = (float)(frontDistance - ACC_EMERGENCY_BRAKE_DISTANCE) / 
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	3bfa      	subs	r3, #250	@ 0xfa
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fd33 	bl	8000b58 <__aeabi_ui2f>
 80010f2:	4604      	mov	r4, r0
                              (float)(acc->SafeDistance - ACC_EMERGENCY_BRAKE_DISTANCE);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f8:	3bfa      	subs	r3, #250	@ 0xfa
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fd2c 	bl	8000b58 <__aeabi_ui2f>
 8001100:	4603      	mov	r3, r0
        float distanceFactor = (float)(frontDistance - ACC_EMERGENCY_BRAKE_DISTANCE) / 
 8001102:	4619      	mov	r1, r3
 8001104:	4620      	mov	r0, r4
 8001106:	f7ff fe33 	bl	8000d70 <__aeabi_fdiv>
 800110a:	4603      	mov	r3, r0
 800110c:	623b      	str	r3, [r7, #32]
        
        // Limit factor to 0-1 range
        if (distanceFactor < 0.0f) distanceFactor = 0.0f;
 800110e:	f04f 0100 	mov.w	r1, #0
 8001112:	6a38      	ldr	r0, [r7, #32]
 8001114:	f7ff ff16 	bl	8000f44 <__aeabi_fcmplt>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <ACC_Update+0x9c>
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
        if (distanceFactor > 1.0f) distanceFactor = 1.0f;
 8001124:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001128:	6a38      	ldr	r0, [r7, #32]
 800112a:	f7ff ff29 	bl	8000f80 <__aeabi_fcmpgt>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <ACC_Update+0xb2>
 8001134:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001138:	623b      	str	r3, [r7, #32]
        
        // Adjust target speed (reduce to 0 as we approach emergency distance)
        adjustedTargetSpeed *= distanceFactor;
 800113a:	6a39      	ldr	r1, [r7, #32]
 800113c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800113e:	f7ff fd63 	bl	8000c08 <__aeabi_fmul>
 8001142:	4603      	mov	r3, r0
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    
    // Calculate PID control values
    acc->SpeedError = adjustedTargetSpeed - currentSpeed;
 8001146:	69f9      	ldr	r1, [r7, #28]
 8001148:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800114a:	f7ff fc53 	bl	80009f4 <__aeabi_fsub>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	631a      	str	r2, [r3, #48]	@ 0x30
    
    // Accumulate integral with anti-windup
    acc->SpeedErrorIntegral += acc->SpeedError * (ACC_CONTROL_UPDATE_RATE_MS / 1000.0f);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	499a      	ldr	r1, [pc, #616]	@ (80013c8 <ACC_Update+0x340>)
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fd51 	bl	8000c08 <__aeabi_fmul>
 8001166:	4603      	mov	r3, r0
 8001168:	4619      	mov	r1, r3
 800116a:	4620      	mov	r0, r4
 800116c:	f7ff fc44 	bl	80009f8 <__addsf3>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Limit integral term to prevent windup
    float maxIntegral = 50.0f; // Adjust as needed
 8001178:	4b94      	ldr	r3, [pc, #592]	@ (80013cc <ACC_Update+0x344>)
 800117a:	617b      	str	r3, [r7, #20]
    if (acc->SpeedErrorIntegral > maxIntegral) acc->SpeedErrorIntegral = maxIntegral;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001180:	4619      	mov	r1, r3
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff fede 	bl	8000f44 <__aeabi_fcmplt>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <ACC_Update+0x10c>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	635a      	str	r2, [r3, #52]	@ 0x34
    if (acc->SpeedErrorIntegral < -maxIntegral) acc->SpeedErrorIntegral = -maxIntegral;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800119e:	4619      	mov	r1, r3
 80011a0:	4610      	mov	r0, r2
 80011a2:	f7ff fecf 	bl	8000f44 <__aeabi_fcmplt>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d004      	beq.n	80011b6 <ACC_Update+0x12e>
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Calculate derivative term
    acc->SpeedErrorDerivative = (acc->SpeedError - acc->LastSpeedError) / (ACC_CONTROL_UPDATE_RATE_MS / 1000.0f);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011be:	4619      	mov	r1, r3
 80011c0:	4610      	mov	r0, r2
 80011c2:	f7ff fc17 	bl	80009f4 <__aeabi_fsub>
 80011c6:	4603      	mov	r3, r0
 80011c8:	497f      	ldr	r1, [pc, #508]	@ (80013c8 <ACC_Update+0x340>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fdd0 	bl	8000d70 <__aeabi_fdiv>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	639a      	str	r2, [r3, #56]	@ 0x38
    acc->LastSpeedError = acc->SpeedError;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    // Calculate PID output
    float pidOutput = (acc->Kp * acc->SpeedError) + 
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e8:	4619      	mov	r1, r3
 80011ea:	4610      	mov	r0, r2
 80011ec:	f7ff fd0c 	bl	8000c08 <__aeabi_fmul>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461c      	mov	r4, r3
                      (acc->Ki * acc->SpeedErrorIntegral) + 
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011fc:	4619      	mov	r1, r3
 80011fe:	4610      	mov	r0, r2
 8001200:	f7ff fd02 	bl	8000c08 <__aeabi_fmul>
 8001204:	4603      	mov	r3, r0
    float pidOutput = (acc->Kp * acc->SpeedError) + 
 8001206:	4619      	mov	r1, r3
 8001208:	4620      	mov	r0, r4
 800120a:	f7ff fbf5 	bl	80009f8 <__addsf3>
 800120e:	4603      	mov	r3, r0
 8001210:	461c      	mov	r4, r3
                      (acc->Kd * acc->SpeedErrorDerivative);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800121a:	4619      	mov	r1, r3
 800121c:	4610      	mov	r0, r2
 800121e:	f7ff fcf3 	bl	8000c08 <__aeabi_fmul>
 8001222:	4603      	mov	r3, r0
    float pidOutput = (acc->Kp * acc->SpeedError) + 
 8001224:	4619      	mov	r1, r3
 8001226:	4620      	mov	r0, r4
 8001228:	f7ff fbe6 	bl	80009f8 <__addsf3>
 800122c:	4603      	mov	r3, r0
 800122e:	613b      	str	r3, [r7, #16]
    
    // Convert PID output to motor control
    // Positive output means accelerate, negative means decelerate
    if (pidOutput > 0) {
 8001230:	f04f 0100 	mov.w	r1, #0
 8001234:	6938      	ldr	r0, [r7, #16]
 8001236:	f7ff fea3 	bl	8000f80 <__aeabi_fcmpgt>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d043      	beq.n	80012c8 <ACC_Update+0x240>
        // Accelerate
        HAL_MOTOR_SetDirection(acc->FrontLeftMotor, MOTOR_DIR_FORWARD);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	2101      	movs	r1, #1
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fef0 	bl	800202c <HAL_MOTOR_SetDirection>
        HAL_MOTOR_SetDirection(acc->FrontRightMotor, MOTOR_DIR_FORWARD);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	2101      	movs	r1, #1
 8001252:	4618      	mov	r0, r3
 8001254:	f000 feea 	bl	800202c <HAL_MOTOR_SetDirection>
        HAL_MOTOR_SetDirection(acc->RearLeftMotor, MOTOR_DIR_FORWARD);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	2101      	movs	r1, #1
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fee4 	bl	800202c <HAL_MOTOR_SetDirection>
        HAL_MOTOR_SetDirection(acc->RearRightMotor, MOTOR_DIR_FORWARD);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001268:	2101      	movs	r1, #1
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fede 	bl	800202c <HAL_MOTOR_SetDirection>
        
        // Calculate speed (0-100%)
        uint8_t motorSpeed = (uint8_t)(pidOutput > 100.0f ? 100.0f : pidOutput);
 8001270:	4957      	ldr	r1, [pc, #348]	@ (80013d0 <ACC_Update+0x348>)
 8001272:	6938      	ldr	r0, [r7, #16]
 8001274:	f7ff fe84 	bl	8000f80 <__aeabi_fcmpgt>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <ACC_Update+0x1fa>
 800127e:	2364      	movs	r3, #100	@ 0x64
 8001280:	e004      	b.n	800128c <ACC_Update+0x204>
 8001282:	6938      	ldr	r0, [r7, #16]
 8001284:	f7ff fe86 	bl	8000f94 <__aeabi_f2uiz>
 8001288:	4603      	mov	r3, r0
 800128a:	b2db      	uxtb	r3, r3
 800128c:	73bb      	strb	r3, [r7, #14]
        
        HAL_MOTOR_SetSpeed(acc->FrontLeftMotor, motorSpeed);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	7bba      	ldrb	r2, [r7, #14]
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fed6 	bl	8002048 <HAL_MOTOR_SetSpeed>
        HAL_MOTOR_SetSpeed(acc->FrontRightMotor, motorSpeed);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	7bba      	ldrb	r2, [r7, #14]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 fecf 	bl	8002048 <HAL_MOTOR_SetSpeed>
        HAL_MOTOR_SetSpeed(acc->RearLeftMotor, motorSpeed);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	7bba      	ldrb	r2, [r7, #14]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fec8 	bl	8002048 <HAL_MOTOR_SetSpeed>
        HAL_MOTOR_SetSpeed(acc->RearRightMotor, motorSpeed);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012bc:	7bba      	ldrb	r2, [r7, #14]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fec1 	bl	8002048 <HAL_MOTOR_SetSpeed>
 80012c6:	e065      	b.n	8001394 <ACC_Update+0x30c>
    } else {
        // Decelerate or keep current speed
        if (pidOutput < -10.0f) {
 80012c8:	4942      	ldr	r1, [pc, #264]	@ (80013d4 <ACC_Update+0x34c>)
 80012ca:	6938      	ldr	r0, [r7, #16]
 80012cc:	f7ff fe3a 	bl	8000f44 <__aeabi_fcmplt>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d046      	beq.n	8001364 <ACC_Update+0x2dc>
            // Braking required (reverse motors briefly)
            HAL_MOTOR_SetDirection(acc->FrontLeftMotor, MOTOR_DIR_BACKWARD);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	2102      	movs	r1, #2
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fea5 	bl	800202c <HAL_MOTOR_SetDirection>
            HAL_MOTOR_SetDirection(acc->FrontRightMotor, MOTOR_DIR_BACKWARD);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	2102      	movs	r1, #2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fe9f 	bl	800202c <HAL_MOTOR_SetDirection>
            HAL_MOTOR_SetDirection(acc->RearLeftMotor, MOTOR_DIR_BACKWARD);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	2102      	movs	r1, #2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fe99 	bl	800202c <HAL_MOTOR_SetDirection>
            HAL_MOTOR_SetDirection(acc->RearRightMotor, MOTOR_DIR_BACKWARD);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fe:	2102      	movs	r1, #2
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fe93 	bl	800202c <HAL_MOTOR_SetDirection>
            
            // Calculate braking force (0-100%)
            uint8_t brakeForce = (uint8_t)(-pidOutput > 100.0f ? 100.0f : -pidOutput);
 8001306:	4934      	ldr	r1, [pc, #208]	@ (80013d8 <ACC_Update+0x350>)
 8001308:	6938      	ldr	r0, [r7, #16]
 800130a:	f7ff fe1b 	bl	8000f44 <__aeabi_fcmplt>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <ACC_Update+0x290>
 8001314:	2364      	movs	r3, #100	@ 0x64
 8001316:	e007      	b.n	8001328 <ACC_Update+0x2a0>
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fe38 	bl	8000f94 <__aeabi_f2uiz>
 8001324:	4603      	mov	r3, r0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	73fb      	strb	r3, [r7, #15]
            
            HAL_MOTOR_SetSpeed(acc->FrontLeftMotor, brakeForce);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fe88 	bl	8002048 <HAL_MOTOR_SetSpeed>
            HAL_MOTOR_SetSpeed(acc->FrontRightMotor, brakeForce);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fe81 	bl	8002048 <HAL_MOTOR_SetSpeed>
            HAL_MOTOR_SetSpeed(acc->RearLeftMotor, brakeForce);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fe7a 	bl	8002048 <HAL_MOTOR_SetSpeed>
            HAL_MOTOR_SetSpeed(acc->RearRightMotor, brakeForce);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fe73 	bl	8002048 <HAL_MOTOR_SetSpeed>
 8001362:	e017      	b.n	8001394 <ACC_Update+0x30c>
        } else {
            // Just coast (stop actively driving)
            HAL_MOTOR_SetDirection(acc->FrontLeftMotor, MOTOR_DIR_STOP);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fe5e 	bl	800202c <HAL_MOTOR_SetDirection>
            HAL_MOTOR_SetDirection(acc->FrontRightMotor, MOTOR_DIR_STOP);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fe58 	bl	800202c <HAL_MOTOR_SetDirection>
            HAL_MOTOR_SetDirection(acc->RearLeftMotor, MOTOR_DIR_STOP);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fe52 	bl	800202c <HAL_MOTOR_SetDirection>
            HAL_MOTOR_SetDirection(acc->RearRightMotor, MOTOR_DIR_STOP);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fe4c 	bl	800202c <HAL_MOTOR_SetDirection>
        }
    }
    
    // Apply motor updates
    HAL_MOTOR_Update(acc->FrontLeftMotor);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fe76 	bl	800208a <HAL_MOTOR_Update>
    HAL_MOTOR_Update(acc->FrontRightMotor);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fe71 	bl	800208a <HAL_MOTOR_Update>
    HAL_MOTOR_Update(acc->RearLeftMotor);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fe6c 	bl	800208a <HAL_MOTOR_Update>
    HAL_MOTOR_Update(acc->RearRightMotor);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fe67 	bl	800208a <HAL_MOTOR_Update>
 80013bc:	e000      	b.n	80013c0 <ACC_Update+0x338>
        return;
 80013be:	bf00      	nop
}
 80013c0:	372c      	adds	r7, #44	@ 0x2c
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd90      	pop	{r4, r7, pc}
 80013c6:	bf00      	nop
 80013c8:	3d4ccccd 	.word	0x3d4ccccd
 80013cc:	42480000 	.word	0x42480000
 80013d0:	42c80000 	.word	0x42c80000
 80013d4:	c1200000 	.word	0xc1200000
 80013d8:	c2c80000 	.word	0xc2c80000

080013dc <ACC_SetSpeedPercentage>:
/**
 * @brief Set motor speeds based on percentage of maximum
 * @param acc: Pointer to ACC structure
 * @param percentage: Speed percentage (0-100)
 */
void ACC_SetSpeedPercentage(ACC_t* acc_instance, uint8_t percentage) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
    // Ensure percentage is within valid range
    if (percentage > 100) {
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	2b64      	cmp	r3, #100	@ 0x64
 80013ec:	d901      	bls.n	80013f2 <ACC_SetSpeedPercentage+0x16>
        percentage = 100;
 80013ee:	2364      	movs	r3, #100	@ 0x64
 80013f0:	70fb      	strb	r3, [r7, #3]
    }
    
    // Set speed for all motors
    HAL_MOTOR_SetSpeed(acc_instance->FrontLeftMotor, percentage);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	78fa      	ldrb	r2, [r7, #3]
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fe24 	bl	8002048 <HAL_MOTOR_SetSpeed>
    HAL_MOTOR_SetSpeed(acc_instance->FrontRightMotor, percentage);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	78fa      	ldrb	r2, [r7, #3]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fe1d 	bl	8002048 <HAL_MOTOR_SetSpeed>
    HAL_MOTOR_SetSpeed(acc_instance->RearLeftMotor, percentage);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	78fa      	ldrb	r2, [r7, #3]
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fe16 	bl	8002048 <HAL_MOTOR_SetSpeed>
    HAL_MOTOR_SetSpeed(acc_instance->RearRightMotor, percentage);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001420:	78fa      	ldrb	r2, [r7, #3]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f000 fe0f 	bl	8002048 <HAL_MOTOR_SetSpeed>
    
    // Update all motors
    HAL_MOTOR_Update(acc_instance->FrontLeftMotor);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fe2b 	bl	800208a <HAL_MOTOR_Update>
    HAL_MOTOR_Update(acc_instance->FrontRightMotor);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	4618      	mov	r0, r3
 800143a:	f000 fe26 	bl	800208a <HAL_MOTOR_Update>
    HAL_MOTOR_Update(acc_instance->RearLeftMotor);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 fe21 	bl	800208a <HAL_MOTOR_Update>
    HAL_MOTOR_Update(acc_instance->RearRightMotor);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	4618      	mov	r0, r3
 800144e:	f000 fe1c 	bl	800208a <HAL_MOTOR_Update>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <ACC_AdjustSteering>:
 * @brief Adjust steering by changing differential between left and right motors
 * @param acc: Pointer to ACC structure
 * @param adjustment: Steering adjustment (-100 to 100)
 *                    0 = straight, negative = left, positive = right
 */
void ACC_AdjustSteering(ACC_t* acc_instance, int8_t adjustment) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
    // Limit adjustment to valid range
    if (adjustment < -100) adjustment = -100;
 8001468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800146c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001470:	da01      	bge.n	8001476 <ACC_AdjustSteering+0x1a>
 8001472:	239c      	movs	r3, #156	@ 0x9c
 8001474:	70fb      	strb	r3, [r7, #3]
    if (adjustment > 100) adjustment = 100;
 8001476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800147a:	2b64      	cmp	r3, #100	@ 0x64
 800147c:	dd01      	ble.n	8001482 <ACC_AdjustSteering+0x26>
 800147e:	2364      	movs	r3, #100	@ 0x64
 8001480:	70fb      	strb	r3, [r7, #3]
    
    // Get current base speed from motors
    uint8_t baseSpeed = acc_instance->FrontLeftMotor->Speed;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	7ddb      	ldrb	r3, [r3, #23]
 8001488:	737b      	strb	r3, [r7, #13]
    
    // Calculate left and right adjustments based on turning direction
    uint8_t leftSpeed, rightSpeed;
    
    if (adjustment < 0) {
 800148a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800148e:	2b00      	cmp	r3, #0
 8001490:	da0f      	bge.n	80014b2 <ACC_AdjustSteering+0x56>
        // Turn left: slow down left wheels
        leftSpeed = baseSpeed * (100 + adjustment) / 100;
 8001492:	7b7b      	ldrb	r3, [r7, #13]
 8001494:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001498:	3264      	adds	r2, #100	@ 0x64
 800149a:	fb02 f303 	mul.w	r3, r2, r3
 800149e:	4a2b      	ldr	r2, [pc, #172]	@ (800154c <ACC_AdjustSteering+0xf0>)
 80014a0:	fb82 1203 	smull	r1, r2, r2, r3
 80014a4:	1152      	asrs	r2, r2, #5
 80014a6:	17db      	asrs	r3, r3, #31
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	73fb      	strb	r3, [r7, #15]
        rightSpeed = baseSpeed;
 80014ac:	7b7b      	ldrb	r3, [r7, #13]
 80014ae:	73bb      	strb	r3, [r7, #14]
 80014b0:	e018      	b.n	80014e4 <ACC_AdjustSteering+0x88>
    } else if (adjustment > 0) {
 80014b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	dd10      	ble.n	80014dc <ACC_AdjustSteering+0x80>
        // Turn right: slow down right wheels
        leftSpeed = baseSpeed;
 80014ba:	7b7b      	ldrb	r3, [r7, #13]
 80014bc:	73fb      	strb	r3, [r7, #15]
        rightSpeed = baseSpeed * (100 - adjustment) / 100;
 80014be:	7b7b      	ldrb	r3, [r7, #13]
 80014c0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80014c4:	f1c2 0264 	rsb	r2, r2, #100	@ 0x64
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
 80014cc:	4a1f      	ldr	r2, [pc, #124]	@ (800154c <ACC_AdjustSteering+0xf0>)
 80014ce:	fb82 1203 	smull	r1, r2, r2, r3
 80014d2:	1152      	asrs	r2, r2, #5
 80014d4:	17db      	asrs	r3, r3, #31
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	73bb      	strb	r3, [r7, #14]
 80014da:	e003      	b.n	80014e4 <ACC_AdjustSteering+0x88>
    } else {
        // No adjustment, keep speeds equal
        leftSpeed = baseSpeed;
 80014dc:	7b7b      	ldrb	r3, [r7, #13]
 80014de:	73fb      	strb	r3, [r7, #15]
        rightSpeed = baseSpeed;
 80014e0:	7b7b      	ldrb	r3, [r7, #13]
 80014e2:	73bb      	strb	r3, [r7, #14]
    }
    
    // Apply the adjusted speeds
    HAL_MOTOR_SetSpeed(acc_instance->FrontLeftMotor, leftSpeed);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fdab 	bl	8002048 <HAL_MOTOR_SetSpeed>
    HAL_MOTOR_SetSpeed(acc_instance->RearLeftMotor, leftSpeed);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 fda4 	bl	8002048 <HAL_MOTOR_SetSpeed>
    HAL_MOTOR_SetSpeed(acc_instance->FrontRightMotor, rightSpeed);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	7bba      	ldrb	r2, [r7, #14]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fd9d 	bl	8002048 <HAL_MOTOR_SetSpeed>
    HAL_MOTOR_SetSpeed(acc_instance->RearRightMotor, rightSpeed);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001512:	7bba      	ldrb	r2, [r7, #14]
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fd96 	bl	8002048 <HAL_MOTOR_SetSpeed>
    
    // Update all motors
    HAL_MOTOR_Update(acc_instance->FrontLeftMotor);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4618      	mov	r0, r3
 8001522:	f000 fdb2 	bl	800208a <HAL_MOTOR_Update>
    HAL_MOTOR_Update(acc_instance->FrontRightMotor);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fdad 	bl	800208a <HAL_MOTOR_Update>
    HAL_MOTOR_Update(acc_instance->RearLeftMotor);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fda8 	bl	800208a <HAL_MOTOR_Update>
    HAL_MOTOR_Update(acc_instance->RearRightMotor);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fda3 	bl	800208a <HAL_MOTOR_Update>
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	51eb851f 	.word	0x51eb851f

08001550 <ACC_DisableReverse>:

/**
 * @brief Disable reverse motion
 * @param acc: Pointer to ACC structure
 */
void ACC_DisableReverse(ACC_t* acc_instance) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
    // Set direction to forward or stop only
    if (acc_instance->FrontLeftMotor->Direction == MOTOR_DIR_BACKWARD) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	7d9b      	ldrb	r3, [r3, #22]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d117      	bne.n	8001592 <ACC_DisableReverse+0x42>
        HAL_MOTOR_SetDirection(acc_instance->FrontLeftMotor, MOTOR_DIR_STOP);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fd5f 	bl	800202c <HAL_MOTOR_SetDirection>
        HAL_MOTOR_SetDirection(acc_instance->FrontRightMotor, MOTOR_DIR_STOP);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f000 fd59 	bl	800202c <HAL_MOTOR_SetDirection>
        HAL_MOTOR_SetDirection(acc_instance->RearLeftMotor, MOTOR_DIR_STOP);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f000 fd53 	bl	800202c <HAL_MOTOR_SetDirection>
        HAL_MOTOR_SetDirection(acc_instance->RearRightMotor, MOTOR_DIR_STOP);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f000 fd4d 	bl	800202c <HAL_MOTOR_SetDirection>
    }
    
    // Set flag to prevent reverse
    acc_instance->ReverseEnabled = 0;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
    
    // Update all motors
    HAL_MOTOR_Update(acc_instance->FrontLeftMotor);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fd73 	bl	800208a <HAL_MOTOR_Update>
    HAL_MOTOR_Update(acc_instance->FrontRightMotor);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 fd6e 	bl	800208a <HAL_MOTOR_Update>
    HAL_MOTOR_Update(acc_instance->RearLeftMotor);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 fd69 	bl	800208a <HAL_MOTOR_Update>
    HAL_MOTOR_Update(acc_instance->RearRightMotor);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fd64 	bl	800208a <HAL_MOTOR_Update>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <ACC_EnableReverse>:

/**
 * @brief Enable reverse motion
 * @param acc: Pointer to ACC structure
 */
void ACC_EnableReverse(ACC_t* acc_instance) {
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
    // Set flag to allow reverse
    acc_instance->ReverseEnabled = 1;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
} 
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <main>:
void ACC_SetSpeedPercentage(ACC_t* acc_instance, uint8_t percentage);
void ACC_AdjustSteering(ACC_t* acc_instance, int8_t adjustment);
void ACC_DisableReverse(ACC_t* acc_instance);
void ACC_EnableReverse(ACC_t* acc_instance);

int main(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
    // Configure system clock to 8MHz
    SystemClock_Config();
 80015ea:	f000 fa73 	bl	8001ad4 <SystemClock_Config>
    
    // Initialize peripherals
    Initialize_Sensors();
 80015ee:	f000 fad1 	bl	8001b94 <Initialize_Sensors>
    Initialize_Motors();
 80015f2:	f000 fbcb 	bl	8001d8c <Initialize_Motors>
    Initialize_ACC();
 80015f6:	f000 fc43 	bl	8001e80 <Initialize_ACC>
    
    // Initialize system timer for regular control updates
    Timer_Init(); // Initializes TIM4 (System Timer)
 80015fa:	f000 f9d9 	bl	80019b0 <Timer_Init>
    
    // Status LED
    GPIO_PinConfig_t ledConfig = {
 80015fe:	4a14      	ldr	r2, [pc, #80]	@ (8001650 <main+0x6c>)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	ca07      	ldmia	r2, {r0, r1, r2}
 8001604:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        .GPIO_PinNumber = LED_STATUS_PIN,
        .GPIO_Mode = GPIO_Mode_Out_push_pull,
        .GPIO_Speed = GPIO_Speed_10MHz
    };
    MCAL_GPIO_Init(LED_STATUS_PORT, &ledConfig);
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4619      	mov	r1, r3
 800160c:	4811      	ldr	r0, [pc, #68]	@ (8001654 <main+0x70>)
 800160e:	f001 fc25 	bl	8002e5c <MCAL_GPIO_Init>
    MCAL_GPIO_WritePin(LED_STATUS_PORT, LED_STATUS_PIN, GPIO_PIN_SET); // LED off (active low)
 8001612:	2201      	movs	r2, #1
 8001614:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001618:	480e      	ldr	r0, [pc, #56]	@ (8001654 <main+0x70>)
 800161a:	f001 fcd7 	bl	8002fcc <MCAL_GPIO_WritePin>
    
    // Start ACC system
    ACC_Start(&acc);
 800161e:	480e      	ldr	r0, [pc, #56]	@ (8001658 <main+0x74>)
 8001620:	f7ff fcd8 	bl	8000fd4 <ACC_Start>
    
    // Main loop
    while (1) {
        if (timer_flag) {
 8001624:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <main+0x78>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0fa      	beq.n	8001624 <main+0x40>
            // Reset flag
            timer_flag = 0;
 800162e:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <main+0x78>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
            
            // Toggle status LED to show system is running
            MCAL_GPIO_TogglePin(LED_STATUS_PORT, LED_STATUS_PIN);
 8001634:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001638:	4806      	ldr	r0, [pc, #24]	@ (8001654 <main+0x70>)
 800163a:	f001 fcdf 	bl	8002ffc <MCAL_GPIO_TogglePin>
            
            // Trigger ultrasonic measurements sequentially (results via EXTI)
            Trigger_Ultrasonic_Measurements();
 800163e:	f000 f80f 	bl	8001660 <Trigger_Ultrasonic_Measurements>
            
            // Process obstacle detection using the latest sensor data
            // Data is updated asynchronously by EXTI callbacks
            Process_Obstacle_Detection();
 8001642:	f000 f849 	bl	80016d8 <Process_Obstacle_Detection>
            
            // Update ACC system with obstacle information and speed
            ACC_Update(&acc);
 8001646:	4804      	ldr	r0, [pc, #16]	@ (8001658 <main+0x74>)
 8001648:	f7ff fd1e 	bl	8001088 <ACC_Update>
        if (timer_flag) {
 800164c:	e7ea      	b.n	8001624 <main+0x40>
 800164e:	bf00      	nop
 8001650:	08003a34 	.word	0x08003a34
 8001654:	40011000 	.word	0x40011000
 8001658:	200001fc 	.word	0x200001fc
 800165c:	2000024c 	.word	0x2000024c

08001660 <Trigger_Ultrasonic_Measurements>:

/**
 * @brief Trigger ultrasonic measurements sequentially
 * Results will be received via the EXTI callbacks
 */
void Trigger_Ultrasonic_Measurements(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
    // Trigger front ultrasonic
    HAL_ULTRASONIC_StartMeasurement(&frontUltrasonic);
 8001666:	4818      	ldr	r0, [pc, #96]	@ (80016c8 <Trigger_Ultrasonic_Measurements+0x68>)
 8001668:	f000 ff40 	bl	80024ec <HAL_ULTRASONIC_StartMeasurement>
    
    // Small delay to avoid signal interference between sensors
    for (volatile uint32_t i = 0; i < 10000; i++);
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e002      	b.n	8001678 <Trigger_Ultrasonic_Measurements+0x18>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3301      	adds	r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800167e:	4293      	cmp	r3, r2
 8001680:	d9f7      	bls.n	8001672 <Trigger_Ultrasonic_Measurements+0x12>
    
    // Trigger rear ultrasonic
    HAL_ULTRASONIC_StartMeasurement(&rearUltrasonic);
 8001682:	4812      	ldr	r0, [pc, #72]	@ (80016cc <Trigger_Ultrasonic_Measurements+0x6c>)
 8001684:	f000 ff32 	bl	80024ec <HAL_ULTRASONIC_StartMeasurement>
    
    // Small delay to avoid signal interference between sensors
    for (volatile uint32_t i = 0; i < 10000; i++);
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	e002      	b.n	8001694 <Trigger_Ultrasonic_Measurements+0x34>
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	3301      	adds	r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f242 720f 	movw	r2, #9999	@ 0x270f
 800169a:	4293      	cmp	r3, r2
 800169c:	d9f7      	bls.n	800168e <Trigger_Ultrasonic_Measurements+0x2e>
    
    // Trigger left ultrasonic
    HAL_ULTRASONIC_StartMeasurement(&leftUltrasonic);
 800169e:	480c      	ldr	r0, [pc, #48]	@ (80016d0 <Trigger_Ultrasonic_Measurements+0x70>)
 80016a0:	f000 ff24 	bl	80024ec <HAL_ULTRASONIC_StartMeasurement>
    
    // Small delay to avoid signal interference between sensors
    for (volatile uint32_t i = 0; i < 10000; i++);
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	e002      	b.n	80016b0 <Trigger_Ultrasonic_Measurements+0x50>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3301      	adds	r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d9f7      	bls.n	80016aa <Trigger_Ultrasonic_Measurements+0x4a>
    
    // Trigger right ultrasonic
    HAL_ULTRASONIC_StartMeasurement(&rightUltrasonic);
 80016ba:	4806      	ldr	r0, [pc, #24]	@ (80016d4 <Trigger_Ultrasonic_Measurements+0x74>)
 80016bc:	f000 ff16 	bl	80024ec <HAL_ULTRASONIC_StartMeasurement>
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	2000004c 	.word	0x2000004c
 80016cc:	20000084 	.word	0x20000084
 80016d0:	200000bc 	.word	0x200000bc
 80016d4:	200000f4 	.word	0x200000f4

080016d8 <Process_Obstacle_Detection>:

/**
 * @brief Process obstacle detection using ultrasonic sensor data
 */
void Process_Obstacle_Detection(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
    // Evaluate each direction and update obstacle zones
    obstacleState.front = Evaluate_Distance(frontUltrasonic.Distance);
 80016dc:	4b42      	ldr	r3, [pc, #264]	@ (80017e8 <Process_Obstacle_Detection+0x110>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f88f 	bl	8001804 <Evaluate_Distance>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b40      	ldr	r3, [pc, #256]	@ (80017ec <Process_Obstacle_Detection+0x114>)
 80016ec:	701a      	strb	r2, [r3, #0]
    obstacleState.rear = Evaluate_Distance(rearUltrasonic.Distance);
 80016ee:	4b40      	ldr	r3, [pc, #256]	@ (80017f0 <Process_Obstacle_Detection+0x118>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f886 	bl	8001804 <Evaluate_Distance>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b3b      	ldr	r3, [pc, #236]	@ (80017ec <Process_Obstacle_Detection+0x114>)
 80016fe:	705a      	strb	r2, [r3, #1]
    obstacleState.left = Evaluate_Distance(leftUltrasonic.Distance);
 8001700:	4b3c      	ldr	r3, [pc, #240]	@ (80017f4 <Process_Obstacle_Detection+0x11c>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f87d 	bl	8001804 <Evaluate_Distance>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	4b37      	ldr	r3, [pc, #220]	@ (80017ec <Process_Obstacle_Detection+0x114>)
 8001710:	709a      	strb	r2, [r3, #2]
    obstacleState.right = Evaluate_Distance(rightUltrasonic.Distance);
 8001712:	4b39      	ldr	r3, [pc, #228]	@ (80017f8 <Process_Obstacle_Detection+0x120>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f874 	bl	8001804 <Evaluate_Distance>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	4b32      	ldr	r3, [pc, #200]	@ (80017ec <Process_Obstacle_Detection+0x114>)
 8001722:	70da      	strb	r2, [r3, #3]
    
    // Adjust ACC behavior based on obstacle detection
    switch (obstacleState.front) {
 8001724:	4b31      	ldr	r3, [pc, #196]	@ (80017ec <Process_Obstacle_Detection+0x114>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d82b      	bhi.n	8001784 <Process_Obstacle_Detection+0xac>
 800172c:	a201      	add	r2, pc, #4	@ (adr r2, 8001734 <Process_Obstacle_Detection+0x5c>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	0800177b 	.word	0x0800177b
 8001738:	08001771 	.word	0x08001771
 800173c:	08001767 	.word	0x08001767
 8001740:	0800175d 	.word	0x0800175d
 8001744:	08001749 	.word	0x08001749
        case ZONE_CRITICAL:
            // Emergency stop
            ACC_EmergencyStop(&acc);
 8001748:	482c      	ldr	r0, [pc, #176]	@ (80017fc <Process_Obstacle_Detection+0x124>)
 800174a:	f7ff fc61 	bl	8001010 <ACC_EmergencyStop>
            // Flash LED rapidly to indicate emergency
            MCAL_GPIO_WritePin(LED_STATUS_PORT, LED_STATUS_PIN, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001754:	482a      	ldr	r0, [pc, #168]	@ (8001800 <Process_Obstacle_Detection+0x128>)
 8001756:	f001 fc39 	bl	8002fcc <MCAL_GPIO_WritePin>
            break;
 800175a:	e013      	b.n	8001784 <Process_Obstacle_Detection+0xac>
            
        case ZONE_DANGER:
            // Significant speed reduction or stop
            ACC_SetSpeedPercentage(&acc, 10);  // 10% of target speed
 800175c:	210a      	movs	r1, #10
 800175e:	4827      	ldr	r0, [pc, #156]	@ (80017fc <Process_Obstacle_Detection+0x124>)
 8001760:	f7ff fe3c 	bl	80013dc <ACC_SetSpeedPercentage>
            break;
 8001764:	e00e      	b.n	8001784 <Process_Obstacle_Detection+0xac>
            
        case ZONE_WARNING:
            // Moderate speed reduction
            ACC_SetSpeedPercentage(&acc, 50);  // 50% of target speed
 8001766:	2132      	movs	r1, #50	@ 0x32
 8001768:	4824      	ldr	r0, [pc, #144]	@ (80017fc <Process_Obstacle_Detection+0x124>)
 800176a:	f7ff fe37 	bl	80013dc <ACC_SetSpeedPercentage>
            break;
 800176e:	e009      	b.n	8001784 <Process_Obstacle_Detection+0xac>
            
        case ZONE_CAUTION:
            // Slight speed reduction
            ACC_SetSpeedPercentage(&acc, 70);  // 70% of target speed
 8001770:	2146      	movs	r1, #70	@ 0x46
 8001772:	4822      	ldr	r0, [pc, #136]	@ (80017fc <Process_Obstacle_Detection+0x124>)
 8001774:	f7ff fe32 	bl	80013dc <ACC_SetSpeedPercentage>
            break;
 8001778:	e004      	b.n	8001784 <Process_Obstacle_Detection+0xac>
            
        case ZONE_SAFE:
            // Maintain target speed
            ACC_SetSpeedPercentage(&acc, 100); // 100% of target speed
 800177a:	2164      	movs	r1, #100	@ 0x64
 800177c:	481f      	ldr	r0, [pc, #124]	@ (80017fc <Process_Obstacle_Detection+0x124>)
 800177e:	f7ff fe2d 	bl	80013dc <ACC_SetSpeedPercentage>
            break;
 8001782:	bf00      	nop
    }
    
    // Handle lateral obstacles (left and right)
    if (obstacleState.left == ZONE_DANGER || obstacleState.left == ZONE_CRITICAL) {
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <Process_Obstacle_Detection+0x114>)
 8001786:	789b      	ldrb	r3, [r3, #2]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d003      	beq.n	8001794 <Process_Obstacle_Detection+0xbc>
 800178c:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <Process_Obstacle_Detection+0x114>)
 800178e:	789b      	ldrb	r3, [r3, #2]
 8001790:	2b04      	cmp	r3, #4
 8001792:	d104      	bne.n	800179e <Process_Obstacle_Detection+0xc6>
        // Obstacle on left side - adjust trajectory right
        ACC_AdjustSteering(&acc, 20);  // Turn 20% right
 8001794:	2114      	movs	r1, #20
 8001796:	4819      	ldr	r0, [pc, #100]	@ (80017fc <Process_Obstacle_Detection+0x124>)
 8001798:	f7ff fe60 	bl	800145c <ACC_AdjustSteering>
 800179c:	e011      	b.n	80017c2 <Process_Obstacle_Detection+0xea>
    }
    else if (obstacleState.right == ZONE_DANGER || obstacleState.right == ZONE_CRITICAL) {
 800179e:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <Process_Obstacle_Detection+0x114>)
 80017a0:	78db      	ldrb	r3, [r3, #3]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d003      	beq.n	80017ae <Process_Obstacle_Detection+0xd6>
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <Process_Obstacle_Detection+0x114>)
 80017a8:	78db      	ldrb	r3, [r3, #3]
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d105      	bne.n	80017ba <Process_Obstacle_Detection+0xe2>
        // Obstacle on right side - adjust trajectory left
        ACC_AdjustSteering(&acc, -20); // Turn 20% left
 80017ae:	f06f 0113 	mvn.w	r1, #19
 80017b2:	4812      	ldr	r0, [pc, #72]	@ (80017fc <Process_Obstacle_Detection+0x124>)
 80017b4:	f7ff fe52 	bl	800145c <ACC_AdjustSteering>
 80017b8:	e003      	b.n	80017c2 <Process_Obstacle_Detection+0xea>
    }
    else {
        // No lateral obstacles - maintain straight path
        ACC_AdjustSteering(&acc, 0);   // Keep straight
 80017ba:	2100      	movs	r1, #0
 80017bc:	480f      	ldr	r0, [pc, #60]	@ (80017fc <Process_Obstacle_Detection+0x124>)
 80017be:	f7ff fe4d 	bl	800145c <ACC_AdjustSteering>
    }
    
    // Handle rear obstacles
    if (obstacleState.rear == ZONE_DANGER || obstacleState.rear == ZONE_CRITICAL) {
 80017c2:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <Process_Obstacle_Detection+0x114>)
 80017c4:	785b      	ldrb	r3, [r3, #1]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d003      	beq.n	80017d2 <Process_Obstacle_Detection+0xfa>
 80017ca:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <Process_Obstacle_Detection+0x114>)
 80017cc:	785b      	ldrb	r3, [r3, #1]
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d103      	bne.n	80017da <Process_Obstacle_Detection+0x102>
        // Prevent reversing if there's an obstacle behind
        ACC_DisableReverse(&acc);
 80017d2:	480a      	ldr	r0, [pc, #40]	@ (80017fc <Process_Obstacle_Detection+0x124>)
 80017d4:	f7ff febc 	bl	8001550 <ACC_DisableReverse>
 80017d8:	e003      	b.n	80017e2 <Process_Obstacle_Detection+0x10a>
    }
    else {
        // Allow reversing if needed
        ACC_EnableReverse(&acc);
 80017da:	4808      	ldr	r0, [pc, #32]	@ (80017fc <Process_Obstacle_Detection+0x124>)
 80017dc:	f7ff fef5 	bl	80015ca <ACC_EnableReverse>
    }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000004c 	.word	0x2000004c
 80017ec:	20000250 	.word	0x20000250
 80017f0:	20000084 	.word	0x20000084
 80017f4:	200000bc 	.word	0x200000bc
 80017f8:	200000f4 	.word	0x200000f4
 80017fc:	200001fc 	.word	0x200001fc
 8001800:	40011000 	.word	0x40011000

08001804 <Evaluate_Distance>:
/**
 * @brief Evaluate distance measurement and determine obstacle zone
 * @param distance: Distance measurement in mm
 * @return: Obstacle zone classification
 */
ObstacleZone_t Evaluate_Distance(uint32_t distance) {
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
    if (distance == 0) // Consider 0 distance (timeout/error) as critical
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <Evaluate_Distance+0x12>
        return ZONE_CRITICAL;
 8001812:	2304      	movs	r3, #4
 8001814:	e017      	b.n	8001846 <Evaluate_Distance+0x42>
    if (distance < OBSTACLE_DIST_CRITICAL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b95      	cmp	r3, #149	@ 0x95
 800181a:	d801      	bhi.n	8001820 <Evaluate_Distance+0x1c>
        return ZONE_CRITICAL;
 800181c:	2304      	movs	r3, #4
 800181e:	e012      	b.n	8001846 <Evaluate_Distance+0x42>
    else if (distance < OBSTACLE_DIST_DANGER)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001826:	d201      	bcs.n	800182c <Evaluate_Distance+0x28>
        return ZONE_DANGER;
 8001828:	2303      	movs	r3, #3
 800182a:	e00c      	b.n	8001846 <Evaluate_Distance+0x42>
    else if (distance < OBSTACLE_DIST_WARNING)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001832:	d201      	bcs.n	8001838 <Evaluate_Distance+0x34>
        return ZONE_WARNING;
 8001834:	2302      	movs	r3, #2
 8001836:	e006      	b.n	8001846 <Evaluate_Distance+0x42>
    else if (distance < OBSTACLE_DIST_CAUTION)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800183e:	d201      	bcs.n	8001844 <Evaluate_Distance+0x40>
        return ZONE_CAUTION;
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <Evaluate_Distance+0x42>
    else
        return ZONE_SAFE;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <Generic_Ultrasonic_Callback>:

/**
 * @brief Generic ultrasonic sensor EXTI callback logic
 * @param sensor: Pointer to the specific Ultrasonic_t sensor instance
 */
static void Generic_Ultrasonic_Callback(Ultrasonic_t* sensor) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    uint32_t current_time = MCAL_TIM_Base_GetCounter(ULTRASONIC_TIMER);
 8001858:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800185c:	f001 fc9a 	bl	8003194 <MCAL_TIM_Base_GetCounter>
 8001860:	60b8      	str	r0, [r7, #8]
    
    if (MCAL_GPIO_ReadPin(sensor->EchoPort, sensor->EchoPin) == GPIO_PIN_SET) {
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	899b      	ldrh	r3, [r3, #12]
 800186a:	4619      	mov	r1, r3
 800186c:	4610      	mov	r0, r2
 800186e:	f001 fb99 	bl	8002fa4 <MCAL_GPIO_ReadPin>
 8001872:	4603      	mov	r3, r0
 8001874:	2b01      	cmp	r3, #1
 8001876:	d107      	bne.n	8001888 <Generic_Ultrasonic_Callback+0x38>
        // Rising edge detected - record start time
        sensor->StartTime = current_time;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24
        sensor->State = ULTRASONIC_STATE_WAITING_ECHO;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2202      	movs	r2, #2
 8001882:	f883 2020 	strb.w	r2, [r3, #32]
 8001886:	e04b      	b.n	8001920 <Generic_Ultrasonic_Callback+0xd0>
    } else {
        // Falling edge detected
        if (sensor->State == ULTRASONIC_STATE_WAITING_ECHO) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d146      	bne.n	8001920 <Generic_Ultrasonic_Callback+0xd0>
            sensor->EchoTime = current_time;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	62da      	str	r2, [r3, #44]	@ 0x2c
            uint32_t echo_duration_ticks;
            
            // Calculate echo duration, handling timer overflow
            if (sensor->EchoTime >= sensor->StartTime) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d306      	bcc.n	80018b2 <Generic_Ultrasonic_Callback+0x62>
                echo_duration_ticks = sensor->EchoTime - sensor->StartTime;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e007      	b.n	80018c2 <Generic_Ultrasonic_Callback+0x72>
            } else {
                // Timer overflowed between rising and falling edge
                echo_duration_ticks = (ULTRASONIC_TIMER_PERIOD - sensor->StartTime) + sensor->EchoTime + 1;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80018c0:	60fb      	str	r3, [r7, #12]
            }
            
            // Check for plausible duration (avoid glitches, max range)
            if (echo_duration_ticks > 50 && echo_duration_ticks < ULTRASONIC_TIMEOUT_TICKS) { 
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2b32      	cmp	r3, #50	@ 0x32
 80018c6:	d920      	bls.n	800190a <Generic_Ultrasonic_Callback+0xba>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f247 522f 	movw	r2, #29999	@ 0x752f
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d81b      	bhi.n	800190a <Generic_Ultrasonic_Callback+0xba>
                // Calculate distance: distance (mm) = time (us) * speed_of_sound (mm/us) / 2
                sensor->Distance = (uint32_t)((echo_duration_ticks * US_TIMER_TICK_US * SPEED_OF_SOUND_MM_PER_US) / 2.0);
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f7fe fd8e 	bl	80003f4 <__aeabi_ui2d>
 80018d8:	a31f      	add	r3, pc, #124	@ (adr r3, 8001958 <Generic_Ultrasonic_Callback+0x108>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fe03 	bl	80004e8 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018f2:	f7fe ff23 	bl	800073c <__aeabi_ddiv>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f805 	bl	800090c <__aeabi_d2uiz>
 8001902:	4602      	mov	r2, r0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	631a      	str	r2, [r3, #48]	@ 0x30
 8001908:	e002      	b.n	8001910 <Generic_Ultrasonic_Callback+0xc0>
            } else {
                // Timeout or glitch - set distance to 0 or max
                sensor->Distance = 0; // Indicate error/timeout
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	631a      	str	r2, [r3, #48]	@ 0x30
            }
            sensor->IsReady = 1;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            sensor->State = ULTRASONIC_STATE_IDLE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
    // Note: EXTI pending bit is cleared in the EXTI driver's ISR

    // In main loop or system timer handler:
    if (sensor->State == ULTRASONIC_STATE_WAITING_ECHO && 
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d112      	bne.n	8001950 <Generic_Ultrasonic_Callback+0x100>
        (current_time - sensor->StartTime) > ULTRASONIC_TIMEOUT_TICKS) {
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
    if (sensor->State == ULTRASONIC_STATE_WAITING_ECHO && 
 8001932:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001936:	4293      	cmp	r3, r2
 8001938:	d90a      	bls.n	8001950 <Generic_Ultrasonic_Callback+0x100>
        sensor->State = ULTRASONIC_STATE_IDLE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2020 	strb.w	r2, [r3, #32]
        sensor->Distance = 0; // Indicate timeout
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	631a      	str	r2, [r3, #48]	@ 0x30
        sensor->IsReady = 1;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
}
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	45a1cac1 	.word	0x45a1cac1
 800195c:	3fd5f3b6 	.word	0x3fd5f3b6

08001960 <Front_Ultrasonic_Callback>:

/**
 * @brief Front ultrasonic sensor EXTI callback
 */
void Front_Ultrasonic_Callback(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
    Generic_Ultrasonic_Callback(&frontUltrasonic);
 8001964:	4802      	ldr	r0, [pc, #8]	@ (8001970 <Front_Ultrasonic_Callback+0x10>)
 8001966:	f7ff ff73 	bl	8001850 <Generic_Ultrasonic_Callback>
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000004c 	.word	0x2000004c

08001974 <Rear_Ultrasonic_Callback>:

/**
 * @brief Rear ultrasonic sensor EXTI callback
 */
void Rear_Ultrasonic_Callback(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
    Generic_Ultrasonic_Callback(&rearUltrasonic);
 8001978:	4802      	ldr	r0, [pc, #8]	@ (8001984 <Rear_Ultrasonic_Callback+0x10>)
 800197a:	f7ff ff69 	bl	8001850 <Generic_Ultrasonic_Callback>
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000084 	.word	0x20000084

08001988 <Left_Ultrasonic_Callback>:

/**
 * @brief Left ultrasonic sensor EXTI callback
 */
void Left_Ultrasonic_Callback(void) {
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
    Generic_Ultrasonic_Callback(&leftUltrasonic);
 800198c:	4802      	ldr	r0, [pc, #8]	@ (8001998 <Left_Ultrasonic_Callback+0x10>)
 800198e:	f7ff ff5f 	bl	8001850 <Generic_Ultrasonic_Callback>
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200000bc 	.word	0x200000bc

0800199c <Right_Ultrasonic_Callback>:

/**
 * @brief Right ultrasonic sensor EXTI callback
 */
void Right_Ultrasonic_Callback(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
    Generic_Ultrasonic_Callback(&rightUltrasonic);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <Right_Ultrasonic_Callback+0x10>)
 80019a2:	f7ff ff55 	bl	8001850 <Generic_Ultrasonic_Callback>
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200000f4 	.word	0x200000f4

080019b0 <Timer_Init>:
}

/**
 * @brief Initialize system timer (TIM4)
 */
void Timer_Init(void) {
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
    // Configure TIM4 for a 50ms (control update rate) period
    TIM_TimeBase_Config_t sysTimerConfig = {
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <Timer_Init+0x5c>)
 80019b8:	463c      	mov	r4, r7
 80019ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .CounterMode = TIM_COUNTERMODE_UP,
        .Period = SYSTEM_TIMER_PERIOD,           // 499 for 50ms period
        .ClockDivision = TIM_CLOCKDIVISION_DIV1,
        .RepetitionCounter = 0
    };
    MCAL_TIM_Base_Init(&sysTimerConfig);
 80019c0:	463b      	mov	r3, r7
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 fb90 	bl	80030e8 <MCAL_TIM_Base_Init>
    MCAL_TIM_SetUpdateCallback(SYSTEM_TIMER, System_Timer_Callback);
 80019c8:	4911      	ldr	r1, [pc, #68]	@ (8001a10 <Timer_Init+0x60>)
 80019ca:	4812      	ldr	r0, [pc, #72]	@ (8001a14 <Timer_Init+0x64>)
 80019cc:	f001 fe08 	bl	80035e0 <MCAL_TIM_SetUpdateCallback>
    MCAL_TIM_EnableIT(SYSTEM_TIMER, TIM_IT_UPDATE);
 80019d0:	2101      	movs	r1, #1
 80019d2:	4810      	ldr	r0, [pc, #64]	@ (8001a14 <Timer_Init+0x64>)
 80019d4:	f001 fdb0 	bl	8003538 <MCAL_TIM_EnableIT>
    MCAL_TIM_Base_Start(SYSTEM_TIMER);
 80019d8:	480e      	ldr	r0, [pc, #56]	@ (8001a14 <Timer_Init+0x64>)
 80019da:	f001 fbbf 	bl	800315c <MCAL_TIM_Base_Start>

    // Use these instead of NVIC_SetPriority
    NVIC_IRQ28_TIM2_Enable;  // For ultrasonic timer
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <Timer_Init+0x68>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001a18 <Timer_Init+0x68>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e8:	6013      	str	r3, [r2, #0]
    NVIC_IRQ29_TIM3_Enable;  // For speed sensor timer
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <Timer_Init+0x68>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <Timer_Init+0x68>)
 80019f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80019f4:	6013      	str	r3, [r2, #0]
    NVIC_IRQ30_TIM4_Enable;  // For system timer
 80019f6:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <Timer_Init+0x68>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <Timer_Init+0x68>)
 80019fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a00:	6013      	str	r3, [r2, #0]
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	08003a40 	.word	0x08003a40
 8001a10:	08001a1d 	.word	0x08001a1d
 8001a14:	40000800 	.word	0x40000800
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <System_Timer_Callback>:

/**
 * @brief System timer (TIM4) update callback function
 */
void System_Timer_Callback(void) {
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
    // Set flag for main loop
    timer_flag = 1;
 8001a20:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <System_Timer_Callback+0x14>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
    // Note: Timer flag is cleared in TIM4_IRQHandler in driver
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	2000024c 	.word	0x2000024c

08001a34 <Speed_Timer_Callback>:

/**
 * @brief Speed timer (TIM3) update callback function
 */
void Speed_Timer_Callback(void) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
    // Capture current pulse counts
    uint32_t currentLeftPulses = leftPulseCount;
 8001a3a:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <Speed_Timer_Callback+0x8c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	607b      	str	r3, [r7, #4]
    uint32_t currentRightPulses = rightPulseCount;
 8001a40:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <Speed_Timer_Callback+0x90>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	603b      	str	r3, [r7, #0]
    
    // Reset pulse counters for the next interval
    leftPulseCount = 0;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <Speed_Timer_Callback+0x8c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
    rightPulseCount = 0;
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac4 <Speed_Timer_Callback+0x90>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
    
    // Store pulse counts for later use
    leftSpeedSensor.PulseCount = currentLeftPulses;
 8001a52:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac8 <Speed_Timer_Callback+0x94>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6153      	str	r3, [r2, #20]
    rightSpeedSensor.PulseCount = currentRightPulses;
 8001a58:	4a1c      	ldr	r2, [pc, #112]	@ (8001acc <Speed_Timer_Callback+0x98>)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6153      	str	r3, [r2, #20]
    
    // Calculate speed (mm/s)
    // Speed = (Pulses / Interval) * (mm / Pulse)
    leftSpeedSensor.Speed = (float)(currentLeftPulses / SPEED_TIMER_INTERVAL_S) * MM_PER_PULSE;
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7fe fcc8 	bl	80003f4 <__aeabi_ui2d>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7fe ff6e 	bl	800094c <__aeabi_d2f>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4917      	ldr	r1, [pc, #92]	@ (8001ad0 <Speed_Timer_Callback+0x9c>)
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff f8c7 	bl	8000c08 <__aeabi_fmul>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <Speed_Timer_Callback+0x94>)
 8001a80:	625a      	str	r2, [r3, #36]	@ 0x24
    rightSpeedSensor.Speed = (float)(currentRightPulses / SPEED_TIMER_INTERVAL_S) * MM_PER_PULSE;
 8001a82:	6838      	ldr	r0, [r7, #0]
 8001a84:	f7fe fcb6 	bl	80003f4 <__aeabi_ui2d>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f7fe ff5c 	bl	800094c <__aeabi_d2f>
 8001a94:	4603      	mov	r3, r0
 8001a96:	490e      	ldr	r1, [pc, #56]	@ (8001ad0 <Speed_Timer_Callback+0x9c>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff f8b5 	bl	8000c08 <__aeabi_fmul>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <Speed_Timer_Callback+0x98>)
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    
    leftSpeedSensor.IsReady = 1;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <Speed_Timer_Callback+0x94>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    rightSpeedSensor.IsReady = 1;
 8001aae:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <Speed_Timer_Callback+0x98>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    
    // Note: Timer flag is cleared in TIM3_IRQHandler in driver
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000184 	.word	0x20000184
 8001ac4:	20000188 	.word	0x20000188
 8001ac8:	2000012c 	.word	0x2000012c
 8001acc:	20000158 	.word	0x20000158
 8001ad0:	42040000 	.word	0x42040000

08001ad4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration - Set to 8MHz using HSI
 */
void SystemClock_Config(void) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
    // Ensure the HSI is on and ready
    RCC->CR |= RCC_CR_HSION;
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a2b      	ldr	r2, [pc, #172]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_HSIRDY));
 8001ae4:	bf00      	nop
 8001ae6:	4b29      	ldr	r3, [pc, #164]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f9      	beq.n	8001ae6 <SystemClock_Config+0x12>
    
    // Select HSI as system clock
    RCC->CFGR &= ~RCC_CFGR_SW; // Clear SW bits
 8001af2:	4b26      	ldr	r3, [pc, #152]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4a25      	ldr	r2, [pc, #148]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001af8:	f023 0303 	bic.w	r3, r3, #3
 8001afc:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_HSI; // Select HSI
 8001afe:	4b23      	ldr	r3, [pc, #140]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b00:	4a22      	ldr	r2, [pc, #136]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	6053      	str	r3, [r2, #4]
    while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI); // Wait for HSI to be system clock
 8001b06:	bf00      	nop
 8001b08:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f9      	bne.n	8001b08 <SystemClock_Config+0x34>
    
    // Reset HSEON, CSSON and PLLON bits
    RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON);
 8001b14:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1c      	ldr	r2, [pc, #112]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b1a:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
    
    // Reset PLL configuration
    RCC->CFGR &= ~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL);
 8001b24:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4a18      	ldr	r2, [pc, #96]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b2a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001b2e:	6053      	str	r3, [r2, #4]
    
    // Disable all interrupts
    RCC->CIR = 0x00000000;
 8001b30:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
    
    // Configure Flash: Enable Prefetch Buffer and set Latency to 0 (for 8 MHz)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001b36:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <SystemClock_Config+0xbc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a15      	ldr	r2, [pc, #84]	@ (8001b90 <SystemClock_Config+0xbc>)
 8001b3c:	f043 0310 	orr.w	r3, r3, #16
 8001b40:	6013      	str	r3, [r2, #0]
    FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8001b42:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <SystemClock_Config+0xbc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a12      	ldr	r2, [pc, #72]	@ (8001b90 <SystemClock_Config+0xbc>)
 8001b48:	f023 0307 	bic.w	r3, r3, #7
 8001b4c:	6013      	str	r3, [r2, #0]
    
    // Configure clock dividers: AHB=1, APB1=1, APB2=1
    RCC->CFGR &= ~(RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2);
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4a0e      	ldr	r2, [pc, #56]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b54:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b58:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001b5c:	6053      	str	r3, [r2, #4]
    
    // Enable peripheral clocks
    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN;
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b64:	f043 031d 	orr.w	r3, r3, #29
 8001b68:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM3EN | RCC_APB1ENR_TIM4EN;
 8001b6a:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a07      	ldr	r2, [pc, #28]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b70:	f043 0307 	orr.w	r3, r3, #7
 8001b74:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; // Ensure TIM1 clock is enabled for PWM
 8001b76:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <SystemClock_Config+0xb8>)
 8001b7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b80:	6193      	str	r3, [r2, #24]
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40022000 	.word	0x40022000

08001b94 <Initialize_Sensors>:

/**
 * @brief Initialize all sensors
 */
void Initialize_Sensors(void) {
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b09b      	sub	sp, #108	@ 0x6c
 8001b98:	af00      	add	r7, sp, #0
    
    // --- Initialize Ultrasonic Sensors & Timer (TIM2) ---
    
    // Configure TIM2 for 1us tick (for ultrasonic echo measurement)
    TIM_TimeBase_Config_t usTimerConfig = {
 8001b9a:	4b64      	ldr	r3, [pc, #400]	@ (8001d2c <Initialize_Sensors+0x198>)
 8001b9c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .CounterMode = TIM_COUNTERMODE_UP,
        .Period = ULTRASONIC_TIMER_PERIOD,      // 0xFFFF (max count)
        .ClockDivision = TIM_CLOCKDIVISION_DIV1,
        .RepetitionCounter = 0
    };
    MCAL_TIM_Base_Init(&usTimerConfig);
 8001ba6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 fa9c 	bl	80030e8 <MCAL_TIM_Base_Init>
    MCAL_TIM_Base_Start(ULTRASONIC_TIMER);
 8001bb0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001bb4:	f001 fad2 	bl	800315c <MCAL_TIM_Base_Start>
    
    // Front ultrasonic
    frontUltrasonic.TrigPort = ULTRASONIC_FRONT_TRIG_PORT;
 8001bb8:	4b5d      	ldr	r3, [pc, #372]	@ (8001d30 <Initialize_Sensors+0x19c>)
 8001bba:	4a5e      	ldr	r2, [pc, #376]	@ (8001d34 <Initialize_Sensors+0x1a0>)
 8001bbc:	601a      	str	r2, [r3, #0]
    frontUltrasonic.TrigPin = ULTRASONIC_FRONT_TRIG_PIN;
 8001bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8001d30 <Initialize_Sensors+0x19c>)
 8001bc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bc4:	809a      	strh	r2, [r3, #4]
    frontUltrasonic.EchoPort = ULTRASONIC_FRONT_ECHO_PORT;
 8001bc6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d30 <Initialize_Sensors+0x19c>)
 8001bc8:	4a5a      	ldr	r2, [pc, #360]	@ (8001d34 <Initialize_Sensors+0x1a0>)
 8001bca:	609a      	str	r2, [r3, #8]
    frontUltrasonic.EchoPin = ULTRASONIC_FRONT_ECHO_PIN;
 8001bcc:	4b58      	ldr	r3, [pc, #352]	@ (8001d30 <Initialize_Sensors+0x19c>)
 8001bce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bd2:	819a      	strh	r2, [r3, #12]
    frontUltrasonic.EXTI_Mapping = ULTRASONIC_FRONT_EXTI;
 8001bd4:	4b56      	ldr	r3, [pc, #344]	@ (8001d30 <Initialize_Sensors+0x19c>)
 8001bd6:	4a58      	ldr	r2, [pc, #352]	@ (8001d38 <Initialize_Sensors+0x1a4>)
 8001bd8:	3310      	adds	r3, #16
 8001bda:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    frontUltrasonic.Callback = Front_Ultrasonic_Callback; // Assign EXTI callback
 8001be0:	4b53      	ldr	r3, [pc, #332]	@ (8001d30 <Initialize_Sensors+0x19c>)
 8001be2:	4a56      	ldr	r2, [pc, #344]	@ (8001d3c <Initialize_Sensors+0x1a8>)
 8001be4:	61da      	str	r2, [r3, #28]
    HAL_ULTRASONIC_Init(&frontUltrasonic); // Configures GPIO, EXTI (rising/falling), registers callback
 8001be6:	4852      	ldr	r0, [pc, #328]	@ (8001d30 <Initialize_Sensors+0x19c>)
 8001be8:	f000 fc30 	bl	800244c <HAL_ULTRASONIC_Init>
    
    // Rear ultrasonic
    rearUltrasonic.TrigPort = ULTRASONIC_REAR_TRIG_PORT;
 8001bec:	4b54      	ldr	r3, [pc, #336]	@ (8001d40 <Initialize_Sensors+0x1ac>)
 8001bee:	4a51      	ldr	r2, [pc, #324]	@ (8001d34 <Initialize_Sensors+0x1a0>)
 8001bf0:	601a      	str	r2, [r3, #0]
    rearUltrasonic.TrigPin = ULTRASONIC_REAR_TRIG_PIN;
 8001bf2:	4b53      	ldr	r3, [pc, #332]	@ (8001d40 <Initialize_Sensors+0x1ac>)
 8001bf4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bf8:	809a      	strh	r2, [r3, #4]
    rearUltrasonic.EchoPort = ULTRASONIC_REAR_ECHO_PORT;
 8001bfa:	4b51      	ldr	r3, [pc, #324]	@ (8001d40 <Initialize_Sensors+0x1ac>)
 8001bfc:	4a4d      	ldr	r2, [pc, #308]	@ (8001d34 <Initialize_Sensors+0x1a0>)
 8001bfe:	609a      	str	r2, [r3, #8]
    rearUltrasonic.EchoPin = ULTRASONIC_REAR_ECHO_PIN;
 8001c00:	4b4f      	ldr	r3, [pc, #316]	@ (8001d40 <Initialize_Sensors+0x1ac>)
 8001c02:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c06:	819a      	strh	r2, [r3, #12]
    rearUltrasonic.EXTI_Mapping = ULTRASONIC_REAR_EXTI;
 8001c08:	4b4d      	ldr	r3, [pc, #308]	@ (8001d40 <Initialize_Sensors+0x1ac>)
 8001c0a:	4a4e      	ldr	r2, [pc, #312]	@ (8001d44 <Initialize_Sensors+0x1b0>)
 8001c0c:	3310      	adds	r3, #16
 8001c0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    rearUltrasonic.Callback = Rear_Ultrasonic_Callback;
 8001c14:	4b4a      	ldr	r3, [pc, #296]	@ (8001d40 <Initialize_Sensors+0x1ac>)
 8001c16:	4a4c      	ldr	r2, [pc, #304]	@ (8001d48 <Initialize_Sensors+0x1b4>)
 8001c18:	61da      	str	r2, [r3, #28]
    HAL_ULTRASONIC_Init(&rearUltrasonic);
 8001c1a:	4849      	ldr	r0, [pc, #292]	@ (8001d40 <Initialize_Sensors+0x1ac>)
 8001c1c:	f000 fc16 	bl	800244c <HAL_ULTRASONIC_Init>
    
    // Left ultrasonic
    leftUltrasonic.TrigPort = ULTRASONIC_LEFT_TRIG_PORT;
 8001c20:	4b4a      	ldr	r3, [pc, #296]	@ (8001d4c <Initialize_Sensors+0x1b8>)
 8001c22:	4a44      	ldr	r2, [pc, #272]	@ (8001d34 <Initialize_Sensors+0x1a0>)
 8001c24:	601a      	str	r2, [r3, #0]
    leftUltrasonic.TrigPin = ULTRASONIC_LEFT_TRIG_PIN;
 8001c26:	4b49      	ldr	r3, [pc, #292]	@ (8001d4c <Initialize_Sensors+0x1b8>)
 8001c28:	2220      	movs	r2, #32
 8001c2a:	809a      	strh	r2, [r3, #4]
    leftUltrasonic.EchoPort = ULTRASONIC_LEFT_ECHO_PORT;
 8001c2c:	4b47      	ldr	r3, [pc, #284]	@ (8001d4c <Initialize_Sensors+0x1b8>)
 8001c2e:	4a48      	ldr	r2, [pc, #288]	@ (8001d50 <Initialize_Sensors+0x1bc>)
 8001c30:	609a      	str	r2, [r3, #8]
    leftUltrasonic.EchoPin = ULTRASONIC_LEFT_ECHO_PIN;
 8001c32:	4b46      	ldr	r3, [pc, #280]	@ (8001d4c <Initialize_Sensors+0x1b8>)
 8001c34:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c38:	819a      	strh	r2, [r3, #12]
    leftUltrasonic.EXTI_Mapping = ULTRASONIC_LEFT_EXTI;
 8001c3a:	4b44      	ldr	r3, [pc, #272]	@ (8001d4c <Initialize_Sensors+0x1b8>)
 8001c3c:	4a45      	ldr	r2, [pc, #276]	@ (8001d54 <Initialize_Sensors+0x1c0>)
 8001c3e:	3310      	adds	r3, #16
 8001c40:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    leftUltrasonic.Callback = Left_Ultrasonic_Callback;
 8001c46:	4b41      	ldr	r3, [pc, #260]	@ (8001d4c <Initialize_Sensors+0x1b8>)
 8001c48:	4a43      	ldr	r2, [pc, #268]	@ (8001d58 <Initialize_Sensors+0x1c4>)
 8001c4a:	61da      	str	r2, [r3, #28]
    HAL_ULTRASONIC_Init(&leftUltrasonic);
 8001c4c:	483f      	ldr	r0, [pc, #252]	@ (8001d4c <Initialize_Sensors+0x1b8>)
 8001c4e:	f000 fbfd 	bl	800244c <HAL_ULTRASONIC_Init>
    
    // Right ultrasonic
    rightUltrasonic.TrigPort = ULTRASONIC_RIGHT_TRIG_PORT;
 8001c52:	4b42      	ldr	r3, [pc, #264]	@ (8001d5c <Initialize_Sensors+0x1c8>)
 8001c54:	4a3e      	ldr	r2, [pc, #248]	@ (8001d50 <Initialize_Sensors+0x1bc>)
 8001c56:	601a      	str	r2, [r3, #0]
    rightUltrasonic.TrigPin = ULTRASONIC_RIGHT_TRIG_PIN;
 8001c58:	4b40      	ldr	r3, [pc, #256]	@ (8001d5c <Initialize_Sensors+0x1c8>)
 8001c5a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c5e:	809a      	strh	r2, [r3, #4]
    rightUltrasonic.EchoPort = ULTRASONIC_RIGHT_ECHO_PORT;
 8001c60:	4b3e      	ldr	r3, [pc, #248]	@ (8001d5c <Initialize_Sensors+0x1c8>)
 8001c62:	4a3f      	ldr	r2, [pc, #252]	@ (8001d60 <Initialize_Sensors+0x1cc>)
 8001c64:	609a      	str	r2, [r3, #8]
    rightUltrasonic.EchoPin = ULTRASONIC_RIGHT_ECHO_PIN;
 8001c66:	4b3d      	ldr	r3, [pc, #244]	@ (8001d5c <Initialize_Sensors+0x1c8>)
 8001c68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c6c:	819a      	strh	r2, [r3, #12]
    rightUltrasonic.EXTI_Mapping = ULTRASONIC_RIGHT_EXTI;
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d5c <Initialize_Sensors+0x1c8>)
 8001c70:	4a3c      	ldr	r2, [pc, #240]	@ (8001d64 <Initialize_Sensors+0x1d0>)
 8001c72:	3310      	adds	r3, #16
 8001c74:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    rightUltrasonic.Callback = Right_Ultrasonic_Callback;
 8001c7a:	4b38      	ldr	r3, [pc, #224]	@ (8001d5c <Initialize_Sensors+0x1c8>)
 8001c7c:	4a3a      	ldr	r2, [pc, #232]	@ (8001d68 <Initialize_Sensors+0x1d4>)
 8001c7e:	61da      	str	r2, [r3, #28]
    HAL_ULTRASONIC_Init(&rightUltrasonic);
 8001c80:	4836      	ldr	r0, [pc, #216]	@ (8001d5c <Initialize_Sensors+0x1c8>)
 8001c82:	f000 fbe3 	bl	800244c <HAL_ULTRASONIC_Init>
    
    // Initialize obstacle detection state
    obstacleState.front = ZONE_SAFE;
 8001c86:	4b39      	ldr	r3, [pc, #228]	@ (8001d6c <Initialize_Sensors+0x1d8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
    obstacleState.rear = ZONE_SAFE;
 8001c8c:	4b37      	ldr	r3, [pc, #220]	@ (8001d6c <Initialize_Sensors+0x1d8>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	705a      	strb	r2, [r3, #1]
    obstacleState.left = ZONE_SAFE;
 8001c92:	4b36      	ldr	r3, [pc, #216]	@ (8001d6c <Initialize_Sensors+0x1d8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	709a      	strb	r2, [r3, #2]
    obstacleState.right = ZONE_SAFE;
 8001c98:	4b34      	ldr	r3, [pc, #208]	@ (8001d6c <Initialize_Sensors+0x1d8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	70da      	strb	r2, [r3, #3]
    
    // --- Initialize Speed Sensors & Timer (TIM3) ---
    
    // Configure TIM3 for 1s update interrupt (for speed calculation)
    TIM_TimeBase_Config_t speedTimerConfig = {
 8001c9e:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <Initialize_Sensors+0x1dc>)
 8001ca0:	f107 0418 	add.w	r4, r7, #24
 8001ca4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .CounterMode = TIM_COUNTERMODE_UP,
        .Period = SPEED_SENSOR_PERIOD,          // 10000 for 1s period (10000 * 100us)
        .ClockDivision = TIM_CLOCKDIVISION_DIV1,
        .RepetitionCounter = 0
    };
    MCAL_TIM_Base_Init(&speedTimerConfig);
 8001caa:	f107 0318 	add.w	r3, r7, #24
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 fa1a 	bl	80030e8 <MCAL_TIM_Base_Init>
    MCAL_TIM_SetUpdateCallback(SPEED_SENSOR_TIMER, Speed_Timer_Callback); // Register TIM3 update callback
 8001cb4:	492f      	ldr	r1, [pc, #188]	@ (8001d74 <Initialize_Sensors+0x1e0>)
 8001cb6:	4830      	ldr	r0, [pc, #192]	@ (8001d78 <Initialize_Sensors+0x1e4>)
 8001cb8:	f001 fc92 	bl	80035e0 <MCAL_TIM_SetUpdateCallback>
    MCAL_TIM_EnableIT(SPEED_SENSOR_TIMER, TIM_IT_UPDATE); // Enable TIM3 update interrupt
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	482e      	ldr	r0, [pc, #184]	@ (8001d78 <Initialize_Sensors+0x1e4>)
 8001cc0:	f001 fc3a 	bl	8003538 <MCAL_TIM_EnableIT>
    MCAL_TIM_Base_Start(SPEED_SENSOR_TIMER);
 8001cc4:	482c      	ldr	r0, [pc, #176]	@ (8001d78 <Initialize_Sensors+0x1e4>)
 8001cc6:	f001 fa49 	bl	800315c <MCAL_TIM_Base_Start>
    
    // For left speed sensor
    leftSpeedSensor.Port = SPEED_SENSOR_LEFT_PORT;
 8001cca:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <Initialize_Sensors+0x1e8>)
 8001ccc:	4a24      	ldr	r2, [pc, #144]	@ (8001d60 <Initialize_Sensors+0x1cc>)
 8001cce:	601a      	str	r2, [r3, #0]
    leftSpeedSensor.Pin = SPEED_SENSOR_LEFT_PIN;
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <Initialize_Sensors+0x1e8>)
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	809a      	strh	r2, [r3, #4]
    leftSpeedSensor.EXTI_Mapping = SPEED_SENSOR_LEFT_EXTI;
 8001cd6:	4b29      	ldr	r3, [pc, #164]	@ (8001d7c <Initialize_Sensors+0x1e8>)
 8001cd8:	4a29      	ldr	r2, [pc, #164]	@ (8001d80 <Initialize_Sensors+0x1ec>)
 8001cda:	3308      	adds	r3, #8
 8001cdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    leftSpeedSensor.PulseCount = 0;
 8001ce2:	4b26      	ldr	r3, [pc, #152]	@ (8001d7c <Initialize_Sensors+0x1e8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	615a      	str	r2, [r3, #20]
    leftSpeedSensor.Speed = 0.0;
 8001ce8:	4b24      	ldr	r3, [pc, #144]	@ (8001d7c <Initialize_Sensors+0x1e8>)
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_SPEED_SENSOR_Init(&leftSpeedSensor);
 8001cf0:	4822      	ldr	r0, [pc, #136]	@ (8001d7c <Initialize_Sensors+0x1e8>)
 8001cf2:	f000 fb01 	bl	80022f8 <HAL_SPEED_SENSOR_Init>
    
    // For right speed sensor
    rightSpeedSensor.Port = SPEED_SENSOR_RIGHT_PORT;
 8001cf6:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <Initialize_Sensors+0x1f0>)
 8001cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8001d34 <Initialize_Sensors+0x1a0>)
 8001cfa:	601a      	str	r2, [r3, #0]
    rightSpeedSensor.Pin = SPEED_SENSOR_RIGHT_PIN;
 8001cfc:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <Initialize_Sensors+0x1f0>)
 8001cfe:	2208      	movs	r2, #8
 8001d00:	809a      	strh	r2, [r3, #4]
    rightSpeedSensor.EXTI_Mapping = SPEED_SENSOR_RIGHT_EXTI;
 8001d02:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <Initialize_Sensors+0x1f0>)
 8001d04:	4a20      	ldr	r2, [pc, #128]	@ (8001d88 <Initialize_Sensors+0x1f4>)
 8001d06:	3308      	adds	r3, #8
 8001d08:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    rightSpeedSensor.PulseCount = 0;
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <Initialize_Sensors+0x1f0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]
    rightSpeedSensor.Speed = 0.0;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <Initialize_Sensors+0x1f0>)
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_SPEED_SENSOR_Init(&rightSpeedSensor);
 8001d1c:	4819      	ldr	r0, [pc, #100]	@ (8001d84 <Initialize_Sensors+0x1f0>)
 8001d1e:	f000 faeb 	bl	80022f8 <HAL_SPEED_SENSOR_Init>
}
 8001d22:	bf00      	nop
 8001d24:	376c      	adds	r7, #108	@ 0x6c
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	08003a50 	.word	0x08003a50
 8001d30:	2000004c 	.word	0x2000004c
 8001d34:	40010c00 	.word	0x40010c00
 8001d38:	08003a60 	.word	0x08003a60
 8001d3c:	08001961 	.word	0x08001961
 8001d40:	20000084 	.word	0x20000084
 8001d44:	08003a6c 	.word	0x08003a6c
 8001d48:	08001975 	.word	0x08001975
 8001d4c:	200000bc 	.word	0x200000bc
 8001d50:	40011000 	.word	0x40011000
 8001d54:	08003a78 	.word	0x08003a78
 8001d58:	08001989 	.word	0x08001989
 8001d5c:	200000f4 	.word	0x200000f4
 8001d60:	40010800 	.word	0x40010800
 8001d64:	08003a84 	.word	0x08003a84
 8001d68:	0800199d 	.word	0x0800199d
 8001d6c:	20000250 	.word	0x20000250
 8001d70:	08003a90 	.word	0x08003a90
 8001d74:	08001a35 	.word	0x08001a35
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	2000012c 	.word	0x2000012c
 8001d80:	08003aa0 	.word	0x08003aa0
 8001d84:	20000158 	.word	0x20000158
 8001d88:	08003aac 	.word	0x08003aac

08001d8c <Initialize_Motors>:

/**
 * @brief Initialize all motors (Placeholder - Assumes HAL does the work)
 */
void Initialize_Motors(void) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
    // Initialize the motor control system
    HAL_MOTOR_Init();
 8001d90:	f000 f8b0 	bl	8001ef4 <HAL_MOTOR_Init>
    
    // Configure front left motor
    frontLeftMotor.DirectionPort = MOTOR_FL_PORT_FWD;
 8001d94:	4b33      	ldr	r3, [pc, #204]	@ (8001e64 <Initialize_Motors+0xd8>)
 8001d96:	4a34      	ldr	r2, [pc, #208]	@ (8001e68 <Initialize_Motors+0xdc>)
 8001d98:	601a      	str	r2, [r3, #0]
    frontLeftMotor.DirectionPin_Forward = MOTOR_FL_PIN_FWD;
 8001d9a:	4b32      	ldr	r3, [pc, #200]	@ (8001e64 <Initialize_Motors+0xd8>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	809a      	strh	r2, [r3, #4]
    frontLeftMotor.DirectionPin_Backward = MOTOR_FL_PIN_BWD;
 8001da0:	4b30      	ldr	r3, [pc, #192]	@ (8001e64 <Initialize_Motors+0xd8>)
 8001da2:	2202      	movs	r2, #2
 8001da4:	80da      	strh	r2, [r3, #6]
    frontLeftMotor.PWMPort = MOTOR_FL_PWM_PORT;
 8001da6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e64 <Initialize_Motors+0xd8>)
 8001da8:	4a2f      	ldr	r2, [pc, #188]	@ (8001e68 <Initialize_Motors+0xdc>)
 8001daa:	609a      	str	r2, [r3, #8]
    frontLeftMotor.PWMPin = MOTOR_FL_PWM_PIN;
 8001dac:	4b2d      	ldr	r3, [pc, #180]	@ (8001e64 <Initialize_Motors+0xd8>)
 8001dae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001db2:	819a      	strh	r2, [r3, #12]
    // Remove ID field reference, as it's not part of the Motor_t struct
    HAL_MOTOR_Config(&frontLeftMotor, MOTOR_PWM_TIMER, MOTOR_FL_PWM_CHANNEL);
 8001db4:	2201      	movs	r2, #1
 8001db6:	492d      	ldr	r1, [pc, #180]	@ (8001e6c <Initialize_Motors+0xe0>)
 8001db8:	482a      	ldr	r0, [pc, #168]	@ (8001e64 <Initialize_Motors+0xd8>)
 8001dba:	f000 f8af 	bl	8001f1c <HAL_MOTOR_Config>
    HAL_MOTOR_Enable(&frontLeftMotor, 1);
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	4828      	ldr	r0, [pc, #160]	@ (8001e64 <Initialize_Motors+0xd8>)
 8001dc2:	f000 f954 	bl	800206e <HAL_MOTOR_Enable>
    
    // Configure front right motor
    frontRightMotor.DirectionPort = MOTOR_FR_PORT_FWD;
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e70 <Initialize_Motors+0xe4>)
 8001dc8:	4a27      	ldr	r2, [pc, #156]	@ (8001e68 <Initialize_Motors+0xdc>)
 8001dca:	601a      	str	r2, [r3, #0]
    frontRightMotor.DirectionPin_Forward = MOTOR_FR_PIN_FWD;
 8001dcc:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <Initialize_Motors+0xe4>)
 8001dce:	2204      	movs	r2, #4
 8001dd0:	809a      	strh	r2, [r3, #4]
    frontRightMotor.DirectionPin_Backward = MOTOR_FR_PIN_BWD;
 8001dd2:	4b27      	ldr	r3, [pc, #156]	@ (8001e70 <Initialize_Motors+0xe4>)
 8001dd4:	2208      	movs	r2, #8
 8001dd6:	80da      	strh	r2, [r3, #6]
    frontRightMotor.PWMPort = MOTOR_FR_PWM_PORT;
 8001dd8:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <Initialize_Motors+0xe4>)
 8001dda:	4a23      	ldr	r2, [pc, #140]	@ (8001e68 <Initialize_Motors+0xdc>)
 8001ddc:	609a      	str	r2, [r3, #8]
    frontRightMotor.PWMPin = MOTOR_FR_PWM_PIN;
 8001dde:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <Initialize_Motors+0xe4>)
 8001de0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de4:	819a      	strh	r2, [r3, #12]
    // Remove ID field reference
    HAL_MOTOR_Config(&frontRightMotor, MOTOR_PWM_TIMER, MOTOR_FR_PWM_CHANNEL);
 8001de6:	2202      	movs	r2, #2
 8001de8:	4920      	ldr	r1, [pc, #128]	@ (8001e6c <Initialize_Motors+0xe0>)
 8001dea:	4821      	ldr	r0, [pc, #132]	@ (8001e70 <Initialize_Motors+0xe4>)
 8001dec:	f000 f896 	bl	8001f1c <HAL_MOTOR_Config>
    HAL_MOTOR_Enable(&frontRightMotor, 1);
 8001df0:	2101      	movs	r1, #1
 8001df2:	481f      	ldr	r0, [pc, #124]	@ (8001e70 <Initialize_Motors+0xe4>)
 8001df4:	f000 f93b 	bl	800206e <HAL_MOTOR_Enable>
    
    // Configure rear left motor
    rearLeftMotor.DirectionPort = MOTOR_RL_PORT_FWD;
 8001df8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <Initialize_Motors+0xe8>)
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8001e78 <Initialize_Motors+0xec>)
 8001dfc:	601a      	str	r2, [r3, #0]
    rearLeftMotor.DirectionPin_Forward = MOTOR_RL_PIN_FWD;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <Initialize_Motors+0xe8>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	809a      	strh	r2, [r3, #4]
    rearLeftMotor.DirectionPin_Backward = MOTOR_RL_PIN_BWD;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <Initialize_Motors+0xe8>)
 8001e06:	2202      	movs	r2, #2
 8001e08:	80da      	strh	r2, [r3, #6]
    rearLeftMotor.PWMPort = MOTOR_RL_PWM_PORT;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <Initialize_Motors+0xe8>)
 8001e0c:	4a16      	ldr	r2, [pc, #88]	@ (8001e68 <Initialize_Motors+0xdc>)
 8001e0e:	609a      	str	r2, [r3, #8]
    rearLeftMotor.PWMPin = MOTOR_RL_PWM_PIN;
 8001e10:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <Initialize_Motors+0xe8>)
 8001e12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e16:	819a      	strh	r2, [r3, #12]
    // Remove ID field reference
    HAL_MOTOR_Config(&rearLeftMotor, MOTOR_PWM_TIMER, MOTOR_RL_PWM_CHANNEL);
 8001e18:	2203      	movs	r2, #3
 8001e1a:	4914      	ldr	r1, [pc, #80]	@ (8001e6c <Initialize_Motors+0xe0>)
 8001e1c:	4815      	ldr	r0, [pc, #84]	@ (8001e74 <Initialize_Motors+0xe8>)
 8001e1e:	f000 f87d 	bl	8001f1c <HAL_MOTOR_Config>
    HAL_MOTOR_Enable(&rearLeftMotor, 1);
 8001e22:	2101      	movs	r1, #1
 8001e24:	4813      	ldr	r0, [pc, #76]	@ (8001e74 <Initialize_Motors+0xe8>)
 8001e26:	f000 f922 	bl	800206e <HAL_MOTOR_Enable>
    
    // Configure rear right motor
    rearRightMotor.DirectionPort = MOTOR_RR_PORT_FWD;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	@ (8001e7c <Initialize_Motors+0xf0>)
 8001e2c:	4a12      	ldr	r2, [pc, #72]	@ (8001e78 <Initialize_Motors+0xec>)
 8001e2e:	601a      	str	r2, [r3, #0]
    rearRightMotor.DirectionPin_Forward = MOTOR_RR_PIN_FWD;
 8001e30:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <Initialize_Motors+0xf0>)
 8001e32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e36:	809a      	strh	r2, [r3, #4]
    rearRightMotor.DirectionPin_Backward = MOTOR_RR_PIN_BWD;
 8001e38:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <Initialize_Motors+0xf0>)
 8001e3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e3e:	80da      	strh	r2, [r3, #6]
    rearRightMotor.PWMPort = MOTOR_RR_PWM_PORT;
 8001e40:	4b0e      	ldr	r3, [pc, #56]	@ (8001e7c <Initialize_Motors+0xf0>)
 8001e42:	4a09      	ldr	r2, [pc, #36]	@ (8001e68 <Initialize_Motors+0xdc>)
 8001e44:	609a      	str	r2, [r3, #8]
    rearRightMotor.PWMPin = MOTOR_RR_PWM_PIN;
 8001e46:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <Initialize_Motors+0xf0>)
 8001e48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e4c:	819a      	strh	r2, [r3, #12]
    // Remove ID field reference
    HAL_MOTOR_Config(&rearRightMotor, MOTOR_PWM_TIMER, MOTOR_RR_PWM_CHANNEL);
 8001e4e:	2204      	movs	r2, #4
 8001e50:	4906      	ldr	r1, [pc, #24]	@ (8001e6c <Initialize_Motors+0xe0>)
 8001e52:	480a      	ldr	r0, [pc, #40]	@ (8001e7c <Initialize_Motors+0xf0>)
 8001e54:	f000 f862 	bl	8001f1c <HAL_MOTOR_Config>
    HAL_MOTOR_Enable(&rearRightMotor, 1);
 8001e58:	2101      	movs	r1, #1
 8001e5a:	4808      	ldr	r0, [pc, #32]	@ (8001e7c <Initialize_Motors+0xf0>)
 8001e5c:	f000 f907 	bl	800206e <HAL_MOTOR_Enable>
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	2000018c 	.word	0x2000018c
 8001e68:	40010800 	.word	0x40010800
 8001e6c:	40012c00 	.word	0x40012c00
 8001e70:	200001a8 	.word	0x200001a8
 8001e74:	200001c4 	.word	0x200001c4
 8001e78:	40010c00 	.word	0x40010c00
 8001e7c:	200001e0 	.word	0x200001e0

08001e80 <Initialize_ACC>:

/**
 * @brief Initialize ACC system (Placeholder - Assumes HAL/Logic exists)
 */
void Initialize_ACC(void) {
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
    // Link sensors and motors to ACC instance
    acc.FrontUltrasonic = &frontUltrasonic;
 8001e84:	4b10      	ldr	r3, [pc, #64]	@ (8001ec8 <Initialize_ACC+0x48>)
 8001e86:	4a11      	ldr	r2, [pc, #68]	@ (8001ecc <Initialize_ACC+0x4c>)
 8001e88:	601a      	str	r2, [r3, #0]
    acc.RearUltrasonic = &rearUltrasonic;
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <Initialize_ACC+0x48>)
 8001e8c:	4a10      	ldr	r2, [pc, #64]	@ (8001ed0 <Initialize_ACC+0x50>)
 8001e8e:	605a      	str	r2, [r3, #4]
    acc.LeftUltrasonic = &leftUltrasonic;
 8001e90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <Initialize_ACC+0x48>)
 8001e92:	4a10      	ldr	r2, [pc, #64]	@ (8001ed4 <Initialize_ACC+0x54>)
 8001e94:	609a      	str	r2, [r3, #8]
    acc.RightUltrasonic = &rightUltrasonic;
 8001e96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <Initialize_ACC+0x48>)
 8001e98:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed8 <Initialize_ACC+0x58>)
 8001e9a:	60da      	str	r2, [r3, #12]
    
    acc.LeftSpeedSensor = &leftSpeedSensor;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <Initialize_ACC+0x48>)
 8001e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001edc <Initialize_ACC+0x5c>)
 8001ea0:	611a      	str	r2, [r3, #16]
    acc.RightSpeedSensor = &rightSpeedSensor;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <Initialize_ACC+0x48>)
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee0 <Initialize_ACC+0x60>)
 8001ea6:	615a      	str	r2, [r3, #20]
    
    acc.FrontLeftMotor = &frontLeftMotor;
 8001ea8:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <Initialize_ACC+0x48>)
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee4 <Initialize_ACC+0x64>)
 8001eac:	619a      	str	r2, [r3, #24]
    acc.FrontRightMotor = &frontRightMotor;
 8001eae:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <Initialize_ACC+0x48>)
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee8 <Initialize_ACC+0x68>)
 8001eb2:	61da      	str	r2, [r3, #28]
    acc.RearLeftMotor = &rearLeftMotor;
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <Initialize_ACC+0x48>)
 8001eb6:	4a0d      	ldr	r2, [pc, #52]	@ (8001eec <Initialize_ACC+0x6c>)
 8001eb8:	621a      	str	r2, [r3, #32]
    acc.RearRightMotor = &rearRightMotor;
 8001eba:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <Initialize_ACC+0x48>)
 8001ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef0 <Initialize_ACC+0x70>)
 8001ebe:	625a      	str	r2, [r3, #36]	@ 0x24
    
    // Configure ACC parameters (Example values - adjust as needed)
    // ACC_SetTargetSpeed(&acc, 500); // mm/s
    // ACC_SetSafeDistance(&acc, 500); // mm
    // ACC_SetPIDConstants(&acc, 1.0, 0.1, 0.01);
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	200001fc 	.word	0x200001fc
 8001ecc:	2000004c 	.word	0x2000004c
 8001ed0:	20000084 	.word	0x20000084
 8001ed4:	200000bc 	.word	0x200000bc
 8001ed8:	200000f4 	.word	0x200000f4
 8001edc:	2000012c 	.word	0x2000012c
 8001ee0:	20000158 	.word	0x20000158
 8001ee4:	2000018c 	.word	0x2000018c
 8001ee8:	200001a8 	.word	0x200001a8
 8001eec:	200001c4 	.word	0x200001c4
 8001ef0:	200001e0 	.word	0x200001e0

08001ef4 <HAL_MOTOR_Init>:
};

/**
 * @brief Initialize the motor control module
 */
void HAL_MOTOR_Init(void) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
    // Initialize PWM timer
    MCAL_TIM_Base_Init(&PWM_Timer_Config);
 8001ef8:	4806      	ldr	r0, [pc, #24]	@ (8001f14 <HAL_MOTOR_Init+0x20>)
 8001efa:	f001 f8f5 	bl	80030e8 <MCAL_TIM_Base_Init>
    
    // For TIM1 (Advanced timer), we need to enable the main output
    if (MOTOR_PWM_TIMER == TIM1) {
        // Enable Main Output
        TIM1->BDTR |= (1 << 15); // MOE: Main Output Enable
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_MOTOR_Init+0x24>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	4a05      	ldr	r2, [pc, #20]	@ (8001f18 <HAL_MOTOR_Init+0x24>)
 8001f04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f08:	6453      	str	r3, [r2, #68]	@ 0x44
    }
    
    // Start the timer
    MCAL_TIM_Base_Start(MOTOR_PWM_TIMER);
 8001f0a:	4803      	ldr	r0, [pc, #12]	@ (8001f18 <HAL_MOTOR_Init+0x24>)
 8001f0c:	f001 f926 	bl	800315c <MCAL_TIM_Base_Start>
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000000 	.word	0x20000000
 8001f18:	40012c00 	.word	0x40012c00

08001f1c <HAL_MOTOR_Config>:
 * @brief Configure a specific motor
 * @param motor: Pointer to motor structure
 * @param timer: Timer for PWM generation
 * @param channel: Timer channel for this motor
 */
void HAL_MOTOR_Config(Motor_t* motor, TIM_TypeDef* timer, uint16_t channel) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08e      	sub	sp, #56	@ 0x38
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	4613      	mov	r3, r2
 8001f28:	80fb      	strh	r3, [r7, #6]
    // Saving motor instance for global control
    for (uint8_t i = 0; i < MOTOR_COUNT; i++) {
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001f30:	e012      	b.n	8001f58 <HAL_MOTOR_Config+0x3c>
        if (Motors[i] == NULL) {
 8001f32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f36:	4a3c      	ldr	r2, [pc, #240]	@ (8002028 <HAL_MOTOR_Config+0x10c>)
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d106      	bne.n	8001f4e <HAL_MOTOR_Config+0x32>
            Motors[i] = motor;
 8001f40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f44:	4938      	ldr	r1, [pc, #224]	@ (8002028 <HAL_MOTOR_Config+0x10c>)
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            break;
 8001f4c:	e008      	b.n	8001f60 <HAL_MOTOR_Config+0x44>
    for (uint8_t i = 0; i < MOTOR_COUNT; i++) {
 8001f4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f52:	3301      	adds	r3, #1
 8001f54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001f58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d9e8      	bls.n	8001f32 <HAL_MOTOR_Config+0x16>
        }
    }
    
    // Configure direction pins as outputs
    GPIO_PinConfig_t dirPinConfig = {
        .GPIO_PinNumber = motor->DirectionPin_Forward,
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	889b      	ldrh	r3, [r3, #4]
    GPIO_PinConfig_t dirPinConfig = {
 8001f64:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001f66:	2304      	movs	r3, #4
 8001f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	633b      	str	r3, [r7, #48]	@ 0x30
        .GPIO_Mode = GPIO_Mode_Out_push_pull,
        .GPIO_Speed = GPIO_Speed_10MHz
    };
    MCAL_GPIO_Init(motor->DirectionPort, &dirPinConfig);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 ff6f 	bl	8002e5c <MCAL_GPIO_Init>
    
    dirPinConfig.GPIO_PinNumber = motor->DirectionPin_Backward;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	88db      	ldrh	r3, [r3, #6]
 8001f82:	853b      	strh	r3, [r7, #40]	@ 0x28
    MCAL_GPIO_Init(motor->DirectionPort, &dirPinConfig);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 ff64 	bl	8002e5c <MCAL_GPIO_Init>
    
    // Set initial direction to stop
    MOTOR_SET_STOP(motor);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	889b      	ldrh	r3, [r3, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f001 f814 	bl	8002fcc <MCAL_GPIO_WritePin>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	88db      	ldrh	r3, [r3, #6]
 8001fac:	2200      	movs	r2, #0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f001 f80c 	bl	8002fcc <MCAL_GPIO_WritePin>
    
    // Configure PWM pin as alternate function output
    GPIO_PinConfig_t pwmPinConfig = {
        .GPIO_PinNumber = motor->PWMPin,
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	899b      	ldrh	r3, [r3, #12]
    GPIO_PinConfig_t pwmPinConfig = {
 8001fb8:	83bb      	strh	r3, [r7, #28]
 8001fba:	2306      	movs	r3, #6
 8001fbc:	623b      	str	r3, [r7, #32]
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
        .GPIO_Mode = GPIO_Mode_Out_AF_push_pull,
        .GPIO_Speed = GPIO_Speed_50MHz
    };
    MCAL_GPIO_Init(motor->PWMPort, &pwmPinConfig);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f107 021c 	add.w	r2, r7, #28
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 ff45 	bl	8002e5c <MCAL_GPIO_Init>
    
    // Configure PWM output
    TIM_OC_Config_t pwmConfig = {
 8001fd2:	2360      	movs	r3, #96	@ 0x60
 8001fd4:	823b      	strh	r3, [r7, #16]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	827b      	strh	r3, [r7, #18]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	82bb      	strh	r3, [r7, #20]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	82fb      	strh	r3, [r7, #22]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	833b      	strh	r3, [r7, #24]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	837b      	strh	r3, [r7, #26]
        .OCIdleState = TIM_OCIDLESTATE_RESET,
        .OCNIdleState = TIM_OCNIDLESTATE_RESET
    };
    
    // Initialize PWM for this channel
    MCAL_TIM_PWM_Init(timer, channel, &pwmConfig);
 8001fea:	f107 0210 	add.w	r2, r7, #16
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	68b8      	ldr	r0, [r7, #8]
 8001ff4:	f001 f8da 	bl	80031ac <MCAL_TIM_PWM_Init>
    MCAL_TIM_PWM_Start(timer, channel);
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	68b8      	ldr	r0, [r7, #8]
 8001ffe:	f001 fa33 	bl	8003468 <MCAL_TIM_PWM_Start>
    
    // Save timer and channel in motor structure
    motor->PWMTimer = timer;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	611a      	str	r2, [r3, #16]
    motor->PWMChannel = channel;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	88fa      	ldrh	r2, [r7, #6]
 800200c:	829a      	strh	r2, [r3, #20]
    
    // Initialize motor state
    motor->Direction = MOTOR_DIR_STOP;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	759a      	strb	r2, [r3, #22]
    motor->Speed = 0;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	75da      	strb	r2, [r3, #23]
    motor->Enabled = 0;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	761a      	strb	r2, [r3, #24]
}
 8002020:	bf00      	nop
 8002022:	3738      	adds	r7, #56	@ 0x38
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000254 	.word	0x20000254

0800202c <HAL_MOTOR_SetDirection>:
/**
 * @brief Set motor direction
 * @param motor: Pointer to motor structure
 * @param direction: Direction (FORWARD, BACKWARD, STOP)
 */
void HAL_MOTOR_SetDirection(Motor_t* motor, Motor_Direction_t direction) {
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
    motor->Direction = direction;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	759a      	strb	r2, [r3, #22]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <HAL_MOTOR_SetSpeed>:
/**
 * @brief Set motor speed (0-100%)
 * @param motor: Pointer to motor structure
 * @param speed: Speed percentage (0-100)
 */
void HAL_MOTOR_SetSpeed(Motor_t* motor, uint8_t speed) {
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
    // Limit speed to valid range
    if (speed > MOTOR_MAX_SPEED) {
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	2b64      	cmp	r3, #100	@ 0x64
 8002058:	d901      	bls.n	800205e <HAL_MOTOR_SetSpeed+0x16>
        speed = MOTOR_MAX_SPEED;
 800205a:	2364      	movs	r3, #100	@ 0x64
 800205c:	70fb      	strb	r3, [r7, #3]
    }
    
    motor->Speed = speed;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	75da      	strb	r2, [r3, #23]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <HAL_MOTOR_Enable>:
/**
 * @brief Enable/disable motor
 * @param motor: Pointer to motor structure
 * @param enable: 1 to enable, 0 to disable
 */
void HAL_MOTOR_Enable(Motor_t* motor, uint8_t enable) {
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	460b      	mov	r3, r1
 8002078:	70fb      	strb	r3, [r7, #3]
    motor->Enabled = enable;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <HAL_MOTOR_Update>:

/**
 * @brief Update motor state (applies direction and speed)
 * @param motor: Pointer to motor structure
 */
void HAL_MOTOR_Update(Motor_t* motor) {
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
    // If motor is disabled, stop it
    if (!motor->Enabled) {
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7e1b      	ldrb	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d118      	bne.n	80020cc <HAL_MOTOR_Update+0x42>
        MOTOR_SET_STOP(motor);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	889b      	ldrh	r3, [r3, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	4619      	mov	r1, r3
 80020a6:	f000 ff91 	bl	8002fcc <MCAL_GPIO_WritePin>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	88db      	ldrh	r3, [r3, #6]
 80020b2:	2200      	movs	r2, #0
 80020b4:	4619      	mov	r1, r3
 80020b6:	f000 ff89 	bl	8002fcc <MCAL_GPIO_WritePin>
        MCAL_TIM_PWM_SetDutyCycle(motor->PWMTimer, motor->PWMChannel, 0);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6918      	ldr	r0, [r3, #16]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	8a9b      	ldrh	r3, [r3, #20]
 80020c2:	2200      	movs	r2, #0
 80020c4:	4619      	mov	r1, r3
 80020c6:	f001 f9eb 	bl	80034a0 <MCAL_TIM_PWM_SetDutyCycle>
        return;
 80020ca:	e04f      	b.n	800216c <HAL_MOTOR_Update+0xe2>
    }
    
    // Set direction
    switch (motor->Direction) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7d9b      	ldrb	r3, [r3, #22]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d002      	beq.n	80020da <HAL_MOTOR_Update+0x50>
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d011      	beq.n	80020fc <HAL_MOTOR_Update+0x72>
 80020d8:	e021      	b.n	800211e <HAL_MOTOR_Update+0x94>
        case MOTOR_DIR_FORWARD:
            MOTOR_SET_FORWARD(motor);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	889b      	ldrh	r3, [r3, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	4619      	mov	r1, r3
 80020e6:	f000 ff71 	bl	8002fcc <MCAL_GPIO_WritePin>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	88db      	ldrh	r3, [r3, #6]
 80020f2:	2200      	movs	r2, #0
 80020f4:	4619      	mov	r1, r3
 80020f6:	f000 ff69 	bl	8002fcc <MCAL_GPIO_WritePin>
            break;
 80020fa:	e021      	b.n	8002140 <HAL_MOTOR_Update+0xb6>
        
        case MOTOR_DIR_BACKWARD:
            MOTOR_SET_BACKWARD(motor);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	889b      	ldrh	r3, [r3, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	4619      	mov	r1, r3
 8002108:	f000 ff60 	bl	8002fcc <MCAL_GPIO_WritePin>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	88db      	ldrh	r3, [r3, #6]
 8002114:	2201      	movs	r2, #1
 8002116:	4619      	mov	r1, r3
 8002118:	f000 ff58 	bl	8002fcc <MCAL_GPIO_WritePin>
            break;
 800211c:	e010      	b.n	8002140 <HAL_MOTOR_Update+0xb6>
        
        case MOTOR_DIR_STOP:
        default:
            MOTOR_SET_STOP(motor);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	889b      	ldrh	r3, [r3, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	4619      	mov	r1, r3
 800212a:	f000 ff4f 	bl	8002fcc <MCAL_GPIO_WritePin>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	88db      	ldrh	r3, [r3, #6]
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	f000 ff47 	bl	8002fcc <MCAL_GPIO_WritePin>
            break;
 800213e:	bf00      	nop
    }
    
    // Apply speed (PWM duty cycle)
    if (motor->Direction == MOTOR_DIR_STOP) {
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7d9b      	ldrb	r3, [r3, #22]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d108      	bne.n	800215a <HAL_MOTOR_Update+0xd0>
        MCAL_TIM_PWM_SetDutyCycle(motor->PWMTimer, motor->PWMChannel, 0);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6918      	ldr	r0, [r3, #16]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	8a9b      	ldrh	r3, [r3, #20]
 8002150:	2200      	movs	r2, #0
 8002152:	4619      	mov	r1, r3
 8002154:	f001 f9a4 	bl	80034a0 <MCAL_TIM_PWM_SetDutyCycle>
 8002158:	e008      	b.n	800216c <HAL_MOTOR_Update+0xe2>
    } else {
        MCAL_TIM_PWM_SetDutyCycle(motor->PWMTimer, motor->PWMChannel, motor->Speed);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6918      	ldr	r0, [r3, #16]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	8a99      	ldrh	r1, [r3, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7ddb      	ldrb	r3, [r3, #23]
 8002166:	461a      	mov	r2, r3
 8002168:	f001 f99a 	bl	80034a0 <MCAL_TIM_PWM_SetDutyCycle>
    }
}
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_MOTOR_StopAll>:

/**
 * @brief Stop all motors
 */
void HAL_MOTOR_StopAll(void) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < MOTOR_COUNT; i++) {
 800217a:	2300      	movs	r3, #0
 800217c:	71fb      	strb	r3, [r7, #7]
 800217e:	e017      	b.n	80021b0 <HAL_MOTOR_StopAll+0x3c>
        if (Motors[i] != NULL) {
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	4a0f      	ldr	r2, [pc, #60]	@ (80021c0 <HAL_MOTOR_StopAll+0x4c>)
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00e      	beq.n	80021aa <HAL_MOTOR_StopAll+0x36>
            HAL_MOTOR_SetDirection(Motors[i], MOTOR_DIR_STOP);
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	4a0c      	ldr	r2, [pc, #48]	@ (80021c0 <HAL_MOTOR_StopAll+0x4c>)
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff48 	bl	800202c <HAL_MOTOR_SetDirection>
            HAL_MOTOR_Update(Motors[i]);
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	4a08      	ldr	r2, [pc, #32]	@ (80021c0 <HAL_MOTOR_StopAll+0x4c>)
 80021a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff70 	bl	800208a <HAL_MOTOR_Update>
    for (uint8_t i = 0; i < MOTOR_COUNT; i++) {
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	3301      	adds	r3, #1
 80021ae:	71fb      	strb	r3, [r7, #7]
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d9e4      	bls.n	8002180 <HAL_MOTOR_StopAll+0xc>
        }
    }
} 
 80021b6:	bf00      	nop
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000254 	.word	0x20000254
 80021c4:	00000000 	.word	0x00000000

080021c8 <Speed_Sensor_Pulse_Callback>:

/**
 * @brief EXTI callback function for speed sensor pulses
 * @param None: Uses global array to retrieve instance
 */
static void Speed_Sensor_Pulse_Callback(void) {
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SPEED_SENSOR_COUNT; i++) {
 80021ce:	2300      	movs	r3, #0
 80021d0:	71fb      	strb	r3, [r7, #7]
 80021d2:	e07e      	b.n	80022d2 <Speed_Sensor_Pulse_Callback+0x10a>
        if (SpeedSensorInstances[i] != NULL) {
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	4a46      	ldr	r2, [pc, #280]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d075      	beq.n	80022cc <Speed_Sensor_Pulse_Callback+0x104>
            // Update pulse information
            SpeedSensorInstances[i]->LastPulseTime = SpeedSensorInstances[i]->CurrentPulseTime;
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	4a43      	ldr	r2, [pc, #268]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 80021e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	4941      	ldr	r1, [pc, #260]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 80021ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021f0:	69d2      	ldr	r2, [r2, #28]
 80021f2:	619a      	str	r2, [r3, #24]
            SpeedSensorInstances[i]->CurrentPulseTime = MCAL_TIM_Base_GetCounter(SPEED_SENSOR_TIMER);
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4a3e      	ldr	r2, [pc, #248]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 80021f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80021fc:	483d      	ldr	r0, [pc, #244]	@ (80022f4 <Speed_Sensor_Pulse_Callback+0x12c>)
 80021fe:	f000 ffc9 	bl	8003194 <MCAL_TIM_Base_GetCounter>
 8002202:	4603      	mov	r3, r0
 8002204:	61e3      	str	r3, [r4, #28]
            
            // Calculate pulse period (accounting for timer overflow)
            if (SpeedSensorInstances[i]->CurrentPulseTime >= SpeedSensorInstances[i]->LastPulseTime) {
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	4a39      	ldr	r2, [pc, #228]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 800220a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	4937      	ldr	r1, [pc, #220]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 8002214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	429a      	cmp	r2, r3
 800221c:	d310      	bcc.n	8002240 <Speed_Sensor_Pulse_Callback+0x78>
                SpeedSensorInstances[i]->PulsePeriod = SpeedSensorInstances[i]->CurrentPulseTime - SpeedSensorInstances[i]->LastPulseTime;
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	4a33      	ldr	r2, [pc, #204]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	69d9      	ldr	r1, [r3, #28]
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	4a31      	ldr	r2, [pc, #196]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 800222c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	482e      	ldr	r0, [pc, #184]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 8002236:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800223a:	1a8a      	subs	r2, r1, r2
 800223c:	621a      	str	r2, [r3, #32]
 800223e:	e011      	b.n	8002264 <Speed_Sensor_Pulse_Callback+0x9c>
            } else {
                // Timer overflow occurred
                SpeedSensorInstances[i]->PulsePeriod = (SPEED_SENSOR_PERIOD - SpeedSensorInstances[i]->LastPulseTime) + 
                                                       SpeedSensorInstances[i]->CurrentPulseTime + 1;
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	4a2b      	ldr	r2, [pc, #172]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 8002244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002248:	69da      	ldr	r2, [r3, #28]
                SpeedSensorInstances[i]->PulsePeriod = (SPEED_SENSOR_PERIOD - SpeedSensorInstances[i]->LastPulseTime) + 
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	4928      	ldr	r1, [pc, #160]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 800224e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	1ad2      	subs	r2, r2, r3
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	4925      	ldr	r1, [pc, #148]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 800225a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                                       SpeedSensorInstances[i]->CurrentPulseTime + 1;
 800225e:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
                SpeedSensorInstances[i]->PulsePeriod = (SPEED_SENSOR_PERIOD - SpeedSensorInstances[i]->LastPulseTime) + 
 8002262:	621a      	str	r2, [r3, #32]
            }
            
            // Increment pulse count
            SpeedSensorInstances[i]->PulseCount++;
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	4a22      	ldr	r2, [pc, #136]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 8002268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	3201      	adds	r2, #1
 8002270:	615a      	str	r2, [r3, #20]
            
            // Calculate speed (cm/s)
            if (SpeedSensorInstances[i]->PulsePeriod > 0) {
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	4a1e      	ldr	r2, [pc, #120]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01e      	beq.n	80022be <Speed_Sensor_Pulse_Callback+0xf6>
                SpeedSensorInstances[i]->Speed = SPEED_CALCULATION_FACTOR / (float)SpeedSensorInstances[i]->PulsePeriod;
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	4a1b      	ldr	r2, [pc, #108]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 8002284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fc64 	bl	8000b58 <__aeabi_ui2f>
 8002290:	4603      	mov	r3, r0
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f8d0 	bl	8000438 <__aeabi_f2d>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	a112      	add	r1, pc, #72	@ (adr r1, 80022e8 <Speed_Sensor_Pulse_Callback+0x120>)
 800229e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022a2:	f7fe fa4b 	bl	800073c <__aeabi_ddiv>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	4a0f      	ldr	r2, [pc, #60]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 80022b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80022b6:	f7fe fb49 	bl	800094c <__aeabi_d2f>
 80022ba:	4603      	mov	r3, r0
 80022bc:	6263      	str	r3, [r4, #36]	@ 0x24
            }
            
            // Set ready flag
            SpeedSensorInstances[i]->IsReady = 1;
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	4a0b      	ldr	r2, [pc, #44]	@ (80022f0 <Speed_Sensor_Pulse_Callback+0x128>)
 80022c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    for (uint8_t i = 0; i < SPEED_SENSOR_COUNT; i++) {
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	3301      	adds	r3, #1
 80022d0:	71fb      	strb	r3, [r7, #7]
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	f67f af7d 	bls.w	80021d4 <Speed_Sensor_Pulse_Callback+0xc>
        }
    }
}
 80022da:	bf00      	nop
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd90      	pop	{r4, r7, pc}
 80022e4:	f3af 8000 	nop.w
 80022e8:	ad000000 	.word	0xad000000
 80022ec:	40aeadf9 	.word	0x40aeadf9
 80022f0:	20000264 	.word	0x20000264
 80022f4:	40000400 	.word	0x40000400

080022f8 <HAL_SPEED_SENSOR_Init>:

/**
 * @brief Initialize speed sensor
 * @param sensor: Pointer to speed sensor structure
 */
void HAL_SPEED_SENSOR_Init(Speed_Sensor_t* sensor) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08c      	sub	sp, #48	@ 0x30
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
    // Save instance in static array for callback handling
    for (uint8_t i = 0; i < SPEED_SENSOR_COUNT; i++) {
 8002300:	2300      	movs	r3, #0
 8002302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002306:	e012      	b.n	800232e <HAL_SPEED_SENSOR_Init+0x36>
        if (SpeedSensorInstances[i] == NULL) {
 8002308:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800230c:	4a2d      	ldr	r2, [pc, #180]	@ (80023c4 <HAL_SPEED_SENSOR_Init+0xcc>)
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_SPEED_SENSOR_Init+0x2c>
            SpeedSensorInstances[i] = sensor;
 8002316:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800231a:	492a      	ldr	r1, [pc, #168]	@ (80023c4 <HAL_SPEED_SENSOR_Init+0xcc>)
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            break;
 8002322:	e008      	b.n	8002336 <HAL_SPEED_SENSOR_Init+0x3e>
    for (uint8_t i = 0; i < SPEED_SENSOR_COUNT; i++) {
 8002324:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002328:	3301      	adds	r3, #1
 800232a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800232e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002332:	2b01      	cmp	r3, #1
 8002334:	d9e8      	bls.n	8002308 <HAL_SPEED_SENSOR_Init+0x10>
        }
    }
    
    // Initialize common timer (only once)
    static uint8_t timerInitialized = 0;
    if (!timerInitialized) {
 8002336:	4b24      	ldr	r3, [pc, #144]	@ (80023c8 <HAL_SPEED_SENSOR_Init+0xd0>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d108      	bne.n	8002350 <HAL_SPEED_SENSOR_Init+0x58>
        MCAL_TIM_Base_Init(&Speed_Timer_Config);
 800233e:	4823      	ldr	r0, [pc, #140]	@ (80023cc <HAL_SPEED_SENSOR_Init+0xd4>)
 8002340:	f000 fed2 	bl	80030e8 <MCAL_TIM_Base_Init>
        MCAL_TIM_Base_Start(SPEED_SENSOR_TIMER);
 8002344:	4822      	ldr	r0, [pc, #136]	@ (80023d0 <HAL_SPEED_SENSOR_Init+0xd8>)
 8002346:	f000 ff09 	bl	800315c <MCAL_TIM_Base_Start>
        timerInitialized = 1;
 800234a:	4b1f      	ldr	r3, [pc, #124]	@ (80023c8 <HAL_SPEED_SENSOR_Init+0xd0>)
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
    }
    
    // Configure the sensor pin as input
    GPIO_PinConfig_t sensorPinConfig = {
        .GPIO_PinNumber = sensor->Pin,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	889b      	ldrh	r3, [r3, #4]
    GPIO_PinConfig_t sensorPinConfig = {
 8002354:	843b      	strh	r3, [r7, #32]
 8002356:	2302      	movs	r3, #2
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
 800235a:	2300      	movs	r3, #0
 800235c:	62bb      	str	r3, [r7, #40]	@ 0x28
        // .GPIO_Mode = GPIO_Mode_Inp_floating,
        .GPIO_Mode = GPIO_Mode_Inp_pull_up,   // Using internal pull-up
        // .GPIO_Mode = GPIO_Mode_Inp_pull_down
        .GPIO_Speed = GPIO_Speed_Reset_State
    };
    MCAL_GPIO_Init(sensor->Port, &sensorPinConfig);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f107 0220 	add.w	r2, r7, #32
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fd77 	bl	8002e5c <MCAL_GPIO_Init>

    // Configure EXTI for speed sensor pin (rising edge)
    EXTI_PINCONFIG_t extiConfig = {
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	f107 030c 	add.w	r3, r7, #12
 8002374:	3208      	adds	r2, #8
 8002376:	ca07      	ldmia	r2, {r0, r1, r2}
 8002378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800237c:	2300      	movs	r3, #0
 800237e:	763b      	strb	r3, [r7, #24]
 8002380:	2301      	movs	r3, #1
 8002382:	767b      	strb	r3, [r7, #25]
 8002384:	4b13      	ldr	r3, [pc, #76]	@ (80023d4 <HAL_SPEED_SENSOR_Init+0xdc>)
 8002386:	61fb      	str	r3, [r7, #28]
        .EXTI_Map_Pin = sensor->EXTI_Mapping,
        .EXTI_Trigger_State = EXTI_Rising_Trigger,
        .IRQ_EN = EXTI_IRQ_ENABLE,
        .PF_IRQ_CALLBACK = Speed_Sensor_Pulse_Callback
    };
    MCAL_EXTI_Init(&extiConfig);
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4618      	mov	r0, r3
 800238e:	f000 fa83 	bl	8002898 <MCAL_EXTI_Init>
    
    // Initialize speed sensor state
    sensor->PulseCount = 0;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	615a      	str	r2, [r3, #20]
    sensor->LastPulseTime = 0;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
    sensor->CurrentPulseTime = 0;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	61da      	str	r2, [r3, #28]
    sensor->PulsePeriod = 0;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	621a      	str	r2, [r3, #32]
    sensor->Speed = 0.0f;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24
    sensor->IsReady = 0;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 80023ba:	bf00      	nop
 80023bc:	3730      	adds	r7, #48	@ 0x30
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000264 	.word	0x20000264
 80023c8:	2000026c 	.word	0x2000026c
 80023cc:	20000010 	.word	0x20000010
 80023d0:	40000400 	.word	0x40000400
 80023d4:	080021c9 	.word	0x080021c9

080023d8 <HAL_SPEED_SENSOR_GetSpeed>:
/**
 * @brief Get the current speed
 * @param sensor: Pointer to speed sensor structure
 * @return Speed in cm/s
 */
float HAL_SPEED_SENSOR_GetSpeed(Speed_Sensor_t* sensor) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
    // Check if speed should be zeroed due to timeout
    if ((MCAL_TIM_Base_GetCounter(SPEED_SENSOR_TIMER) - sensor->CurrentPulseTime) > SPEED_SENSOR_TIMEOUT) {
 80023e0:	480a      	ldr	r0, [pc, #40]	@ (800240c <HAL_SPEED_SENSOR_GetSpeed+0x34>)
 80023e2:	f000 fed7 	bl	8003194 <MCAL_TIM_Base_GetCounter>
 80023e6:	4602      	mov	r2, r0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d903      	bls.n	80023fe <HAL_SPEED_SENSOR_GetSpeed+0x26>
        sensor->Speed = 0.0f;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    
    return sensor->Speed;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40000400 	.word	0x40000400

08002410 <HAL_SPEED_SENSOR_Update>:

/**
 * @brief Update speed calculation (call periodically)
 * @param sensor: Pointer to speed sensor structure
 */
void HAL_SPEED_SENSOR_Update(Speed_Sensor_t* sensor) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
    // Check if there has been no pulse for the timeout duration
    if ((MCAL_TIM_Base_GetCounter(SPEED_SENSOR_TIMER) - sensor->CurrentPulseTime) > SPEED_SENSOR_TIMEOUT) {
 8002418:	480b      	ldr	r0, [pc, #44]	@ (8002448 <HAL_SPEED_SENSOR_Update+0x38>)
 800241a:	f000 febb 	bl	8003194 <MCAL_TIM_Base_GetCounter>
 800241e:	4602      	mov	r2, r0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800242a:	4293      	cmp	r3, r2
 800242c:	d907      	bls.n	800243e <HAL_SPEED_SENSOR_Update+0x2e>
        // If timeout occurred, set speed to zero
        sensor->Speed = 0.0f;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24
        sensor->IsReady = 1; // Mark as updated (with zero speed)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }
} 
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40000400 	.word	0x40000400

0800244c <HAL_ULTRASONIC_Init>:

/**
 * @brief Initialize ultrasonic sensor
 * @param ultrasonic: Pointer to ultrasonic sensor structure
 */
void HAL_ULTRASONIC_Init(Ultrasonic_t* ultrasonic) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	@ 0x28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
    // Initialize common timer (only once)
    static uint8_t timerInitialized = 0;
    if (!timerInitialized) {
 8002454:	4b23      	ldr	r3, [pc, #140]	@ (80024e4 <HAL_ULTRASONIC_Init+0x98>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_ULTRASONIC_Init+0x24>
        MCAL_TIM_Base_Init(&US_Timer_Config);
 800245c:	4822      	ldr	r0, [pc, #136]	@ (80024e8 <HAL_ULTRASONIC_Init+0x9c>)
 800245e:	f000 fe43 	bl	80030e8 <MCAL_TIM_Base_Init>
        MCAL_TIM_Base_Start(ULTRASONIC_TIMER);
 8002462:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002466:	f000 fe79 	bl	800315c <MCAL_TIM_Base_Start>
        timerInitialized = 1;
 800246a:	4b1e      	ldr	r3, [pc, #120]	@ (80024e4 <HAL_ULTRASONIC_Init+0x98>)
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
    }
    
    // Configure Trigger pin as output
    GPIO_PinConfig_t trigConfig = {
        .GPIO_PinNumber = ultrasonic->TrigPin,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	889b      	ldrh	r3, [r3, #4]
    GPIO_PinConfig_t trigConfig = {
 8002474:	83bb      	strh	r3, [r7, #28]
 8002476:	2304      	movs	r3, #4
 8002478:	623b      	str	r3, [r7, #32]
 800247a:	2301      	movs	r3, #1
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
        .GPIO_Mode = GPIO_Mode_Out_push_pull,
        .GPIO_Speed = GPIO_Speed_10MHz
    };
    MCAL_GPIO_Init(ultrasonic->TrigPort, &trigConfig);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f107 021c 	add.w	r2, r7, #28
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fce7 	bl	8002e5c <MCAL_GPIO_Init>
    MCAL_GPIO_WritePin(ultrasonic->TrigPort, ultrasonic->TrigPin, GPIO_PIN_RESET);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	889b      	ldrh	r3, [r3, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	4619      	mov	r1, r3
 800249a:	f000 fd97 	bl	8002fcc <MCAL_GPIO_WritePin>
    
    // Configure EXTI for Echo pin (both rising and falling edges)
    // The single callback provided (ultrasonic->Callback) will handle edge detection internally.
    EXTI_PINCONFIG_t extiConfig = {
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	f107 0308 	add.w	r3, r7, #8
 80024a4:	3210      	adds	r2, #16
 80024a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80024a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80024ac:	2302      	movs	r3, #2
 80024ae:	753b      	strb	r3, [r7, #20]
 80024b0:	2301      	movs	r3, #1
 80024b2:	757b      	strb	r3, [r7, #21]
        .EXTI_Map_Pin = ultrasonic->EXTI_Mapping,       // From sensor struct
        .EXTI_Trigger_State = EXTI_Rising_Falling_Trigger, // Trigger on both edges
        .IRQ_EN = EXTI_IRQ_ENABLE,                       // Enable the interrupt
        .PF_IRQ_CALLBACK = ultrasonic->Callback          // Assign the specific callback (e.g., Front_Ultrasonic_Callback)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
    EXTI_PINCONFIG_t extiConfig = {
 80024b8:	61bb      	str	r3, [r7, #24]
    };
    MCAL_EXTI_Init(&extiConfig); // Initialize EXTI ONLY ONCE per pin
 80024ba:	f107 0308 	add.w	r3, r7, #8
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f9ea 	bl	8002898 <MCAL_EXTI_Init>
    
    // Initialize ultrasonic state
    ultrasonic->State = ULTRASONIC_STATE_IDLE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2020 	strb.w	r2, [r3, #32]
    ultrasonic->Distance = 0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	631a      	str	r2, [r3, #48]	@ 0x30
    ultrasonic->IsReady = 0;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	@ 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2000026d 	.word	0x2000026d
 80024e8:	20000020 	.word	0x20000020

080024ec <HAL_ULTRASONIC_StartMeasurement>:

/**
 * @brief Start a new ultrasonic measurement
 * @param ultrasonic: Pointer to ultrasonic sensor structure
 */
void HAL_ULTRASONIC_StartMeasurement(Ultrasonic_t* ultrasonic) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
    // Reset state
    ultrasonic->State = ULTRASONIC_STATE_TRIGGERING;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2020 	strb.w	r2, [r3, #32]
    ultrasonic->IsReady = 0;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    // Flash LED three times rapidly to indicate trigger start
    GPIO_TypedDef* debugPort = LED_STATUS_PORT;
 8002504:	4b2b      	ldr	r3, [pc, #172]	@ (80025b4 <HAL_ULTRASONIC_StartMeasurement+0xc8>)
 8002506:	61bb      	str	r3, [r7, #24]
    uint16_t debugPin = LED_STATUS_PIN;
 8002508:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800250c:	82fb      	strh	r3, [r7, #22]
    
    for (int i = 0; i < 3; i++) {
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	e022      	b.n	800255a <HAL_ULTRASONIC_StartMeasurement+0x6e>
        MCAL_GPIO_WritePin(debugPort, debugPin, GPIO_PIN_RESET); // LED on
 8002514:	8afb      	ldrh	r3, [r7, #22]
 8002516:	2200      	movs	r2, #0
 8002518:	4619      	mov	r1, r3
 800251a:	69b8      	ldr	r0, [r7, #24]
 800251c:	f000 fd56 	bl	8002fcc <MCAL_GPIO_WritePin>
        for (volatile uint32_t j = 0; j < 2000; j++); // Small delay
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	e002      	b.n	800252c <HAL_ULTRASONIC_StartMeasurement+0x40>
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	3301      	adds	r3, #1
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002532:	d3f8      	bcc.n	8002526 <HAL_ULTRASONIC_StartMeasurement+0x3a>
        MCAL_GPIO_WritePin(debugPort, debugPin, GPIO_PIN_SET);  // LED off
 8002534:	8afb      	ldrh	r3, [r7, #22]
 8002536:	2201      	movs	r2, #1
 8002538:	4619      	mov	r1, r3
 800253a:	69b8      	ldr	r0, [r7, #24]
 800253c:	f000 fd46 	bl	8002fcc <MCAL_GPIO_WritePin>
        for (volatile uint32_t j = 0; j < 2000; j++); // Small delay
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e002      	b.n	800254c <HAL_ULTRASONIC_StartMeasurement+0x60>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3301      	adds	r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002552:	d3f8      	bcc.n	8002546 <HAL_ULTRASONIC_StartMeasurement+0x5a>
    for (int i = 0; i < 3; i++) {
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	3301      	adds	r3, #1
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2b02      	cmp	r3, #2
 800255e:	ddd9      	ble.n	8002514 <HAL_ULTRASONIC_StartMeasurement+0x28>
    }
    
    // Generate 10µs trigger pulse
    MCAL_GPIO_WritePin(ultrasonic->TrigPort, ultrasonic->TrigPin, GPIO_PIN_SET);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	889b      	ldrh	r3, [r3, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	4619      	mov	r1, r3
 800256c:	f000 fd2e 	bl	8002fcc <MCAL_GPIO_WritePin>
    
    // Reset timer counter for accurate timing
    MCAL_TIM_Base_SetCounter(ULTRASONIC_TIMER, 0);
 8002570:	2100      	movs	r1, #0
 8002572:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002576:	f000 fe00 	bl	800317a <MCAL_TIM_Base_SetCounter>
    
    // Wait for 10µs
    while (MCAL_TIM_Base_GetCounter(ULTRASONIC_TIMER) < ULTRASONIC_TRIGGER_TIME);
 800257a:	bf00      	nop
 800257c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002580:	f000 fe08 	bl	8003194 <MCAL_TIM_Base_GetCounter>
 8002584:	4603      	mov	r3, r0
 8002586:	2b09      	cmp	r3, #9
 8002588:	d9f8      	bls.n	800257c <HAL_ULTRASONIC_StartMeasurement+0x90>
    
    // End trigger pulse
    MCAL_GPIO_WritePin(ultrasonic->TrigPort, ultrasonic->TrigPin, GPIO_PIN_RESET);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	889b      	ldrh	r3, [r3, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	4619      	mov	r1, r3
 8002596:	f000 fd19 	bl	8002fcc <MCAL_GPIO_WritePin>
    
    // Update state to wait for echo
    ultrasonic->State = ULTRASONIC_STATE_WAITING_ECHO;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2202      	movs	r2, #2
 800259e:	f883 2020 	strb.w	r2, [r3, #32]
    
    // Start timeout timer
    MCAL_TIM_Base_SetCounter(ULTRASONIC_TIMER, 0);
 80025a2:	2100      	movs	r1, #0
 80025a4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80025a8:	f000 fde7 	bl	800317a <MCAL_TIM_Base_SetCounter>
}
 80025ac:	bf00      	nop
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40011000 	.word	0x40011000

080025b8 <HAL_ULTRASONIC_GetDistance>:
/**
 * @brief Get the last measured distance
 * @param ultrasonic: Pointer to ultrasonic sensor structure
 * @return Distance in mm, 0 if no valid measurement
 */
uint32_t HAL_ULTRASONIC_GetDistance(Ultrasonic_t* ultrasonic) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
    // Check for timeout if still waiting for echo
    if (ultrasonic->State == ULTRASONIC_STATE_WAITING_ECHO) {
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d112      	bne.n	80025f0 <HAL_ULTRASONIC_GetDistance+0x38>
        if (MCAL_TIM_Base_GetCounter(ULTRASONIC_TIMER) > ULTRASONIC_TIMEOUT) {
 80025ca:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80025ce:	f000 fde1 	bl	8003194 <MCAL_TIM_Base_GetCounter>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f247 5230 	movw	r2, #30000	@ 0x7530
 80025d8:	4293      	cmp	r3, r2
 80025da:	d909      	bls.n	80025f0 <HAL_ULTRASONIC_GetDistance+0x38>
            ultrasonic->State = ULTRASONIC_STATE_TIMEOUT;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2204      	movs	r2, #4
 80025e0:	f883 2020 	strb.w	r2, [r3, #32]
            ultrasonic->IsReady = 1;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            return 0; // Timeout, no valid distance
 80025ec:	2300      	movs	r3, #0
 80025ee:	e016      	b.n	800261e <HAL_ULTRASONIC_GetDistance+0x66>
        }
    }
    
    // Return last measured distance
    if (ultrasonic->State == ULTRASONIC_STATE_ECHO_RECEIVED) {
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d110      	bne.n	800261c <HAL_ULTRASONIC_GetDistance+0x64>
        // Check if distance is within valid range
        if (ultrasonic->Distance > ULTRASONIC_MAX_DISTANCE) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002602:	d902      	bls.n	800260a <HAL_ULTRASONIC_GetDistance+0x52>
            return ULTRASONIC_MAX_DISTANCE; // Cap at maximum distance
 8002604:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002608:	e009      	b.n	800261e <HAL_ULTRASONIC_GetDistance+0x66>
        } else if (ultrasonic->Distance < ULTRASONIC_MIN_DISTANCE) {
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	2b13      	cmp	r3, #19
 8002610:	d801      	bhi.n	8002616 <HAL_ULTRASONIC_GetDistance+0x5e>
            return ULTRASONIC_MIN_DISTANCE; // Cap at minimum distance
 8002612:	2314      	movs	r3, #20
 8002614:	e003      	b.n	800261e <HAL_ULTRASONIC_GetDistance+0x66>
        } else {
            return ultrasonic->Distance;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	e000      	b.n	800261e <HAL_ULTRASONIC_GetDistance+0x66>
        }
    }
    
    return 0; // No valid measurement
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <NVIC__EXTI_IRQ_ENABLE>:
 * @retval -none
 * Note-.....
 */

void NVIC__EXTI_IRQ_ENABLE(EXTI_PINCONFIG_t* EXTI_Config)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
	EXTI->IMR |= (1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 8002630:	4b48      	ldr	r3, [pc, #288]	@ (8002754 <NVIC__EXTI_IRQ_ENABLE+0x12c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	8812      	ldrh	r2, [r2, #0]
 8002638:	4611      	mov	r1, r2
 800263a:	2201      	movs	r2, #1
 800263c:	408a      	lsls	r2, r1
 800263e:	4611      	mov	r1, r2
 8002640:	4a44      	ldr	r2, [pc, #272]	@ (8002754 <NVIC__EXTI_IRQ_ENABLE+0x12c>)
 8002642:	430b      	orrs	r3, r1
 8002644:	6013      	str	r3, [r2, #0]
	switch(EXTI_Config->EXTI_Map_Pin.IVT_EXTI_IRQn)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	7a9b      	ldrb	r3, [r3, #10]
 800264a:	3b06      	subs	r3, #6
 800264c:	2b22      	cmp	r3, #34	@ 0x22
 800264e:	d87a      	bhi.n	8002746 <NVIC__EXTI_IRQ_ENABLE+0x11e>
 8002650:	a201      	add	r2, pc, #4	@ (adr r2, 8002658 <NVIC__EXTI_IRQ_ENABLE+0x30>)
 8002652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002656:	bf00      	nop
 8002658:	080026e5 	.word	0x080026e5
 800265c:	080026f3 	.word	0x080026f3
 8002660:	08002701 	.word	0x08002701
 8002664:	0800270f 	.word	0x0800270f
 8002668:	0800271d 	.word	0x0800271d
 800266c:	08002747 	.word	0x08002747
 8002670:	08002747 	.word	0x08002747
 8002674:	08002747 	.word	0x08002747
 8002678:	08002747 	.word	0x08002747
 800267c:	08002747 	.word	0x08002747
 8002680:	08002747 	.word	0x08002747
 8002684:	08002747 	.word	0x08002747
 8002688:	08002747 	.word	0x08002747
 800268c:	08002747 	.word	0x08002747
 8002690:	08002747 	.word	0x08002747
 8002694:	08002747 	.word	0x08002747
 8002698:	08002747 	.word	0x08002747
 800269c:	0800272b 	.word	0x0800272b
 80026a0:	08002747 	.word	0x08002747
 80026a4:	08002747 	.word	0x08002747
 80026a8:	08002747 	.word	0x08002747
 80026ac:	08002747 	.word	0x08002747
 80026b0:	08002747 	.word	0x08002747
 80026b4:	08002747 	.word	0x08002747
 80026b8:	08002747 	.word	0x08002747
 80026bc:	08002747 	.word	0x08002747
 80026c0:	08002747 	.word	0x08002747
 80026c4:	08002747 	.word	0x08002747
 80026c8:	08002747 	.word	0x08002747
 80026cc:	08002747 	.word	0x08002747
 80026d0:	08002747 	.word	0x08002747
 80026d4:	08002747 	.word	0x08002747
 80026d8:	08002747 	.word	0x08002747
 80026dc:	08002747 	.word	0x08002747
 80026e0:	08002739 	.word	0x08002739
	{

	case (EXTI0_IRQ):
						NVIC_IRQ6_EXTI0_ENABLE;
 80026e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002758 <NVIC__EXTI_IRQ_ENABLE+0x130>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002758 <NVIC__EXTI_IRQ_ENABLE+0x130>)
 80026ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026ee:	6013      	str	r3, [r2, #0]
						break;
 80026f0:	e02a      	b.n	8002748 <NVIC__EXTI_IRQ_ENABLE+0x120>
	case (EXTI1_IRQ):
						NVIC_IRQ7_EXTI1_ENABLE;
 80026f2:	4b19      	ldr	r3, [pc, #100]	@ (8002758 <NVIC__EXTI_IRQ_ENABLE+0x130>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a18      	ldr	r2, [pc, #96]	@ (8002758 <NVIC__EXTI_IRQ_ENABLE+0x130>)
 80026f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026fc:	6013      	str	r3, [r2, #0]
						break;
 80026fe:	e023      	b.n	8002748 <NVIC__EXTI_IRQ_ENABLE+0x120>
	case (EXTI2_IRQ):
						NVIC_IRQ8_EXTI2_ENABLE;
 8002700:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <NVIC__EXTI_IRQ_ENABLE+0x130>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a14      	ldr	r2, [pc, #80]	@ (8002758 <NVIC__EXTI_IRQ_ENABLE+0x130>)
 8002706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800270a:	6013      	str	r3, [r2, #0]
						break;
 800270c:	e01c      	b.n	8002748 <NVIC__EXTI_IRQ_ENABLE+0x120>
	case (EXTI3_IRQ):
						NVIC_IRQ9_EXTI3_ENABLE;
 800270e:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <NVIC__EXTI_IRQ_ENABLE+0x130>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a11      	ldr	r2, [pc, #68]	@ (8002758 <NVIC__EXTI_IRQ_ENABLE+0x130>)
 8002714:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002718:	6013      	str	r3, [r2, #0]
						break;
 800271a:	e015      	b.n	8002748 <NVIC__EXTI_IRQ_ENABLE+0x120>

	case (EXTI4_IRQ):
						NVIC_IRQ10_EXTI4_ENABLE;
 800271c:	4b0e      	ldr	r3, [pc, #56]	@ (8002758 <NVIC__EXTI_IRQ_ENABLE+0x130>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0d      	ldr	r2, [pc, #52]	@ (8002758 <NVIC__EXTI_IRQ_ENABLE+0x130>)
 8002722:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002726:	6013      	str	r3, [r2, #0]
						break;
 8002728:	e00e      	b.n	8002748 <NVIC__EXTI_IRQ_ENABLE+0x120>

	case 23: // EXTI5_IRQ to EXTI9_IRQ share IRQ 23
						NVIC_IRQ23_EXTI5_9_ENABLE;
 800272a:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <NVIC__EXTI_IRQ_ENABLE+0x130>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a0a      	ldr	r2, [pc, #40]	@ (8002758 <NVIC__EXTI_IRQ_ENABLE+0x130>)
 8002730:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002734:	6013      	str	r3, [r2, #0]
						break;
 8002736:	e007      	b.n	8002748 <NVIC__EXTI_IRQ_ENABLE+0x120>

	case 40: // EXTI10_IRQ to EXTI15_IRQ share IRQ 40
						NVIC_IRQ40_EXTI10_15_ENABLE;
 8002738:	4b08      	ldr	r3, [pc, #32]	@ (800275c <NVIC__EXTI_IRQ_ENABLE+0x134>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a07      	ldr	r2, [pc, #28]	@ (800275c <NVIC__EXTI_IRQ_ENABLE+0x134>)
 800273e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002742:	6013      	str	r3, [r2, #0]
						break;
 8002744:	e000      	b.n	8002748 <NVIC__EXTI_IRQ_ENABLE+0x120>
	default:
						break;
 8002746:	bf00      	nop


	}


}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40010400 	.word	0x40010400
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000e104 	.word	0xe000e104

08002760 <NVIC__EXTI_IRQ_DISABLE>:
 * Note-.....
 */


void NVIC__EXTI_IRQ_DISABLE(EXTI_PINCONFIG_t* EXTI_Config)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

	EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 8002768:	4b48      	ldr	r3, [pc, #288]	@ (800288c <NVIC__EXTI_IRQ_DISABLE+0x12c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	8812      	ldrh	r2, [r2, #0]
 8002770:	4611      	mov	r1, r2
 8002772:	2201      	movs	r2, #1
 8002774:	408a      	lsls	r2, r1
 8002776:	43d2      	mvns	r2, r2
 8002778:	4611      	mov	r1, r2
 800277a:	4a44      	ldr	r2, [pc, #272]	@ (800288c <NVIC__EXTI_IRQ_DISABLE+0x12c>)
 800277c:	400b      	ands	r3, r1
 800277e:	6013      	str	r3, [r2, #0]
	switch(EXTI_Config->EXTI_Map_Pin.IVT_EXTI_IRQn)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7a9b      	ldrb	r3, [r3, #10]
 8002784:	3b06      	subs	r3, #6
 8002786:	2b22      	cmp	r3, #34	@ 0x22
 8002788:	d879      	bhi.n	800287e <NVIC__EXTI_IRQ_DISABLE+0x11e>
 800278a:	a201      	add	r2, pc, #4	@ (adr r2, 8002790 <NVIC__EXTI_IRQ_DISABLE+0x30>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	0800281d 	.word	0x0800281d
 8002794:	0800282b 	.word	0x0800282b
 8002798:	08002839 	.word	0x08002839
 800279c:	08002847 	.word	0x08002847
 80027a0:	08002855 	.word	0x08002855
 80027a4:	0800287f 	.word	0x0800287f
 80027a8:	0800287f 	.word	0x0800287f
 80027ac:	0800287f 	.word	0x0800287f
 80027b0:	0800287f 	.word	0x0800287f
 80027b4:	0800287f 	.word	0x0800287f
 80027b8:	0800287f 	.word	0x0800287f
 80027bc:	0800287f 	.word	0x0800287f
 80027c0:	0800287f 	.word	0x0800287f
 80027c4:	0800287f 	.word	0x0800287f
 80027c8:	0800287f 	.word	0x0800287f
 80027cc:	0800287f 	.word	0x0800287f
 80027d0:	0800287f 	.word	0x0800287f
 80027d4:	08002863 	.word	0x08002863
 80027d8:	0800287f 	.word	0x0800287f
 80027dc:	0800287f 	.word	0x0800287f
 80027e0:	0800287f 	.word	0x0800287f
 80027e4:	0800287f 	.word	0x0800287f
 80027e8:	0800287f 	.word	0x0800287f
 80027ec:	0800287f 	.word	0x0800287f
 80027f0:	0800287f 	.word	0x0800287f
 80027f4:	0800287f 	.word	0x0800287f
 80027f8:	0800287f 	.word	0x0800287f
 80027fc:	0800287f 	.word	0x0800287f
 8002800:	0800287f 	.word	0x0800287f
 8002804:	0800287f 	.word	0x0800287f
 8002808:	0800287f 	.word	0x0800287f
 800280c:	0800287f 	.word	0x0800287f
 8002810:	0800287f 	.word	0x0800287f
 8002814:	0800287f 	.word	0x0800287f
 8002818:	08002871 	.word	0x08002871
	{

	case (EXTI0_IRQ):
						NVIC_IRQ6_EXTI0_DISABLE;
 800281c:	4b1c      	ldr	r3, [pc, #112]	@ (8002890 <NVIC__EXTI_IRQ_DISABLE+0x130>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1b      	ldr	r2, [pc, #108]	@ (8002890 <NVIC__EXTI_IRQ_DISABLE+0x130>)
 8002822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002826:	6013      	str	r3, [r2, #0]
						break;
 8002828:	e02a      	b.n	8002880 <NVIC__EXTI_IRQ_DISABLE+0x120>
	case (EXTI1_IRQ):
						NVIC_IRQ7_EXTI1_DISABLE;
 800282a:	4b19      	ldr	r3, [pc, #100]	@ (8002890 <NVIC__EXTI_IRQ_DISABLE+0x130>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a18      	ldr	r2, [pc, #96]	@ (8002890 <NVIC__EXTI_IRQ_DISABLE+0x130>)
 8002830:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002834:	6013      	str	r3, [r2, #0]
						break;
 8002836:	e023      	b.n	8002880 <NVIC__EXTI_IRQ_DISABLE+0x120>
	case (EXTI2_IRQ):
						NVIC_IRQ8_EXTI2_DISABLE;
 8002838:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <NVIC__EXTI_IRQ_DISABLE+0x130>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a14      	ldr	r2, [pc, #80]	@ (8002890 <NVIC__EXTI_IRQ_DISABLE+0x130>)
 800283e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002842:	6013      	str	r3, [r2, #0]
						break;
 8002844:	e01c      	b.n	8002880 <NVIC__EXTI_IRQ_DISABLE+0x120>
	case (EXTI3_IRQ):
					    NVIC_IRQ9_EXTI3_DISABLE;
 8002846:	4b12      	ldr	r3, [pc, #72]	@ (8002890 <NVIC__EXTI_IRQ_DISABLE+0x130>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a11      	ldr	r2, [pc, #68]	@ (8002890 <NVIC__EXTI_IRQ_DISABLE+0x130>)
 800284c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002850:	6013      	str	r3, [r2, #0]
						break;
 8002852:	e015      	b.n	8002880 <NVIC__EXTI_IRQ_DISABLE+0x120>

	case (EXTI4_IRQ):
						NVIC_IRQ10_EXTI4_DISABLE;
 8002854:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <NVIC__EXTI_IRQ_DISABLE+0x130>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0d      	ldr	r2, [pc, #52]	@ (8002890 <NVIC__EXTI_IRQ_DISABLE+0x130>)
 800285a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800285e:	6013      	str	r3, [r2, #0]
						break;
 8002860:	e00e      	b.n	8002880 <NVIC__EXTI_IRQ_DISABLE+0x120>

	case 23: // EXTI5_IRQ to EXTI9_IRQ share IRQ 23
						NVIC_IRQ23_EXTI5_9_DISABLE;
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <NVIC__EXTI_IRQ_DISABLE+0x130>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <NVIC__EXTI_IRQ_DISABLE+0x130>)
 8002868:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800286c:	6013      	str	r3, [r2, #0]
						break;
 800286e:	e007      	b.n	8002880 <NVIC__EXTI_IRQ_DISABLE+0x120>

	case 40: // EXTI10_IRQ to EXTI15_IRQ share IRQ 40
						NVIC_IRQ40_EXTI10_15_DISABLE;
 8002870:	4b08      	ldr	r3, [pc, #32]	@ (8002894 <NVIC__EXTI_IRQ_DISABLE+0x134>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a07      	ldr	r2, [pc, #28]	@ (8002894 <NVIC__EXTI_IRQ_DISABLE+0x134>)
 8002876:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800287a:	6013      	str	r3, [r2, #0]
						break;
 800287c:	e000      	b.n	8002880 <NVIC__EXTI_IRQ_DISABLE+0x120>
	default:
						break;
 800287e:	bf00      	nop

	}

}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40010400 	.word	0x40010400
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000e104 	.word	0xe000e104

08002898 <MCAL_EXTI_Init>:
 * @param [in] - EXTI_PINCONFIG_t* EXTI_Config
 * @retval -none
 * Note-.....
 */
void MCAL_EXTI_Init(EXTI_PINCONFIG_t* EXTI_Config)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

	// Configure GPIO PIN As FLOATING Input PIN
	GPIO_PinConfig_t GPIO_EXTI_Config;
	GPIO_EXTI_Config.GPIO_PinNumber=EXTI_Config->EXTI_Map_Pin.EXTI_Pin_Number;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	891b      	ldrh	r3, [r3, #8]
 80028a4:	813b      	strh	r3, [r7, #8]
	GPIO_EXTI_Config.GPIO_Mode=GPIO_Mode_Inp_Floating;
 80028a6:	2301      	movs	r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
	GPIO_EXTI_Config.GPIO_Speed= GPIO_Speed_Reset_State;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
	MCAL_GPIO_Init(EXTI_Config->EXTI_Map_Pin.GPIOX,&GPIO_EXTI_Config);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f107 0208 	add.w	r2, r7, #8
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 facf 	bl	8002e5c <MCAL_GPIO_Init>
	MCAL_GPIO_Enable_Clock(EXTI_Config->EXTI_Map_Pin.GPIOX);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f9d4 	bl	8002c70 <MCAL_GPIO_Enable_Clock>

	// Mapping Between GPIO AND EXTI by AFIO



	uint8_t AFIO_EXTICR_Index=EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number/4;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	75fb      	strb	r3, [r7, #23]
	uint8_t EXTIx_Position= (EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number % 4)*4;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	75bb      	strb	r3, [r7, #22]
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~ (0xF <<EXTIx_Position) ;
 80028e2:	4a54      	ldr	r2, [pc, #336]	@ (8002a34 <MCAL_EXTI_Init+0x19c>)
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
 80028e6:	3302      	adds	r3, #2
 80028e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028ec:	7dbb      	ldrb	r3, [r7, #22]
 80028ee:	210f      	movs	r1, #15
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	4618      	mov	r0, r3
 80028f8:	494e      	ldr	r1, [pc, #312]	@ (8002a34 <MCAL_EXTI_Init+0x19c>)
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	4002      	ands	r2, r0
 80028fe:	3302      	adds	r3, #2
 8002900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((EXTI_GPIOx(EXTI_Config->EXTI_Map_Pin.GPIOX) & 0xF ) << EXTIx_Position);
 8002904:	4a4b      	ldr	r2, [pc, #300]	@ (8002a34 <MCAL_EXTI_Init+0x19c>)
 8002906:	7dfb      	ldrb	r3, [r7, #23]
 8002908:	3302      	adds	r3, #2
 800290a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4949      	ldr	r1, [pc, #292]	@ (8002a38 <MCAL_EXTI_Init+0x1a0>)
 8002914:	428b      	cmp	r3, r1
 8002916:	d016      	beq.n	8002946 <MCAL_EXTI_Init+0xae>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4947      	ldr	r1, [pc, #284]	@ (8002a3c <MCAL_EXTI_Init+0x1a4>)
 800291e:	428b      	cmp	r3, r1
 8002920:	d00f      	beq.n	8002942 <MCAL_EXTI_Init+0xaa>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4946      	ldr	r1, [pc, #280]	@ (8002a40 <MCAL_EXTI_Init+0x1a8>)
 8002928:	428b      	cmp	r3, r1
 800292a:	d008      	beq.n	800293e <MCAL_EXTI_Init+0xa6>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4944      	ldr	r1, [pc, #272]	@ (8002a44 <MCAL_EXTI_Init+0x1ac>)
 8002932:	428b      	cmp	r3, r1
 8002934:	d101      	bne.n	800293a <MCAL_EXTI_Init+0xa2>
 8002936:	2303      	movs	r3, #3
 8002938:	e006      	b.n	8002948 <MCAL_EXTI_Init+0xb0>
 800293a:	2300      	movs	r3, #0
 800293c:	e004      	b.n	8002948 <MCAL_EXTI_Init+0xb0>
 800293e:	2302      	movs	r3, #2
 8002940:	e002      	b.n	8002948 <MCAL_EXTI_Init+0xb0>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <MCAL_EXTI_Init+0xb0>
 8002946:	2300      	movs	r3, #0
 8002948:	7db9      	ldrb	r1, [r7, #22]
 800294a:	408b      	lsls	r3, r1
 800294c:	4618      	mov	r0, r3
 800294e:	4939      	ldr	r1, [pc, #228]	@ (8002a34 <MCAL_EXTI_Init+0x19c>)
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	4302      	orrs	r2, r0
 8002954:	3302      	adds	r3, #2
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 800295a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a48 <MCAL_EXTI_Init+0x1b0>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	8812      	ldrh	r2, [r2, #0]
 8002962:	4611      	mov	r1, r2
 8002964:	2201      	movs	r2, #1
 8002966:	408a      	lsls	r2, r1
 8002968:	43d2      	mvns	r2, r2
 800296a:	4611      	mov	r1, r2
 800296c:	4a36      	ldr	r2, [pc, #216]	@ (8002a48 <MCAL_EXTI_Init+0x1b0>)
 800296e:	400b      	ands	r3, r1
 8002970:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 8002972:	4b35      	ldr	r3, [pc, #212]	@ (8002a48 <MCAL_EXTI_Init+0x1b0>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	8812      	ldrh	r2, [r2, #0]
 800297a:	4611      	mov	r1, r2
 800297c:	2201      	movs	r2, #1
 800297e:	408a      	lsls	r2, r1
 8002980:	43d2      	mvns	r2, r2
 8002982:	4611      	mov	r1, r2
 8002984:	4a30      	ldr	r2, [pc, #192]	@ (8002a48 <MCAL_EXTI_Init+0x1b0>)
 8002986:	400b      	ands	r3, r1
 8002988:	60d3      	str	r3, [r2, #12]

	//Configuration of EXTI
	if(EXTI_Config->EXTI_Trigger_State == EXTI_Rising_Trigger)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7b1b      	ldrb	r3, [r3, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10b      	bne.n	80029aa <MCAL_EXTI_Init+0x112>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 8002992:	4b2d      	ldr	r3, [pc, #180]	@ (8002a48 <MCAL_EXTI_Init+0x1b0>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	8812      	ldrh	r2, [r2, #0]
 800299a:	4611      	mov	r1, r2
 800299c:	2201      	movs	r2, #1
 800299e:	408a      	lsls	r2, r1
 80029a0:	4611      	mov	r1, r2
 80029a2:	4a29      	ldr	r2, [pc, #164]	@ (8002a48 <MCAL_EXTI_Init+0x1b0>)
 80029a4:	430b      	orrs	r3, r1
 80029a6:	6093      	str	r3, [r2, #8]
 80029a8:	e029      	b.n	80029fe <MCAL_EXTI_Init+0x166>
	}
	else if(EXTI_Config->EXTI_Trigger_State == EXTI_Falling_Trigger)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7b1b      	ldrb	r3, [r3, #12]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d10b      	bne.n	80029ca <MCAL_EXTI_Init+0x132>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 80029b2:	4b25      	ldr	r3, [pc, #148]	@ (8002a48 <MCAL_EXTI_Init+0x1b0>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	8812      	ldrh	r2, [r2, #0]
 80029ba:	4611      	mov	r1, r2
 80029bc:	2201      	movs	r2, #1
 80029be:	408a      	lsls	r2, r1
 80029c0:	4611      	mov	r1, r2
 80029c2:	4a21      	ldr	r2, [pc, #132]	@ (8002a48 <MCAL_EXTI_Init+0x1b0>)
 80029c4:	430b      	orrs	r3, r1
 80029c6:	60d3      	str	r3, [r2, #12]
 80029c8:	e019      	b.n	80029fe <MCAL_EXTI_Init+0x166>
	}
	else if(EXTI_Config->EXTI_Trigger_State == EXTI_Rising_Falling_Trigger)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7b1b      	ldrb	r3, [r3, #12]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d115      	bne.n	80029fe <MCAL_EXTI_Init+0x166>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 80029d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <MCAL_EXTI_Init+0x1b0>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	8812      	ldrh	r2, [r2, #0]
 80029da:	4611      	mov	r1, r2
 80029dc:	2201      	movs	r2, #1
 80029de:	408a      	lsls	r2, r1
 80029e0:	4611      	mov	r1, r2
 80029e2:	4a19      	ldr	r2, [pc, #100]	@ (8002a48 <MCAL_EXTI_Init+0x1b0>)
 80029e4:	430b      	orrs	r3, r1
 80029e6:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 80029e8:	4b17      	ldr	r3, [pc, #92]	@ (8002a48 <MCAL_EXTI_Init+0x1b0>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	8812      	ldrh	r2, [r2, #0]
 80029f0:	4611      	mov	r1, r2
 80029f2:	2201      	movs	r2, #1
 80029f4:	408a      	lsls	r2, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	4a13      	ldr	r2, [pc, #76]	@ (8002a48 <MCAL_EXTI_Init+0x1b0>)
 80029fa:	430b      	orrs	r3, r1
 80029fc:	60d3      	str	r3, [r2, #12]
	}

	//CallBack Function.
	GP_FuncCallBack[EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number]= EXTI_Config->PF_IRQ_CALLBACK;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	4619      	mov	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	4a10      	ldr	r2, [pc, #64]	@ (8002a4c <MCAL_EXTI_Init+0x1b4>)
 8002a0a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//Enable OR Disable EXTIx & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7b5b      	ldrb	r3, [r3, #13]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d103      	bne.n	8002a1e <MCAL_EXTI_Init+0x186>
	{
		NVIC__EXTI_IRQ_ENABLE(EXTI_Config);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fe06 	bl	8002628 <NVIC__EXTI_IRQ_ENABLE>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_DISABLE)
	{
		NVIC__EXTI_IRQ_DISABLE(EXTI_Config);
	}

}
 8002a1c:	e006      	b.n	8002a2c <MCAL_EXTI_Init+0x194>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_DISABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7b5b      	ldrb	r3, [r3, #13]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <MCAL_EXTI_Init+0x194>
		NVIC__EXTI_IRQ_DISABLE(EXTI_Config);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff fe9a 	bl	8002760 <NVIC__EXTI_IRQ_DISABLE>
}
 8002a2c:	bf00      	nop
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40010000 	.word	0x40010000
 8002a38:	40010800 	.word	0x40010800
 8002a3c:	40010c00 	.word	0x40010c00
 8002a40:	40011000 	.word	0x40011000
 8002a44:	40011400 	.word	0x40011400
 8002a48:	40010400 	.word	0x40010400
 8002a4c:	20000270 	.word	0x20000270

08002a50 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
	GP_FuncCallBack[0]();
 8002a54:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <EXTI0_IRQHandler+0x1c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4798      	blx	r3
	EXTI->PR |= (1 << 0);
 8002a5a:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <EXTI0_IRQHandler+0x20>)
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <EXTI0_IRQHandler+0x20>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6153      	str	r3, [r2, #20]

}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000270 	.word	0x20000270
 8002a70:	40010400 	.word	0x40010400

08002a74 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	GP_FuncCallBack[1]();
 8002a78:	4b05      	ldr	r3, [pc, #20]	@ (8002a90 <EXTI1_IRQHandler+0x1c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4798      	blx	r3
	EXTI->PR |= (1 << 1);
 8002a7e:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <EXTI1_IRQHandler+0x20>)
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	4a04      	ldr	r2, [pc, #16]	@ (8002a94 <EXTI1_IRQHandler+0x20>)
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	6153      	str	r3, [r2, #20]

}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000270 	.word	0x20000270
 8002a94:	40010400 	.word	0x40010400

08002a98 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
	GP_FuncCallBack[2]();
 8002a9c:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <EXTI2_IRQHandler+0x1c>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4798      	blx	r3
	EXTI->PR |= (1 << 2);
 8002aa2:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <EXTI2_IRQHandler+0x20>)
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	4a04      	ldr	r2, [pc, #16]	@ (8002ab8 <EXTI2_IRQHandler+0x20>)
 8002aa8:	f043 0304 	orr.w	r3, r3, #4
 8002aac:	6153      	str	r3, [r2, #20]


}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000270 	.word	0x20000270
 8002ab8:	40010400 	.word	0x40010400

08002abc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
	GP_FuncCallBack[3]();
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <EXTI3_IRQHandler+0x1c>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4798      	blx	r3
	EXTI->PR |= (1 << 3);
 8002ac6:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <EXTI3_IRQHandler+0x20>)
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <EXTI3_IRQHandler+0x20>)
 8002acc:	f043 0308 	orr.w	r3, r3, #8
 8002ad0:	6153      	str	r3, [r2, #20]

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000270 	.word	0x20000270
 8002adc:	40010400 	.word	0x40010400

08002ae0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
	GP_FuncCallBack[4]();
 8002ae4:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <EXTI4_IRQHandler+0x1c>)
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	4798      	blx	r3
	EXTI->PR |= (1 << 4);
 8002aea:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <EXTI4_IRQHandler+0x20>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	4a04      	ldr	r2, [pc, #16]	@ (8002b00 <EXTI4_IRQHandler+0x20>)
 8002af0:	f043 0310 	orr.w	r3, r3, #16
 8002af4:	6153      	str	r3, [r2, #20]

}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000270 	.word	0x20000270
 8002b00:	40010400 	.word	0x40010400

08002b04 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) { GP_FuncCallBack[5]();   EXTI->PR |= (1 << 5); }
 8002b08:	4b26      	ldr	r3, [pc, #152]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <EXTI9_5_IRQHandler+0x22>
 8002b14:	4b24      	ldr	r3, [pc, #144]	@ (8002ba8 <EXTI9_5_IRQHandler+0xa4>)
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	4798      	blx	r3
 8002b1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	4a21      	ldr	r2, [pc, #132]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b20:	f043 0320 	orr.w	r3, r3, #32
 8002b24:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<6)) { GP_FuncCallBack[6]();   EXTI->PR |= (1 << 6); }
 8002b26:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <EXTI9_5_IRQHandler+0x40>
 8002b32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba8 <EXTI9_5_IRQHandler+0xa4>)
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	4798      	blx	r3
 8002b38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b42:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<7)) { GP_FuncCallBack[7]();   EXTI->PR |= (1 << 7); }
 8002b44:	4b17      	ldr	r3, [pc, #92]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <EXTI9_5_IRQHandler+0x5e>
 8002b50:	4b15      	ldr	r3, [pc, #84]	@ (8002ba8 <EXTI9_5_IRQHandler+0xa4>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	4798      	blx	r3
 8002b56:	4b13      	ldr	r3, [pc, #76]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b60:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<8)) { GP_FuncCallBack[8]();   EXTI->PR |= (1 << 8); }
 8002b62:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <EXTI9_5_IRQHandler+0x7c>
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba8 <EXTI9_5_IRQHandler+0xa4>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4798      	blx	r3
 8002b74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b7e:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<9)) { GP_FuncCallBack[9]();   EXTI->PR |= (1 << 9); }
 8002b80:	4b08      	ldr	r3, [pc, #32]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <EXTI9_5_IRQHandler+0x9a>
 8002b8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <EXTI9_5_IRQHandler+0xa4>)
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	4798      	blx	r3
 8002b92:	4b04      	ldr	r3, [pc, #16]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	4a03      	ldr	r2, [pc, #12]	@ (8002ba4 <EXTI9_5_IRQHandler+0xa0>)
 8002b98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b9c:	6153      	str	r3, [r2, #20]
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40010400 	.word	0x40010400
 8002ba8:	20000270 	.word	0x20000270

08002bac <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) { GP_FuncCallBack[10]();   EXTI->PR |= (1 << 10); }
 8002bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <EXTI15_10_IRQHandler+0x22>
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002c6c <EXTI15_10_IRQHandler+0xc0>)
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc0:	4798      	blx	r3
 8002bc2:	4b29      	ldr	r3, [pc, #164]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	4a28      	ldr	r2, [pc, #160]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002bc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bcc:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<11)) { GP_FuncCallBack[11]();   EXTI->PR |= (1 << 11); }
 8002bce:	4b26      	ldr	r3, [pc, #152]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <EXTI15_10_IRQHandler+0x40>
 8002bda:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <EXTI15_10_IRQHandler+0xc0>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	4798      	blx	r3
 8002be0:	4b21      	ldr	r3, [pc, #132]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	4a20      	ldr	r2, [pc, #128]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002be6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002bea:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<12)) { GP_FuncCallBack[12]();   EXTI->PR |= (1 << 12); }
 8002bec:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <EXTI15_10_IRQHandler+0x5e>
 8002bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c6c <EXTI15_10_IRQHandler+0xc0>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfc:	4798      	blx	r3
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	4a19      	ldr	r2, [pc, #100]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002c04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c08:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<13)) { GP_FuncCallBack[13]();   EXTI->PR |= (1 << 13); }
 8002c0a:	4b17      	ldr	r3, [pc, #92]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <EXTI15_10_IRQHandler+0x7c>
 8002c16:	4b15      	ldr	r3, [pc, #84]	@ (8002c6c <EXTI15_10_IRQHandler+0xc0>)
 8002c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1a:	4798      	blx	r3
 8002c1c:	4b12      	ldr	r3, [pc, #72]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	4a11      	ldr	r2, [pc, #68]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002c22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c26:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<14)) { GP_FuncCallBack[14]();   EXTI->PR |= (1 << 14); }
 8002c28:	4b0f      	ldr	r3, [pc, #60]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <EXTI15_10_IRQHandler+0x9a>
 8002c34:	4b0d      	ldr	r3, [pc, #52]	@ (8002c6c <EXTI15_10_IRQHandler+0xc0>)
 8002c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c38:	4798      	blx	r3
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c44:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<15)) { GP_FuncCallBack[15]();   EXTI->PR |= (1 << 15); }
 8002c46:	4b08      	ldr	r3, [pc, #32]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d008      	beq.n	8002c64 <EXTI15_10_IRQHandler+0xb8>
 8002c52:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <EXTI15_10_IRQHandler+0xc0>)
 8002c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c56:	4798      	blx	r3
 8002c58:	4b03      	ldr	r3, [pc, #12]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	4a02      	ldr	r2, [pc, #8]	@ (8002c68 <EXTI15_10_IRQHandler+0xbc>)
 8002c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c62:	6153      	str	r3, [r2, #20]

}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40010400 	.word	0x40010400
 8002c6c:	20000270 	.word	0x20000270

08002c70 <MCAL_GPIO_Enable_Clock>:
 * @retval -Not
 * Note-.....
 */

void MCAL_GPIO_Enable_Clock(GPIO_TypedDef* GPIOx)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	if(  GPIOx ==  GPIOA)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <MCAL_GPIO_Enable_Clock+0x68>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d106      	bne.n	8002c8e <MCAL_GPIO_Enable_Clock+0x1e>
	{
		GPIOA_CLOCK_ENABLE;
 8002c80:	4b16      	ldr	r3, [pc, #88]	@ (8002cdc <MCAL_GPIO_Enable_Clock+0x6c>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	4a15      	ldr	r2, [pc, #84]	@ (8002cdc <MCAL_GPIO_Enable_Clock+0x6c>)
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	6193      	str	r3, [r2, #24]
	} */
	else
	{
		//DoNothing
	}
}
 8002c8c:	e01f      	b.n	8002cce <MCAL_GPIO_Enable_Clock+0x5e>
	else if(GPIOx ==  GPIOB)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a13      	ldr	r2, [pc, #76]	@ (8002ce0 <MCAL_GPIO_Enable_Clock+0x70>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d106      	bne.n	8002ca4 <MCAL_GPIO_Enable_Clock+0x34>
		GPIOB_CLOCK_ENABLE;
 8002c96:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <MCAL_GPIO_Enable_Clock+0x6c>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	4a10      	ldr	r2, [pc, #64]	@ (8002cdc <MCAL_GPIO_Enable_Clock+0x6c>)
 8002c9c:	f043 0308 	orr.w	r3, r3, #8
 8002ca0:	6193      	str	r3, [r2, #24]
}
 8002ca2:	e014      	b.n	8002cce <MCAL_GPIO_Enable_Clock+0x5e>
	else if(GPIOx ==  GPIOC)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce4 <MCAL_GPIO_Enable_Clock+0x74>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d106      	bne.n	8002cba <MCAL_GPIO_Enable_Clock+0x4a>
		GPIOC_CLOCK_ENABLE;
 8002cac:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <MCAL_GPIO_Enable_Clock+0x6c>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cdc <MCAL_GPIO_Enable_Clock+0x6c>)
 8002cb2:	f043 0310 	orr.w	r3, r3, #16
 8002cb6:	6193      	str	r3, [r2, #24]
}
 8002cb8:	e009      	b.n	8002cce <MCAL_GPIO_Enable_Clock+0x5e>
	else if(GPIOx ==  GPIOD)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce8 <MCAL_GPIO_Enable_Clock+0x78>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d105      	bne.n	8002cce <MCAL_GPIO_Enable_Clock+0x5e>
		GPIOD_CLOCK_ENABLE;
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <MCAL_GPIO_Enable_Clock+0x6c>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	4a05      	ldr	r2, [pc, #20]	@ (8002cdc <MCAL_GPIO_Enable_Clock+0x6c>)
 8002cc8:	f043 0320 	orr.w	r3, r3, #32
 8002ccc:	6193      	str	r3, [r2, #24]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	40010800 	.word	0x40010800
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010c00 	.word	0x40010c00
 8002ce4:	40011000 	.word	0x40011000
 8002ce8:	40011400 	.word	0x40011400

08002cec <Get_Pos_CRLH>:
 * @param [in] - PinNumber >>>>>> based on @ref GPIO_PINS_Define in header of gpio
 * @retval -Suitable Pos for Config_Register [uint8_t]
 * */

uint8_t Get_Pos_CRLH(uint16_t PinNumber)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cfc:	f000 80a5 	beq.w	8002e4a <Get_Pos_CRLH+0x15e>
 8002d00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d04:	f300 80a3 	bgt.w	8002e4e <Get_Pos_CRLH+0x162>
 8002d08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d0c:	f000 809b 	beq.w	8002e46 <Get_Pos_CRLH+0x15a>
 8002d10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d14:	f300 809b 	bgt.w	8002e4e <Get_Pos_CRLH+0x162>
 8002d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d1c:	f000 8091 	beq.w	8002e42 <Get_Pos_CRLH+0x156>
 8002d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d24:	f300 8093 	bgt.w	8002e4e <Get_Pos_CRLH+0x162>
 8002d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d2c:	f000 8087 	beq.w	8002e3e <Get_Pos_CRLH+0x152>
 8002d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d34:	f300 808b 	bgt.w	8002e4e <Get_Pos_CRLH+0x162>
 8002d38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d3c:	d07d      	beq.n	8002e3a <Get_Pos_CRLH+0x14e>
 8002d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d42:	f300 8084 	bgt.w	8002e4e <Get_Pos_CRLH+0x162>
 8002d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d4a:	d074      	beq.n	8002e36 <Get_Pos_CRLH+0x14a>
 8002d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d50:	dc7d      	bgt.n	8002e4e <Get_Pos_CRLH+0x162>
 8002d52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d56:	d06c      	beq.n	8002e32 <Get_Pos_CRLH+0x146>
 8002d58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d5c:	dc77      	bgt.n	8002e4e <Get_Pos_CRLH+0x162>
 8002d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d62:	d064      	beq.n	8002e2e <Get_Pos_CRLH+0x142>
 8002d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d68:	dc71      	bgt.n	8002e4e <Get_Pos_CRLH+0x162>
 8002d6a:	2b80      	cmp	r3, #128	@ 0x80
 8002d6c:	d05d      	beq.n	8002e2a <Get_Pos_CRLH+0x13e>
 8002d6e:	2b80      	cmp	r3, #128	@ 0x80
 8002d70:	dc6d      	bgt.n	8002e4e <Get_Pos_CRLH+0x162>
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	dc48      	bgt.n	8002e08 <Get_Pos_CRLH+0x11c>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	dd69      	ble.n	8002e4e <Get_Pos_CRLH+0x162>
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	2b1f      	cmp	r3, #31
 8002d7e:	d866      	bhi.n	8002e4e <Get_Pos_CRLH+0x162>
 8002d80:	a201      	add	r2, pc, #4	@ (adr r2, 8002d88 <Get_Pos_CRLH+0x9c>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002e0f 	.word	0x08002e0f
 8002d8c:	08002e13 	.word	0x08002e13
 8002d90:	08002e4f 	.word	0x08002e4f
 8002d94:	08002e17 	.word	0x08002e17
 8002d98:	08002e4f 	.word	0x08002e4f
 8002d9c:	08002e4f 	.word	0x08002e4f
 8002da0:	08002e4f 	.word	0x08002e4f
 8002da4:	08002e1b 	.word	0x08002e1b
 8002da8:	08002e4f 	.word	0x08002e4f
 8002dac:	08002e4f 	.word	0x08002e4f
 8002db0:	08002e4f 	.word	0x08002e4f
 8002db4:	08002e4f 	.word	0x08002e4f
 8002db8:	08002e4f 	.word	0x08002e4f
 8002dbc:	08002e4f 	.word	0x08002e4f
 8002dc0:	08002e4f 	.word	0x08002e4f
 8002dc4:	08002e1f 	.word	0x08002e1f
 8002dc8:	08002e4f 	.word	0x08002e4f
 8002dcc:	08002e4f 	.word	0x08002e4f
 8002dd0:	08002e4f 	.word	0x08002e4f
 8002dd4:	08002e4f 	.word	0x08002e4f
 8002dd8:	08002e4f 	.word	0x08002e4f
 8002ddc:	08002e4f 	.word	0x08002e4f
 8002de0:	08002e4f 	.word	0x08002e4f
 8002de4:	08002e4f 	.word	0x08002e4f
 8002de8:	08002e4f 	.word	0x08002e4f
 8002dec:	08002e4f 	.word	0x08002e4f
 8002df0:	08002e4f 	.word	0x08002e4f
 8002df4:	08002e4f 	.word	0x08002e4f
 8002df8:	08002e4f 	.word	0x08002e4f
 8002dfc:	08002e4f 	.word	0x08002e4f
 8002e00:	08002e4f 	.word	0x08002e4f
 8002e04:	08002e23 	.word	0x08002e23
 8002e08:	2b40      	cmp	r3, #64	@ 0x40
 8002e0a:	d00c      	beq.n	8002e26 <Get_Pos_CRLH+0x13a>
 8002e0c:	e01f      	b.n	8002e4e <Get_Pos_CRLH+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e01e      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8002e12:	2304      	movs	r3, #4
 8002e14:	e01c      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8002e16:	2308      	movs	r3, #8
 8002e18:	e01a      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8002e1a:	230c      	movs	r3, #12
 8002e1c:	e018      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8002e1e:	2310      	movs	r3, #16
 8002e20:	e016      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8002e22:	2314      	movs	r3, #20
 8002e24:	e014      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8002e26:	2318      	movs	r3, #24
 8002e28:	e012      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8002e2a:	231c      	movs	r3, #28
 8002e2c:	e010      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e00e      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_9 :
		return 4;
 8002e32:	2304      	movs	r3, #4
 8002e34:	e00c      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8002e36:	2308      	movs	r3, #8
 8002e38:	e00a      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8002e3a:	230c      	movs	r3, #12
 8002e3c:	e008      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8002e3e:	2310      	movs	r3, #16
 8002e40:	e006      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8002e42:	2314      	movs	r3, #20
 8002e44:	e004      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8002e46:	2318      	movs	r3, #24
 8002e48:	e002      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8002e4a:	231c      	movs	r3, #28
 8002e4c:	e000      	b.n	8002e50 <Get_Pos_CRLH+0x164>
		break;

	default:
		return 0;
 8002e4e:	2300      	movs	r3, #0


	}

}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop

08002e5c <MCAL_GPIO_Init>:
 * Note-You must Create Instant from "GPIO_PinConfig_t" Structure,
 * Before using This func "MCAL_GPIO_Init" and pass it to @param [in] -Address of the PinConfig
 */

void MCAL_GPIO_Init(GPIO_TypedDef* GPIOx, GPIO_PinConfig_t* PinConfig )
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]

	volatile uint32_t* Reg_Config= NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]

	Reg_Config = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?  &(GPIOx->CRL):  &(GPIOx->CRH) ;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	2bff      	cmp	r3, #255	@ 0xff
 8002e70:	d801      	bhi.n	8002e76 <MCAL_GPIO_Init+0x1a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	e001      	b.n	8002e7a <MCAL_GPIO_Init+0x1e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	60fb      	str	r3, [r7, #12]
	*Reg_Config &= ~(0xF << Get_Pos_CRLH(PinConfig->GPIO_PinNumber) );
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff33 	bl	8002cec <Get_Pos_CRLH>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461a      	mov	r2, r3
 8002e8a:	230f      	movs	r3, #15
 8002e8c:	4093      	lsls	r3, r2
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	401a      	ands	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	601a      	str	r2, [r3, #0]


	if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_Open_drain ||
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d00b      	beq.n	8002eba <MCAL_GPIO_Init+0x5e>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	d007      	beq.n	8002eba <MCAL_GPIO_Init+0x5e>
			PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_Open_drain )
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
	if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_Open_drain ||
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d003      	beq.n	8002eba <MCAL_GPIO_Init+0x5e>
			PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_Open_drain )
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b07      	cmp	r3, #7
 8002eb8:	d117      	bne.n	8002eea <MCAL_GPIO_Init+0x8e>
	{
		*Reg_Config |= (((((PinConfig->GPIO_Mode - 4) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	3b04      	subs	r3, #4
 8002ec0:	009a      	lsls	r2, r3, #2
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f003 040f 	and.w	r4, r3, #15
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff0b 	bl	8002cec <Get_Pos_CRLH>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	fa04 f203 	lsl.w	r2, r4, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	bf00      	nop

		}

	}

}
 8002ee8:	e058      	b.n	8002f9c <MCAL_GPIO_Init+0x140>
		if(PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_up )
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d11c      	bne.n	8002f2c <MCAL_GPIO_Init+0xd0>
			GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	8812      	ldrh	r2, [r2, #0]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	60da      	str	r2, [r3, #12]
			*Reg_Config |= (((((PinConfig->GPIO_Mode) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	009a      	lsls	r2, r3, #2
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f003 040f 	and.w	r4, r3, #15
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fee9 	bl	8002cec <Get_Pos_CRLH>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	fa04 f203 	lsl.w	r2, r4, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	601a      	str	r2, [r3, #0]
}
 8002f2a:	e037      	b.n	8002f9c <MCAL_GPIO_Init+0x140>
		else if (PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_down)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d11e      	bne.n	8002f72 <MCAL_GPIO_Init+0x116>
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	8812      	ldrh	r2, [r2, #0]
 8002f3c:	43d2      	mvns	r2, r2
 8002f3e:	401a      	ands	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	60da      	str	r2, [r3, #12]
			*Reg_Config |= (((((PinConfig->GPIO_Mode - 1) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	009a      	lsls	r2, r3, #2
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f003 040f 	and.w	r4, r3, #15
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fec6 	bl	8002cec <Get_Pos_CRLH>
 8002f60:	4603      	mov	r3, r0
 8002f62:	fa04 f203 	lsl.w	r2, r4, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	601a      	str	r2, [r3, #0]
}
 8002f70:	e014      	b.n	8002f9c <MCAL_GPIO_Init+0x140>
			*Reg_Config |= (((((PinConfig->GPIO_Mode) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	009a      	lsls	r2, r3, #2
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f003 040f 	and.w	r4, r3, #15
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff feb0 	bl	8002cec <Get_Pos_CRLH>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	fa04 f203 	lsl.w	r2, r4, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	601a      	str	r2, [r3, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd90      	pop	{r4, r7, pc}

08002fa4 <MCAL_GPIO_ReadPin>:
 * @param [in] - PinNumber >>>>>> based on @ref GPIO_PINS_Define in header of gpio,
 * @retval -State of Pin, 0 or 1
 * Note-..........................................................
 */
uint8_t  MCAL_GPIO_ReadPin(GPIO_TypedDef* GPIOx,uint16_t PinNumber )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]
	if((GPIOx->IDR & PinNumber) != (uint32_t)GPIO_PIN_RESET) return (uint8_t)GPIO_PIN_SET;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	887b      	ldrh	r3, [r7, #2]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MCAL_GPIO_ReadPin+0x1c>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <MCAL_GPIO_ReadPin+0x1e>
	else return (uint8_t)GPIO_PIN_RESET;
 8002fc0:	2300      	movs	r3, #0

}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <MCAL_GPIO_WritePin>:
 * @param [in] - Set "Value" which is 0 or 1,
 * @retval -NOT......
 * Note-..........................................................
 */
void MCAL_GPIO_WritePin(GPIO_TypedDef* GPIOx,uint16_t PinNumber , uint8_t Value)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	707b      	strb	r3, [r7, #1]

	if(Value == (uint8_t) GPIO_PIN_SET)
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d103      	bne.n	8002fea <MCAL_GPIO_WritePin+0x1e>
	{
		//Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15), you do not need any or "|" with Atomic Bit Register BSRR
		GPIOx->BSRR = (uint32_t)PinNumber;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	611a      	str	r2, [r3, #16]
	else
	{
		//Bits 31:16 BRy: Port x Reset bit y (y= 0 .. 15),  you do not need any or "|" with Atomic Bit Register BSRR
		GPIOx->BSRR = (uint32_t)(PinNumber << 16);
	}
}
 8002fe8:	e003      	b.n	8002ff2 <MCAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t)(PinNumber << 16);
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	611a      	str	r2, [r3, #16]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <MCAL_GPIO_TogglePin>:
 * @param [in] - PinNumber >>>>>> based on @ref GPIO_PINS_Define in header of gpio,
 * @retval -Not
 * Note-..........................................................
 */
void MCAL_GPIO_TogglePin(GPIO_TypedDef* GPIOx,uint16_t PinNumber)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (uint32_t)PinNumber;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	887b      	ldrh	r3, [r7, #2]
 800300e:	405a      	eors	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	60da      	str	r2, [r3, #12]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
	...

08003020 <TIM_EnableClock>:
 * @brief -Enable clock for the specified timer
 * @param [in] - TIMx: Timer instance
 * @retval -none
 * Note-.....
 */
static void TIM_EnableClock(TIM_TypeDef* TIMx) {
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
    if (TIMx == TIM1) {
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a17      	ldr	r2, [pc, #92]	@ (8003088 <TIM_EnableClock+0x68>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d106      	bne.n	800303e <TIM_EnableClock+0x1e>
        RCC->APB2ENR |= (1 << 11); // TIM1 clock enable
 8003030:	4b16      	ldr	r3, [pc, #88]	@ (800308c <TIM_EnableClock+0x6c>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4a15      	ldr	r2, [pc, #84]	@ (800308c <TIM_EnableClock+0x6c>)
 8003036:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800303a:	6193      	str	r3, [r2, #24]
    } else if (TIMx == TIM3) {
        RCC->APB1ENR |= (1 << 1);  // TIM3 clock enable
    } else if (TIMx == TIM4) {
        RCC->APB1ENR |= (1 << 2);  // TIM4 clock enable
    }
}
 800303c:	e01f      	b.n	800307e <TIM_EnableClock+0x5e>
    } else if (TIMx == TIM2) {
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003044:	d106      	bne.n	8003054 <TIM_EnableClock+0x34>
        RCC->APB1ENR |= (1 << 0);  // TIM2 clock enable
 8003046:	4b11      	ldr	r3, [pc, #68]	@ (800308c <TIM_EnableClock+0x6c>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4a10      	ldr	r2, [pc, #64]	@ (800308c <TIM_EnableClock+0x6c>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	61d3      	str	r3, [r2, #28]
}
 8003052:	e014      	b.n	800307e <TIM_EnableClock+0x5e>
    } else if (TIMx == TIM3) {
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a0e      	ldr	r2, [pc, #56]	@ (8003090 <TIM_EnableClock+0x70>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d106      	bne.n	800306a <TIM_EnableClock+0x4a>
        RCC->APB1ENR |= (1 << 1);  // TIM3 clock enable
 800305c:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <TIM_EnableClock+0x6c>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	4a0a      	ldr	r2, [pc, #40]	@ (800308c <TIM_EnableClock+0x6c>)
 8003062:	f043 0302 	orr.w	r3, r3, #2
 8003066:	61d3      	str	r3, [r2, #28]
}
 8003068:	e009      	b.n	800307e <TIM_EnableClock+0x5e>
    } else if (TIMx == TIM4) {
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a09      	ldr	r2, [pc, #36]	@ (8003094 <TIM_EnableClock+0x74>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d105      	bne.n	800307e <TIM_EnableClock+0x5e>
        RCC->APB1ENR |= (1 << 2);  // TIM4 clock enable
 8003072:	4b06      	ldr	r3, [pc, #24]	@ (800308c <TIM_EnableClock+0x6c>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4a05      	ldr	r2, [pc, #20]	@ (800308c <TIM_EnableClock+0x6c>)
 8003078:	f043 0304 	orr.w	r3, r3, #4
 800307c:	61d3      	str	r3, [r2, #28]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	40012c00 	.word	0x40012c00
 800308c:	40021000 	.word	0x40021000
 8003090:	40000400 	.word	0x40000400
 8003094:	40000800 	.word	0x40000800

08003098 <TIM_GetIndex>:
 * @brief -Get timer index for array indexing
 * @param [in] - TIMx: Timer instance
 * @retval -Timer index (0-7) or 0 if not found
 * Note-.....
 */
static uint8_t TIM_GetIndex(TIM_TypeDef* TIMx) {
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
    if (TIMx == TIM1) return 0;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a0e      	ldr	r2, [pc, #56]	@ (80030dc <TIM_GetIndex+0x44>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d101      	bne.n	80030ac <TIM_GetIndex+0x14>
 80030a8:	2300      	movs	r3, #0
 80030aa:	e012      	b.n	80030d2 <TIM_GetIndex+0x3a>
    else if (TIMx == TIM2) return 1;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030b2:	d101      	bne.n	80030b8 <TIM_GetIndex+0x20>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e00c      	b.n	80030d2 <TIM_GetIndex+0x3a>
    else if (TIMx == TIM3) return 2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a09      	ldr	r2, [pc, #36]	@ (80030e0 <TIM_GetIndex+0x48>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d101      	bne.n	80030c4 <TIM_GetIndex+0x2c>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e006      	b.n	80030d2 <TIM_GetIndex+0x3a>
    else if (TIMx == TIM4) return 3;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a07      	ldr	r2, [pc, #28]	@ (80030e4 <TIM_GetIndex+0x4c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d101      	bne.n	80030d0 <TIM_GetIndex+0x38>
 80030cc:	2303      	movs	r3, #3
 80030ce:	e000      	b.n	80030d2 <TIM_GetIndex+0x3a>
    else return 0; // Default to 0 if not found
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	40012c00 	.word	0x40012c00
 80030e0:	40000400 	.word	0x40000400
 80030e4:	40000800 	.word	0x40000800

080030e8 <MCAL_TIM_Base_Init>:
 * @brief -Initialize timer base functionality
 * @param [in] - TIM_Config: Pointer to Timer TimeBase configuration struct
 * @retval -none
 * Note-.....
 */
void MCAL_TIM_Base_Init(TIM_TimeBase_Config_t* TIM_Config) {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
    TIM_TypeDef* TIMx = TIM_Config->TIMx;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]
    
    // Enable timer clock
    TIM_EnableClock(TIMx);
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7ff ff92 	bl	8003020 <TIM_EnableClock>
    
    // Set prescaler
    TIMx->PSC = TIM_Config->Prescaler;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	889b      	ldrh	r3, [r3, #4]
 8003100:	461a      	mov	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	629a      	str	r2, [r3, #40]	@ 0x28
    
    // Set auto-reload value (period)
    TIMx->ARR = TIM_Config->Period;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    // Set repetition counter (for advanced timers like TIM1)
    if (TIMx == TIM1) {
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4a11      	ldr	r2, [pc, #68]	@ (8003158 <MCAL_TIM_Base_Init+0x70>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d104      	bne.n	8003120 <MCAL_TIM_Base_Init+0x38>
        TIMx->RCR = TIM_Config->RepetitionCounter;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7b9b      	ldrb	r3, [r3, #14]
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    // Set counter mode and clock division
    TIMx->CR1 &= ~(0x03F0); // Clear counter mode and clock division bits
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f423 727c 	bic.w	r2, r3, #1008	@ 0x3f0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	601a      	str	r2, [r3, #0]
    TIMx->CR1 |= (TIM_Config->CounterMode | TIM_Config->ClockDivision);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	88d1      	ldrh	r1, [r2, #6]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	8992      	ldrh	r2, [r2, #12]
 8003138:	430a      	orrs	r2, r1
 800313a:	b292      	uxth	r2, r2
 800313c:	431a      	orrs	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	601a      	str	r2, [r3, #0]
    
    // Generate update event to load new values
    TIMx->EGR |= 0x01;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f043 0201 	orr.w	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	615a      	str	r2, [r3, #20]
}
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40012c00 	.word	0x40012c00

0800315c <MCAL_TIM_Base_Start>:
 * @brief -Start timer counter
 * @param [in] - TIMx: Timer instance
 * @retval -none
 * Note-.....
 */
void MCAL_TIM_Base_Start(TIM_TypeDef* TIMx) {
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
    // Enable counter
    TIMx->CR1 |= 0x01;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	601a      	str	r2, [r3, #0]
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <MCAL_TIM_Base_SetCounter>:
 * @param [in] - TIMx: Timer instance
 * @param [in] - Counter: Counter value to set
 * @retval -none
 * Note-.....
 */
void MCAL_TIM_Base_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter) {
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
    TIMx->CNT = Counter;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <MCAL_TIM_Base_GetCounter>:
 * @brief -Get timer counter value
 * @param [in] - TIMx: Timer instance
 * @retval -Current counter value
 * Note-.....
 */
uint32_t MCAL_TIM_Base_GetCounter(TIM_TypeDef* TIMx) {
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
    return TIMx->CNT;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
	...

080031ac <MCAL_TIM_PWM_Init>:
 * @param [in] - Channel: Timer channel (@ref TIM_Channel)
 * @param [in] - PWM_Config: Pointer to Timer Output Compare configuration struct for PWM
 * @retval -none
 * Note-.....
 */
void MCAL_TIM_PWM_Init(TIM_TypeDef* TIMx, uint16_t Channel, TIM_OC_Config_t* PWM_Config) {
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	460b      	mov	r3, r1
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	817b      	strh	r3, [r7, #10]
    // Configure the channel based on channel number
    switch (Channel) {
 80031ba:	897b      	ldrh	r3, [r7, #10]
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	f200 8142 	bhi.w	8003446 <MCAL_TIM_PWM_Init+0x29a>
 80031c2:	a201      	add	r2, pc, #4	@ (adr r2, 80031c8 <MCAL_TIM_PWM_Init+0x1c>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	080031fd 	.word	0x080031fd
 80031cc:	08003447 	.word	0x08003447
 80031d0:	08003447 	.word	0x08003447
 80031d4:	08003447 	.word	0x08003447
 80031d8:	08003297 	.word	0x08003297
 80031dc:	08003447 	.word	0x08003447
 80031e0:	08003447 	.word	0x08003447
 80031e4:	08003447 	.word	0x08003447
 80031e8:	08003331 	.word	0x08003331
 80031ec:	08003447 	.word	0x08003447
 80031f0:	08003447 	.word	0x08003447
 80031f4:	08003447 	.word	0x08003447
 80031f8:	080033c9 	.word	0x080033c9
        case TIM_CHANNEL_1:
            // Clear the old configuration
            TIMx->CCMR1 &= ~(0xFF << 0);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	619a      	str	r2, [r3, #24]
            // Set PWM mode and preload enable
            TIMx->CCMR1 |= (PWM_Config->OCMode << 4) | (1 << 3);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	4313      	orrs	r3, r2
 8003214:	f043 0208 	orr.w	r2, r3, #8
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	619a      	str	r2, [r3, #24]
            // Set output polarity
            TIMx->CCER &= ~(0x3 << 0);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f023 0203 	bic.w	r2, r3, #3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	621a      	str	r2, [r3, #32]
            TIMx->CCER |= (PWM_Config->OCPolarity << 1);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1a      	ldr	r2, [r3, #32]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	889b      	ldrh	r3, [r3, #4]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	431a      	orrs	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	621a      	str	r2, [r3, #32]
            // Set pulse width
            TIMx->CCR1 = PWM_Config->Pulse;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	885b      	ldrh	r3, [r3, #2]
 800323c:	461a      	mov	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	635a      	str	r2, [r3, #52]	@ 0x34
            
            // For advanced timers (TIM1)
            if (TIMx == TIM1) {
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a87      	ldr	r2, [pc, #540]	@ (8003464 <MCAL_TIM_PWM_Init+0x2b8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	f040 80f6 	bne.w	8003438 <MCAL_TIM_PWM_Init+0x28c>
                // Set complementary output polarity and idle states
                TIMx->CCER &= ~(0x3 << 2);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f023 020c 	bic.w	r2, r3, #12
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	621a      	str	r2, [r3, #32]
                TIMx->CCER |= (PWM_Config->OCNPolarity << 3);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a1a      	ldr	r2, [r3, #32]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	88db      	ldrh	r3, [r3, #6]
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	431a      	orrs	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	621a      	str	r2, [r3, #32]
                TIMx->CR2 &= ~(0x3 << 0);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f023 0203 	bic.w	r2, r3, #3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	605a      	str	r2, [r3, #4]
                TIMx->CR2 |= ((PWM_Config->OCIdleState >> 8) << 0) | ((PWM_Config->OCNIdleState >> 9) << 2);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	8912      	ldrh	r2, [r2, #8]
 800327c:	0a12      	lsrs	r2, r2, #8
 800327e:	b292      	uxth	r2, r2
 8003280:	4611      	mov	r1, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	8952      	ldrh	r2, [r2, #10]
 8003286:	0a52      	lsrs	r2, r2, #9
 8003288:	b292      	uxth	r2, r2
 800328a:	0092      	lsls	r2, r2, #2
 800328c:	430a      	orrs	r2, r1
 800328e:	431a      	orrs	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	605a      	str	r2, [r3, #4]
            }
            break;
 8003294:	e0d0      	b.n	8003438 <MCAL_TIM_PWM_Init+0x28c>
            
        case TIM_CHANNEL_2:
            // Clear the old configuration
            TIMx->CCMR1 &= ~(0xFF << 8);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	619a      	str	r2, [r3, #24]
            // Set PWM mode and preload enable
            TIMx->CCMR1 |= (PWM_Config->OCMode << 12) | (1 << 11);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	031b      	lsls	r3, r3, #12
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	619a      	str	r2, [r3, #24]
            // Set output polarity
            TIMx->CCER &= ~(0x3 << 4);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	621a      	str	r2, [r3, #32]
            TIMx->CCER |= (PWM_Config->OCPolarity << 5);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a1a      	ldr	r2, [r3, #32]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	889b      	ldrh	r3, [r3, #4]
 80032ca:	015b      	lsls	r3, r3, #5
 80032cc:	431a      	orrs	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	621a      	str	r2, [r3, #32]
            // Set pulse width
            TIMx->CCR2 = PWM_Config->Pulse;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	885b      	ldrh	r3, [r3, #2]
 80032d6:	461a      	mov	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	639a      	str	r2, [r3, #56]	@ 0x38
            
            // For advanced timers (TIM1)
            if (TIMx == TIM1) {
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a61      	ldr	r2, [pc, #388]	@ (8003464 <MCAL_TIM_PWM_Init+0x2b8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	f040 80ab 	bne.w	800343c <MCAL_TIM_PWM_Init+0x290>
                // Set complementary output polarity and idle states
                TIMx->CCER &= ~(0x3 << 6);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	621a      	str	r2, [r3, #32]
                TIMx->CCER |= (PWM_Config->OCNPolarity << 7);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a1a      	ldr	r2, [r3, #32]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	88db      	ldrh	r3, [r3, #6]
 80032fa:	01db      	lsls	r3, r3, #7
 80032fc:	431a      	orrs	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	621a      	str	r2, [r3, #32]
                TIMx->CR2 &= ~(0x3 << 4);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	605a      	str	r2, [r3, #4]
                TIMx->CR2 |= ((PWM_Config->OCIdleState >> 8) << 4) | ((PWM_Config->OCNIdleState >> 9) << 6);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	8912      	ldrh	r2, [r2, #8]
 8003316:	0a12      	lsrs	r2, r2, #8
 8003318:	b292      	uxth	r2, r2
 800331a:	0111      	lsls	r1, r2, #4
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	8952      	ldrh	r2, [r2, #10]
 8003320:	0a52      	lsrs	r2, r2, #9
 8003322:	b292      	uxth	r2, r2
 8003324:	0192      	lsls	r2, r2, #6
 8003326:	430a      	orrs	r2, r1
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	605a      	str	r2, [r3, #4]
            }
            break;
 800332e:	e085      	b.n	800343c <MCAL_TIM_PWM_Init+0x290>
            
        case TIM_CHANNEL_3:
            // Clear the old configuration
            TIMx->CCMR2 &= ~(0xFF << 0);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	61da      	str	r2, [r3, #28]
            // Set PWM mode and preload enable
            TIMx->CCMR2 |= (PWM_Config->OCMode << 4) | (1 << 3);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	4313      	orrs	r3, r2
 8003348:	f043 0208 	orr.w	r2, r3, #8
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	61da      	str	r2, [r3, #28]
            // Set output polarity
            TIMx->CCER &= ~(0x3 << 8);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	621a      	str	r2, [r3, #32]
            TIMx->CCER |= (PWM_Config->OCPolarity << 9);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a1a      	ldr	r2, [r3, #32]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	889b      	ldrh	r3, [r3, #4]
 8003364:	025b      	lsls	r3, r3, #9
 8003366:	431a      	orrs	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	621a      	str	r2, [r3, #32]
            // Set pulse width
            TIMx->CCR3 = PWM_Config->Pulse;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	885b      	ldrh	r3, [r3, #2]
 8003370:	461a      	mov	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	63da      	str	r2, [r3, #60]	@ 0x3c
            
            // For advanced timers (TIM1)
            if (TIMx == TIM1) {
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a3a      	ldr	r2, [pc, #232]	@ (8003464 <MCAL_TIM_PWM_Init+0x2b8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d160      	bne.n	8003440 <MCAL_TIM_PWM_Init+0x294>
                // Set complementary output polarity and idle states
                TIMx->CCER &= ~(0x3 << 10);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	621a      	str	r2, [r3, #32]
                TIMx->CCER |= (PWM_Config->OCNPolarity << 11);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a1a      	ldr	r2, [r3, #32]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	88db      	ldrh	r3, [r3, #6]
 8003392:	02db      	lsls	r3, r3, #11
 8003394:	431a      	orrs	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	621a      	str	r2, [r3, #32]
                TIMx->CR2 &= ~(0x3 << 8);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	605a      	str	r2, [r3, #4]
                TIMx->CR2 |= ((PWM_Config->OCIdleState >> 8) << 8) | ((PWM_Config->OCNIdleState >> 9) << 10);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	8912      	ldrh	r2, [r2, #8]
 80033ae:	0a12      	lsrs	r2, r2, #8
 80033b0:	b292      	uxth	r2, r2
 80033b2:	0211      	lsls	r1, r2, #8
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	8952      	ldrh	r2, [r2, #10]
 80033b8:	0a52      	lsrs	r2, r2, #9
 80033ba:	b292      	uxth	r2, r2
 80033bc:	0292      	lsls	r2, r2, #10
 80033be:	430a      	orrs	r2, r1
 80033c0:	431a      	orrs	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	605a      	str	r2, [r3, #4]
            }
            break;
 80033c6:	e03b      	b.n	8003440 <MCAL_TIM_PWM_Init+0x294>
            
        case TIM_CHANNEL_4:
            // Clear the old configuration
            TIMx->CCMR2 &= ~(0xFF << 8);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	61da      	str	r2, [r3, #28]
            // Set PWM mode and preload enable
            TIMx->CCMR2 |= (PWM_Config->OCMode << 12) | (1 << 11);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	031b      	lsls	r3, r3, #12
 80033de:	4313      	orrs	r3, r2
 80033e0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	61da      	str	r2, [r3, #28]
            // Set output polarity
            TIMx->CCER &= ~(0x3 << 12);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	621a      	str	r2, [r3, #32]
            TIMx->CCER |= (PWM_Config->OCPolarity << 13);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a1a      	ldr	r2, [r3, #32]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	889b      	ldrh	r3, [r3, #4]
 80033fc:	035b      	lsls	r3, r3, #13
 80033fe:	431a      	orrs	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	621a      	str	r2, [r3, #32]
            // Set pulse width
            TIMx->CCR4 = PWM_Config->Pulse;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	885b      	ldrh	r3, [r3, #2]
 8003408:	461a      	mov	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	641a      	str	r2, [r3, #64]	@ 0x40
            
            // For advanced timers (TIM1)
            if (TIMx == TIM1) {
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a14      	ldr	r2, [pc, #80]	@ (8003464 <MCAL_TIM_PWM_Init+0x2b8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d116      	bne.n	8003444 <MCAL_TIM_PWM_Init+0x298>
                // No complementary output for Channel 4, only idle state
                TIMx->CR2 &= ~(0x1 << 12);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	605a      	str	r2, [r3, #4]
                TIMx->CR2 |= ((PWM_Config->OCIdleState >> 8) << 12);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	891b      	ldrh	r3, [r3, #8]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	b29b      	uxth	r3, r3
 800342e:	031b      	lsls	r3, r3, #12
 8003430:	431a      	orrs	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	605a      	str	r2, [r3, #4]
            }
            break;
 8003436:	e005      	b.n	8003444 <MCAL_TIM_PWM_Init+0x298>
            break;
 8003438:	bf00      	nop
 800343a:	e004      	b.n	8003446 <MCAL_TIM_PWM_Init+0x29a>
            break;
 800343c:	bf00      	nop
 800343e:	e002      	b.n	8003446 <MCAL_TIM_PWM_Init+0x29a>
            break;
 8003440:	bf00      	nop
 8003442:	e000      	b.n	8003446 <MCAL_TIM_PWM_Init+0x29a>
            break;
 8003444:	bf00      	nop
    }
    
    // For TIM1, enable Main Output
    if (TIMx == TIM1) {
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4a06      	ldr	r2, [pc, #24]	@ (8003464 <MCAL_TIM_PWM_Init+0x2b8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d105      	bne.n	800345a <MCAL_TIM_PWM_Init+0x2ae>
        TIMx->BDTR |= (1 << 15); // MOE: Main Output Enable
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	645a      	str	r2, [r3, #68]	@ 0x44
    }
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	40012c00 	.word	0x40012c00

08003468 <MCAL_TIM_PWM_Start>:
 * @param [in] - TIMx: Timer instance
 * @param [in] - Channel: Timer channel (@ref TIM_Channel)
 * @retval -none
 * Note- Starts the timer base if it's not already running.
 */
void MCAL_TIM_PWM_Start(TIM_TypeDef* TIMx, uint16_t Channel) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	807b      	strh	r3, [r7, #2]
    // Enable the corresponding output
    uint8_t shift = (Channel / 4) * 4; // 0, 4, 8, or 12
 8003474:	887b      	ldrh	r3, [r7, #2]
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	b29b      	uxth	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	73fb      	strb	r3, [r7, #15]
    TIMx->CCER |= (1 << shift);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	7bfa      	ldrb	r2, [r7, #15]
 8003486:	2101      	movs	r1, #1
 8003488:	fa01 f202 	lsl.w	r2, r1, r2
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	621a      	str	r2, [r3, #32]
    
    // Start the timer if not already started
    MCAL_TIM_Base_Start(TIMx);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff fe62 	bl	800315c <MCAL_TIM_Base_Start>
}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <MCAL_TIM_PWM_SetDutyCycle>:
 * @param [in] - Channel: Timer channel (@ref TIM_Channel)
 * @param [in] - DutyCycle: Duty cycle value (0-100)
 * @retval -none
 * Note- Calculates pulse width based on current ARR value.
 */
void MCAL_TIM_PWM_SetDutyCycle(TIM_TypeDef* TIMx, uint16_t Channel, uint16_t DutyCycle) {
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
 80034ac:	4613      	mov	r3, r2
 80034ae:	803b      	strh	r3, [r7, #0]
    uint32_t pulse = ((TIMx->ARR + 1) * DutyCycle) / 100;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	3301      	adds	r3, #1
 80034b6:	883a      	ldrh	r2, [r7, #0]
 80034b8:	fb02 f303 	mul.w	r3, r2, r3
 80034bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003534 <MCAL_TIM_PWM_SetDutyCycle+0x94>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	60fb      	str	r3, [r7, #12]
    
    // Set pulse width based on channel
    switch (Channel) {
 80034c6:	887b      	ldrh	r3, [r7, #2]
 80034c8:	2b0c      	cmp	r3, #12
 80034ca:	d82d      	bhi.n	8003528 <MCAL_TIM_PWM_SetDutyCycle+0x88>
 80034cc:	a201      	add	r2, pc, #4	@ (adr r2, 80034d4 <MCAL_TIM_PWM_SetDutyCycle+0x34>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	08003509 	.word	0x08003509
 80034d8:	08003529 	.word	0x08003529
 80034dc:	08003529 	.word	0x08003529
 80034e0:	08003529 	.word	0x08003529
 80034e4:	08003511 	.word	0x08003511
 80034e8:	08003529 	.word	0x08003529
 80034ec:	08003529 	.word	0x08003529
 80034f0:	08003529 	.word	0x08003529
 80034f4:	08003519 	.word	0x08003519
 80034f8:	08003529 	.word	0x08003529
 80034fc:	08003529 	.word	0x08003529
 8003500:	08003529 	.word	0x08003529
 8003504:	08003521 	.word	0x08003521
        case TIM_CHANNEL_1:
            TIMx->CCR1 = pulse;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 800350e:	e00b      	b.n	8003528 <MCAL_TIM_PWM_SetDutyCycle+0x88>
        case TIM_CHANNEL_2:
            TIMx->CCR2 = pulse;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8003516:	e007      	b.n	8003528 <MCAL_TIM_PWM_SetDutyCycle+0x88>
        case TIM_CHANNEL_3:
            TIMx->CCR3 = pulse;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	63da      	str	r2, [r3, #60]	@ 0x3c
            break;
 800351e:	e003      	b.n	8003528 <MCAL_TIM_PWM_SetDutyCycle+0x88>
        case TIM_CHANNEL_4:
            TIMx->CCR4 = pulse;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 8003526:	bf00      	nop
    }
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	51eb851f 	.word	0x51eb851f

08003538 <MCAL_TIM_EnableIT>:
 * @param [in] - TIMx: Timer instance
 * @param [in] - Interrupt: Interrupt type (@ref TIM_Interrupt_Definition)
 * @retval -none
 * Note-.....
 */
void MCAL_TIM_EnableIT(TIM_TypeDef* TIMx, uint16_t Interrupt) {
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]
    // Enable the specified timer interrupt
    TIMx->DIER |= Interrupt;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	887b      	ldrh	r3, [r7, #2]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]
    
    // Enable the corresponding NVIC interrupt
    if (TIMx == TIM1) {
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a1f      	ldr	r2, [pc, #124]	@ (80035d0 <MCAL_TIM_EnableIT+0x98>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d116      	bne.n	8003586 <MCAL_TIM_EnableIT+0x4e>
        if (Interrupt & TIM_IT_UPDATE) {
 8003558:	887b      	ldrh	r3, [r7, #2]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <MCAL_TIM_EnableIT+0x36>
            NVIC_ISER0 |= (1 << 25); // TIM1 Update Interrupt
 8003562:	4b1c      	ldr	r3, [pc, #112]	@ (80035d4 <MCAL_TIM_EnableIT+0x9c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1b      	ldr	r2, [pc, #108]	@ (80035d4 <MCAL_TIM_EnableIT+0x9c>)
 8003568:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800356c:	6013      	str	r3, [r2, #0]
        }
        if (Interrupt & (TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4)) {
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	f003 031e 	and.w	r3, r3, #30
 8003574:	2b00      	cmp	r3, #0
 8003576:	d026      	beq.n	80035c6 <MCAL_TIM_EnableIT+0x8e>
            NVIC_ISER0 |= (1 << 26); // TIM1 Capture Compare Interrupt
 8003578:	4b16      	ldr	r3, [pc, #88]	@ (80035d4 <MCAL_TIM_EnableIT+0x9c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a15      	ldr	r2, [pc, #84]	@ (80035d4 <MCAL_TIM_EnableIT+0x9c>)
 800357e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003582:	6013      	str	r3, [r2, #0]
    } else if (TIMx == TIM3) {
        NVIC_ISER0 |= (1 << 29); // TIM3 Global Interrupt
    } else if (TIMx == TIM4) {
        NVIC_ISER0 |= (1 << 30); // TIM4 Global Interrupt
    }
}
 8003584:	e01f      	b.n	80035c6 <MCAL_TIM_EnableIT+0x8e>
    } else if (TIMx == TIM2) {
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358c:	d106      	bne.n	800359c <MCAL_TIM_EnableIT+0x64>
        NVIC_ISER0 |= (1 << 28); // TIM2 Global Interrupt
 800358e:	4b11      	ldr	r3, [pc, #68]	@ (80035d4 <MCAL_TIM_EnableIT+0x9c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a10      	ldr	r2, [pc, #64]	@ (80035d4 <MCAL_TIM_EnableIT+0x9c>)
 8003594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003598:	6013      	str	r3, [r2, #0]
}
 800359a:	e014      	b.n	80035c6 <MCAL_TIM_EnableIT+0x8e>
    } else if (TIMx == TIM3) {
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a0e      	ldr	r2, [pc, #56]	@ (80035d8 <MCAL_TIM_EnableIT+0xa0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d106      	bne.n	80035b2 <MCAL_TIM_EnableIT+0x7a>
        NVIC_ISER0 |= (1 << 29); // TIM3 Global Interrupt
 80035a4:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <MCAL_TIM_EnableIT+0x9c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a0a      	ldr	r2, [pc, #40]	@ (80035d4 <MCAL_TIM_EnableIT+0x9c>)
 80035aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80035ae:	6013      	str	r3, [r2, #0]
}
 80035b0:	e009      	b.n	80035c6 <MCAL_TIM_EnableIT+0x8e>
    } else if (TIMx == TIM4) {
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a09      	ldr	r2, [pc, #36]	@ (80035dc <MCAL_TIM_EnableIT+0xa4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d105      	bne.n	80035c6 <MCAL_TIM_EnableIT+0x8e>
        NVIC_ISER0 |= (1 << 30); // TIM4 Global Interrupt
 80035ba:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <MCAL_TIM_EnableIT+0x9c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a05      	ldr	r2, [pc, #20]	@ (80035d4 <MCAL_TIM_EnableIT+0x9c>)
 80035c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80035c4:	6013      	str	r3, [r2, #0]
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	e000e100 	.word	0xe000e100
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800

080035e0 <MCAL_TIM_SetUpdateCallback>:
 * @param [in] - TIMx: Timer instance
 * @param [in] - Callback: Pointer to the callback function (void function returning void)
 * @retval -none
 * Note-.....
 */
void MCAL_TIM_SetUpdateCallback(TIM_TypeDef* TIMx, void (*Callback)(void)) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
    uint8_t timer_idx = TIM_GetIndex(TIMx);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff fd54 	bl	8003098 <TIM_GetIndex>
 80035f0:	4603      	mov	r3, r0
 80035f2:	73fb      	strb	r3, [r7, #15]
    TIM_UpdateCallbacks[timer_idx] = Callback;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	4904      	ldr	r1, [pc, #16]	@ (8003608 <MCAL_TIM_SetUpdateCallback+0x28>)
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200002b0 	.word	0x200002b0

0800360c <TIM1_UP_IRQHandler>:
    uint8_t channel_idx = TIM_GetChannelIndex(Channel);
    TIM_CaptureCompareCallbacks[timer_idx][channel_idx] = Callback;
}

// Timer Interrupt Handlers
void TIM1_UP_IRQHandler(void) {
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
    if (TIM1->SR & TIM_IT_UPDATE) {
 8003610:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <TIM1_UP_IRQHandler+0x30>)
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00c      	beq.n	8003636 <TIM1_UP_IRQHandler+0x2a>
        // Clear update interrupt flag
        TIM1->SR &= ~TIM_IT_UPDATE;
 800361c:	4b07      	ldr	r3, [pc, #28]	@ (800363c <TIM1_UP_IRQHandler+0x30>)
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	4a06      	ldr	r2, [pc, #24]	@ (800363c <TIM1_UP_IRQHandler+0x30>)
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	6113      	str	r3, [r2, #16]
        
        // Call user callback if registered
        if (TIM_UpdateCallbacks[0] != NULL) {
 8003628:	4b05      	ldr	r3, [pc, #20]	@ (8003640 <TIM1_UP_IRQHandler+0x34>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <TIM1_UP_IRQHandler+0x2a>
            TIM_UpdateCallbacks[0]();
 8003630:	4b03      	ldr	r3, [pc, #12]	@ (8003640 <TIM1_UP_IRQHandler+0x34>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4798      	blx	r3
        }
    }
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40012c00 	.word	0x40012c00
 8003640:	200002b0 	.word	0x200002b0

08003644 <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void) {
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
    // Check for capture/compare interrupts
    if (TIM1->SR & TIM_IT_CC1) {
 8003648:	4b26      	ldr	r3, [pc, #152]	@ (80036e4 <TIM1_CC_IRQHandler+0xa0>)
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00c      	beq.n	800366e <TIM1_CC_IRQHandler+0x2a>
        TIM1->SR &= ~TIM_IT_CC1;
 8003654:	4b23      	ldr	r3, [pc, #140]	@ (80036e4 <TIM1_CC_IRQHandler+0xa0>)
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	4a22      	ldr	r2, [pc, #136]	@ (80036e4 <TIM1_CC_IRQHandler+0xa0>)
 800365a:	f023 0302 	bic.w	r3, r3, #2
 800365e:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[0][0] != NULL) {
 8003660:	4b21      	ldr	r3, [pc, #132]	@ (80036e8 <TIM1_CC_IRQHandler+0xa4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <TIM1_CC_IRQHandler+0x2a>
            TIM_CaptureCompareCallbacks[0][0]();
 8003668:	4b1f      	ldr	r3, [pc, #124]	@ (80036e8 <TIM1_CC_IRQHandler+0xa4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4798      	blx	r3
        }
    }
    if (TIM1->SR & TIM_IT_CC2) {
 800366e:	4b1d      	ldr	r3, [pc, #116]	@ (80036e4 <TIM1_CC_IRQHandler+0xa0>)
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00c      	beq.n	8003694 <TIM1_CC_IRQHandler+0x50>
        TIM1->SR &= ~TIM_IT_CC2;
 800367a:	4b1a      	ldr	r3, [pc, #104]	@ (80036e4 <TIM1_CC_IRQHandler+0xa0>)
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	4a19      	ldr	r2, [pc, #100]	@ (80036e4 <TIM1_CC_IRQHandler+0xa0>)
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[0][1] != NULL) {
 8003686:	4b18      	ldr	r3, [pc, #96]	@ (80036e8 <TIM1_CC_IRQHandler+0xa4>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <TIM1_CC_IRQHandler+0x50>
            TIM_CaptureCompareCallbacks[0][1]();
 800368e:	4b16      	ldr	r3, [pc, #88]	@ (80036e8 <TIM1_CC_IRQHandler+0xa4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4798      	blx	r3
        }
    }
    if (TIM1->SR & TIM_IT_CC3) {
 8003694:	4b13      	ldr	r3, [pc, #76]	@ (80036e4 <TIM1_CC_IRQHandler+0xa0>)
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00c      	beq.n	80036ba <TIM1_CC_IRQHandler+0x76>
        TIM1->SR &= ~TIM_IT_CC3;
 80036a0:	4b10      	ldr	r3, [pc, #64]	@ (80036e4 <TIM1_CC_IRQHandler+0xa0>)
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	4a0f      	ldr	r2, [pc, #60]	@ (80036e4 <TIM1_CC_IRQHandler+0xa0>)
 80036a6:	f023 0308 	bic.w	r3, r3, #8
 80036aa:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[0][2] != NULL) {
 80036ac:	4b0e      	ldr	r3, [pc, #56]	@ (80036e8 <TIM1_CC_IRQHandler+0xa4>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <TIM1_CC_IRQHandler+0x76>
            TIM_CaptureCompareCallbacks[0][2]();
 80036b4:	4b0c      	ldr	r3, [pc, #48]	@ (80036e8 <TIM1_CC_IRQHandler+0xa4>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4798      	blx	r3
        }
    }
    if (TIM1->SR & TIM_IT_CC4) {
 80036ba:	4b0a      	ldr	r3, [pc, #40]	@ (80036e4 <TIM1_CC_IRQHandler+0xa0>)
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00c      	beq.n	80036e0 <TIM1_CC_IRQHandler+0x9c>
        TIM1->SR &= ~TIM_IT_CC4;
 80036c6:	4b07      	ldr	r3, [pc, #28]	@ (80036e4 <TIM1_CC_IRQHandler+0xa0>)
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	4a06      	ldr	r2, [pc, #24]	@ (80036e4 <TIM1_CC_IRQHandler+0xa0>)
 80036cc:	f023 0310 	bic.w	r3, r3, #16
 80036d0:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[0][3] != NULL) {
 80036d2:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <TIM1_CC_IRQHandler+0xa4>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <TIM1_CC_IRQHandler+0x9c>
            TIM_CaptureCompareCallbacks[0][3]();
 80036da:	4b03      	ldr	r3, [pc, #12]	@ (80036e8 <TIM1_CC_IRQHandler+0xa4>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4798      	blx	r3
        }
    }
}
 80036e0:	bf00      	nop
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	200002d0 	.word	0x200002d0

080036ec <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_IT_UPDATE) {
 80036f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00e      	beq.n	800371c <TIM2_IRQHandler+0x30>
        TIM2->SR &= ~TIM_IT_UPDATE;
 80036fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	6113      	str	r3, [r2, #16]
        if (TIM_UpdateCallbacks[1] != NULL) {
 800370e:	4b30      	ldr	r3, [pc, #192]	@ (80037d0 <TIM2_IRQHandler+0xe4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <TIM2_IRQHandler+0x30>
            TIM_UpdateCallbacks[1]();
 8003716:	4b2e      	ldr	r3, [pc, #184]	@ (80037d0 <TIM2_IRQHandler+0xe4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4798      	blx	r3
        }
    }
    
    // Check for capture/compare interrupts
    if (TIM2->SR & TIM_IT_CC1) {
 800371c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00e      	beq.n	8003748 <TIM2_IRQHandler+0x5c>
        TIM2->SR &= ~TIM_IT_CC1;
 800372a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003734:	f023 0302 	bic.w	r3, r3, #2
 8003738:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[1][0] != NULL) {
 800373a:	4b26      	ldr	r3, [pc, #152]	@ (80037d4 <TIM2_IRQHandler+0xe8>)
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <TIM2_IRQHandler+0x5c>
            TIM_CaptureCompareCallbacks[1][0]();
 8003742:	4b24      	ldr	r3, [pc, #144]	@ (80037d4 <TIM2_IRQHandler+0xe8>)
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	4798      	blx	r3
        }
    }
    if (TIM2->SR & TIM_IT_CC2) {
 8003748:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00e      	beq.n	8003774 <TIM2_IRQHandler+0x88>
        TIM2->SR &= ~TIM_IT_CC2;
 8003756:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003760:	f023 0304 	bic.w	r3, r3, #4
 8003764:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[1][1] != NULL) {
 8003766:	4b1b      	ldr	r3, [pc, #108]	@ (80037d4 <TIM2_IRQHandler+0xe8>)
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <TIM2_IRQHandler+0x88>
            TIM_CaptureCompareCallbacks[1][1]();
 800376e:	4b19      	ldr	r3, [pc, #100]	@ (80037d4 <TIM2_IRQHandler+0xe8>)
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	4798      	blx	r3
        }
    }
    if (TIM2->SR & TIM_IT_CC3) {
 8003774:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00e      	beq.n	80037a0 <TIM2_IRQHandler+0xb4>
        TIM2->SR &= ~TIM_IT_CC3;
 8003782:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800378c:	f023 0308 	bic.w	r3, r3, #8
 8003790:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[1][2] != NULL) {
 8003792:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <TIM2_IRQHandler+0xe8>)
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <TIM2_IRQHandler+0xb4>
            TIM_CaptureCompareCallbacks[1][2]();
 800379a:	4b0e      	ldr	r3, [pc, #56]	@ (80037d4 <TIM2_IRQHandler+0xe8>)
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	4798      	blx	r3
        }
    }
    if (TIM2->SR & TIM_IT_CC4) {
 80037a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00e      	beq.n	80037cc <TIM2_IRQHandler+0xe0>
        TIM2->SR &= ~TIM_IT_CC4;
 80037ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80037b8:	f023 0310 	bic.w	r3, r3, #16
 80037bc:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[1][3] != NULL) {
 80037be:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <TIM2_IRQHandler+0xe8>)
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <TIM2_IRQHandler+0xe0>
            TIM_CaptureCompareCallbacks[1][3]();
 80037c6:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <TIM2_IRQHandler+0xe8>)
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	4798      	blx	r3
        }
    }
}
 80037cc:	bf00      	nop
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200002b0 	.word	0x200002b0
 80037d4:	200002d0 	.word	0x200002d0

080037d8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_IT_UPDATE) {
 80037dc:	4b30      	ldr	r3, [pc, #192]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00c      	beq.n	8003802 <TIM3_IRQHandler+0x2a>
        TIM3->SR &= ~TIM_IT_UPDATE;
 80037e8:	4b2d      	ldr	r3, [pc, #180]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	4a2c      	ldr	r2, [pc, #176]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	6113      	str	r3, [r2, #16]
        if (TIM_UpdateCallbacks[2] != NULL) {
 80037f4:	4b2b      	ldr	r3, [pc, #172]	@ (80038a4 <TIM3_IRQHandler+0xcc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <TIM3_IRQHandler+0x2a>
            TIM_UpdateCallbacks[2]();
 80037fc:	4b29      	ldr	r3, [pc, #164]	@ (80038a4 <TIM3_IRQHandler+0xcc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4798      	blx	r3
        }
    }
    
    // Check for capture/compare interrupts
    if (TIM3->SR & TIM_IT_CC1) {
 8003802:	4b27      	ldr	r3, [pc, #156]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00c      	beq.n	8003828 <TIM3_IRQHandler+0x50>
        TIM3->SR &= ~TIM_IT_CC1;
 800380e:	4b24      	ldr	r3, [pc, #144]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	4a23      	ldr	r2, [pc, #140]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 8003814:	f023 0302 	bic.w	r3, r3, #2
 8003818:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[2][0] != NULL) {
 800381a:	4b23      	ldr	r3, [pc, #140]	@ (80038a8 <TIM3_IRQHandler+0xd0>)
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <TIM3_IRQHandler+0x50>
            TIM_CaptureCompareCallbacks[2][0]();
 8003822:	4b21      	ldr	r3, [pc, #132]	@ (80038a8 <TIM3_IRQHandler+0xd0>)
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4798      	blx	r3
        }
    }
    if (TIM3->SR & TIM_IT_CC2) {
 8003828:	4b1d      	ldr	r3, [pc, #116]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00c      	beq.n	800384e <TIM3_IRQHandler+0x76>
        TIM3->SR &= ~TIM_IT_CC2;
 8003834:	4b1a      	ldr	r3, [pc, #104]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	4a19      	ldr	r2, [pc, #100]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 800383a:	f023 0304 	bic.w	r3, r3, #4
 800383e:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[2][1] != NULL) {
 8003840:	4b19      	ldr	r3, [pc, #100]	@ (80038a8 <TIM3_IRQHandler+0xd0>)
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <TIM3_IRQHandler+0x76>
            TIM_CaptureCompareCallbacks[2][1]();
 8003848:	4b17      	ldr	r3, [pc, #92]	@ (80038a8 <TIM3_IRQHandler+0xd0>)
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	4798      	blx	r3
        }
    }
    if (TIM3->SR & TIM_IT_CC3) {
 800384e:	4b14      	ldr	r3, [pc, #80]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <TIM3_IRQHandler+0x9c>
        TIM3->SR &= ~TIM_IT_CC3;
 800385a:	4b11      	ldr	r3, [pc, #68]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	4a10      	ldr	r2, [pc, #64]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 8003860:	f023 0308 	bic.w	r3, r3, #8
 8003864:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[2][2] != NULL) {
 8003866:	4b10      	ldr	r3, [pc, #64]	@ (80038a8 <TIM3_IRQHandler+0xd0>)
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <TIM3_IRQHandler+0x9c>
            TIM_CaptureCompareCallbacks[2][2]();
 800386e:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <TIM3_IRQHandler+0xd0>)
 8003870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003872:	4798      	blx	r3
        }
    }
    if (TIM3->SR & TIM_IT_CC4) {
 8003874:	4b0a      	ldr	r3, [pc, #40]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00c      	beq.n	800389a <TIM3_IRQHandler+0xc2>
        TIM3->SR &= ~TIM_IT_CC4;
 8003880:	4b07      	ldr	r3, [pc, #28]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	4a06      	ldr	r2, [pc, #24]	@ (80038a0 <TIM3_IRQHandler+0xc8>)
 8003886:	f023 0310 	bic.w	r3, r3, #16
 800388a:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[2][3] != NULL) {
 800388c:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <TIM3_IRQHandler+0xd0>)
 800388e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <TIM3_IRQHandler+0xc2>
            TIM_CaptureCompareCallbacks[2][3]();
 8003894:	4b04      	ldr	r3, [pc, #16]	@ (80038a8 <TIM3_IRQHandler+0xd0>)
 8003896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003898:	4798      	blx	r3
        }
    }
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40000400 	.word	0x40000400
 80038a4:	200002b0 	.word	0x200002b0
 80038a8:	200002d0 	.word	0x200002d0

080038ac <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_IT_UPDATE) {
 80038b0:	4b30      	ldr	r3, [pc, #192]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00c      	beq.n	80038d6 <TIM4_IRQHandler+0x2a>
        TIM4->SR &= ~TIM_IT_UPDATE;
 80038bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	6113      	str	r3, [r2, #16]
        if (TIM_UpdateCallbacks[3] != NULL) {
 80038c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003978 <TIM4_IRQHandler+0xcc>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <TIM4_IRQHandler+0x2a>
            TIM_UpdateCallbacks[3]();
 80038d0:	4b29      	ldr	r3, [pc, #164]	@ (8003978 <TIM4_IRQHandler+0xcc>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4798      	blx	r3
        }
    }
    
    // Check for capture/compare interrupts
    if (TIM4->SR & TIM_IT_CC1) {
 80038d6:	4b27      	ldr	r3, [pc, #156]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00c      	beq.n	80038fc <TIM4_IRQHandler+0x50>
        TIM4->SR &= ~TIM_IT_CC1;
 80038e2:	4b24      	ldr	r3, [pc, #144]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	4a23      	ldr	r2, [pc, #140]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 80038e8:	f023 0302 	bic.w	r3, r3, #2
 80038ec:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[3][0] != NULL) {
 80038ee:	4b23      	ldr	r3, [pc, #140]	@ (800397c <TIM4_IRQHandler+0xd0>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <TIM4_IRQHandler+0x50>
            TIM_CaptureCompareCallbacks[3][0]();
 80038f6:	4b21      	ldr	r3, [pc, #132]	@ (800397c <TIM4_IRQHandler+0xd0>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	4798      	blx	r3
        }
    }
    if (TIM4->SR & TIM_IT_CC2) {
 80038fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00c      	beq.n	8003922 <TIM4_IRQHandler+0x76>
        TIM4->SR &= ~TIM_IT_CC2;
 8003908:	4b1a      	ldr	r3, [pc, #104]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	4a19      	ldr	r2, [pc, #100]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 800390e:	f023 0304 	bic.w	r3, r3, #4
 8003912:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[3][1] != NULL) {
 8003914:	4b19      	ldr	r3, [pc, #100]	@ (800397c <TIM4_IRQHandler+0xd0>)
 8003916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <TIM4_IRQHandler+0x76>
            TIM_CaptureCompareCallbacks[3][1]();
 800391c:	4b17      	ldr	r3, [pc, #92]	@ (800397c <TIM4_IRQHandler+0xd0>)
 800391e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003920:	4798      	blx	r3
        }
    }
    if (TIM4->SR & TIM_IT_CC3) {
 8003922:	4b14      	ldr	r3, [pc, #80]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00c      	beq.n	8003948 <TIM4_IRQHandler+0x9c>
        TIM4->SR &= ~TIM_IT_CC3;
 800392e:	4b11      	ldr	r3, [pc, #68]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	4a10      	ldr	r2, [pc, #64]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 8003934:	f023 0308 	bic.w	r3, r3, #8
 8003938:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[3][2] != NULL) {
 800393a:	4b10      	ldr	r3, [pc, #64]	@ (800397c <TIM4_IRQHandler+0xd0>)
 800393c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <TIM4_IRQHandler+0x9c>
            TIM_CaptureCompareCallbacks[3][2]();
 8003942:	4b0e      	ldr	r3, [pc, #56]	@ (800397c <TIM4_IRQHandler+0xd0>)
 8003944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003946:	4798      	blx	r3
        }
    }
    if (TIM4->SR & TIM_IT_CC4) {
 8003948:	4b0a      	ldr	r3, [pc, #40]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00c      	beq.n	800396e <TIM4_IRQHandler+0xc2>
        TIM4->SR &= ~TIM_IT_CC4;
 8003954:	4b07      	ldr	r3, [pc, #28]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	4a06      	ldr	r2, [pc, #24]	@ (8003974 <TIM4_IRQHandler+0xc8>)
 800395a:	f023 0310 	bic.w	r3, r3, #16
 800395e:	6113      	str	r3, [r2, #16]
        if (TIM_CaptureCompareCallbacks[3][3] != NULL) {
 8003960:	4b06      	ldr	r3, [pc, #24]	@ (800397c <TIM4_IRQHandler+0xd0>)
 8003962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <TIM4_IRQHandler+0xc2>
            TIM_CaptureCompareCallbacks[3][3]();
 8003968:	4b04      	ldr	r3, [pc, #16]	@ (800397c <TIM4_IRQHandler+0xd0>)
 800396a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396c:	4798      	blx	r3
        }
    }
} 
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40000800 	.word	0x40000800
 8003978:	200002b0 	.word	0x200002b0
 800397c:	200002d0 	.word	0x200002d0

08003980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003980:	480d      	ldr	r0, [pc, #52]	@ (80039b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003982:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003984:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003988:	480c      	ldr	r0, [pc, #48]	@ (80039bc <LoopForever+0x6>)
  ldr r1, =_edata
 800398a:	490d      	ldr	r1, [pc, #52]	@ (80039c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800398c:	4a0d      	ldr	r2, [pc, #52]	@ (80039c4 <LoopForever+0xe>)
  movs r3, #0
 800398e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003990:	e002      	b.n	8003998 <LoopCopyDataInit>

08003992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003996:	3304      	adds	r3, #4

08003998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800399a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800399c:	d3f9      	bcc.n	8003992 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800399e:	4a0a      	ldr	r2, [pc, #40]	@ (80039c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039a0:	4c0a      	ldr	r4, [pc, #40]	@ (80039cc <LoopForever+0x16>)
  movs r3, #0
 80039a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039a4:	e001      	b.n	80039aa <LoopFillZerobss>

080039a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039a8:	3204      	adds	r2, #4

080039aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039ac:	d3fb      	bcc.n	80039a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80039ae:	f000 f811 	bl	80039d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039b2:	f7fd fe17 	bl	80015e4 <main>

080039b6 <LoopForever>:

LoopForever:
  b LoopForever
 80039b6:	e7fe      	b.n	80039b6 <LoopForever>
  ldr   r0, =_estack
 80039b8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80039bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039c0:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80039c4:	08003ac0 	.word	0x08003ac0
  ldr r2, =_sbss
 80039c8:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80039cc:	20000350 	.word	0x20000350

080039d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039d0:	e7fe      	b.n	80039d0 <ADC1_2_IRQHandler>
	...

080039d4 <__libc_init_array>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	2600      	movs	r6, #0
 80039d8:	4d0c      	ldr	r5, [pc, #48]	@ (8003a0c <__libc_init_array+0x38>)
 80039da:	4c0d      	ldr	r4, [pc, #52]	@ (8003a10 <__libc_init_array+0x3c>)
 80039dc:	1b64      	subs	r4, r4, r5
 80039de:	10a4      	asrs	r4, r4, #2
 80039e0:	42a6      	cmp	r6, r4
 80039e2:	d109      	bne.n	80039f8 <__libc_init_array+0x24>
 80039e4:	f000 f81a 	bl	8003a1c <_init>
 80039e8:	2600      	movs	r6, #0
 80039ea:	4d0a      	ldr	r5, [pc, #40]	@ (8003a14 <__libc_init_array+0x40>)
 80039ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003a18 <__libc_init_array+0x44>)
 80039ee:	1b64      	subs	r4, r4, r5
 80039f0:	10a4      	asrs	r4, r4, #2
 80039f2:	42a6      	cmp	r6, r4
 80039f4:	d105      	bne.n	8003a02 <__libc_init_array+0x2e>
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
 80039f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fc:	4798      	blx	r3
 80039fe:	3601      	adds	r6, #1
 8003a00:	e7ee      	b.n	80039e0 <__libc_init_array+0xc>
 8003a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a06:	4798      	blx	r3
 8003a08:	3601      	adds	r6, #1
 8003a0a:	e7f2      	b.n	80039f2 <__libc_init_array+0x1e>
 8003a0c:	08003ab8 	.word	0x08003ab8
 8003a10:	08003ab8 	.word	0x08003ab8
 8003a14:	08003ab8 	.word	0x08003ab8
 8003a18:	08003abc 	.word	0x08003abc

08003a1c <_init>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr

08003a28 <_fini>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr
