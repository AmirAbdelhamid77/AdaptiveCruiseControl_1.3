
configuring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000220  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000350  08000358  00001358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000350  08000350  00001358  2**0
                  CONTENTS
  4 .ARM          00000000  08000350  08000350  00001358  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000350  08000358  00001358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000350  08000350  00001350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000354  08000354  00001354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  08000358  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000358  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013df  00000000  00000000  00001381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000630  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00002d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000012a  00000000  00000000  00002f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000839  00000000  00000000  0000305a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021b7  00000000  00000000  00003893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00028b2a  00000000  00000000  00005a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0002e574  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000056c  00000000  00000000  0002e5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0002eb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000338 	.word	0x08000338

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000338 	.word	0x08000338

08000170 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    /* Loop forever */
	for(;;);
 8000174:	bf00      	nop
 8000176:	e7fd      	b.n	8000174 <main+0x4>

08000178 <SPI1_IRQHandler>:



//---ISR-------

void SPI1_IRQHandler (void) {
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
	IRQ_SOURCE irq_src ;
	irq_src.TXE = ( (SPI1->SR & (1 << 1)) >> 1 ) ;
 800017e:	4b13      	ldr	r3, [pc, #76]	@ (80001cc <SPI1_IRQHandler+0x54>)
 8000180:	689b      	ldr	r3, [r3, #8]
 8000182:	085b      	lsrs	r3, r3, #1
 8000184:	f003 0301 	and.w	r3, r3, #1
 8000188:	b2da      	uxtb	r2, r3
 800018a:	793b      	ldrb	r3, [r7, #4]
 800018c:	f362 0300 	bfi	r3, r2, #0, #1
 8000190:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI1->SR & (1 << 0)) >> 0 ) ;
 8000192:	4b0e      	ldr	r3, [pc, #56]	@ (80001cc <SPI1_IRQHandler+0x54>)
 8000194:	689b      	ldr	r3, [r3, #8]
 8000196:	f003 0301 	and.w	r3, r3, #1
 800019a:	b2da      	uxtb	r2, r3
 800019c:	793b      	ldrb	r3, [r7, #4]
 800019e:	f362 0341 	bfi	r3, r2, #1, #1
 80001a2:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI1->SR & (1 << 4)) >> 4 ) ;
 80001a4:	4b09      	ldr	r3, [pc, #36]	@ (80001cc <SPI1_IRQHandler+0x54>)
 80001a6:	689b      	ldr	r3, [r3, #8]
 80001a8:	091b      	lsrs	r3, r3, #4
 80001aa:	f003 0301 	and.w	r3, r3, #1
 80001ae:	b2da      	uxtb	r2, r3
 80001b0:	793b      	ldrb	r3, [r7, #4]
 80001b2:	f362 0382 	bfi	r3, r2, #2, #1
 80001b6:	713b      	strb	r3, [r7, #4]
	G_SPI_Config[0]->IRQ_CallBack(irq_src) ;
 80001b8:	4b05      	ldr	r3, [pc, #20]	@ (80001d0 <SPI1_IRQHandler+0x58>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	695b      	ldr	r3, [r3, #20]
 80001be:	7938      	ldrb	r0, [r7, #4]
 80001c0:	4798      	blx	r3
}
 80001c2:	bf00      	nop
 80001c4:	3708      	adds	r7, #8
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40013000 	.word	0x40013000
 80001d0:	2000001c 	.word	0x2000001c

080001d4 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	IRQ_SOURCE irq_src ;
	irq_src.TXE = ( (SPI2->SR & (1 << 1)) >> 1 ) ;
 80001da:	4b13      	ldr	r3, [pc, #76]	@ (8000228 <SPI2_IRQHandler+0x54>)
 80001dc:	689b      	ldr	r3, [r3, #8]
 80001de:	085b      	lsrs	r3, r3, #1
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	793b      	ldrb	r3, [r7, #4]
 80001e8:	f362 0300 	bfi	r3, r2, #0, #1
 80001ec:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI2->SR & (1 << 0)) >> 0 ) ;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <SPI2_IRQHandler+0x54>)
 80001f0:	689b      	ldr	r3, [r3, #8]
 80001f2:	f003 0301 	and.w	r3, r3, #1
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	793b      	ldrb	r3, [r7, #4]
 80001fa:	f362 0341 	bfi	r3, r2, #1, #1
 80001fe:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI2->SR & (1 << 4)) >> 4 ) ;
 8000200:	4b09      	ldr	r3, [pc, #36]	@ (8000228 <SPI2_IRQHandler+0x54>)
 8000202:	689b      	ldr	r3, [r3, #8]
 8000204:	091b      	lsrs	r3, r3, #4
 8000206:	f003 0301 	and.w	r3, r3, #1
 800020a:	b2da      	uxtb	r2, r3
 800020c:	793b      	ldrb	r3, [r7, #4]
 800020e:	f362 0382 	bfi	r3, r2, #2, #1
 8000212:	713b      	strb	r3, [r7, #4]
	G_SPI_Config[1]->IRQ_CallBack(irq_src) ;
 8000214:	4b05      	ldr	r3, [pc, #20]	@ (800022c <SPI2_IRQHandler+0x58>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	695b      	ldr	r3, [r3, #20]
 800021a:	7938      	ldrb	r0, [r7, #4]
 800021c:	4798      	blx	r3

}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40003800 	.word	0x40003800
 800022c:	2000001c 	.word	0x2000001c

08000230 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0

}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler (void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0

}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr

08000248 <I2C2_EV_IRQHandler>:



void I2C2_EV_IRQHandler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0

}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr

08000254 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0

}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr

08000260 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0

	Global_config->P_IRQ_Callback () ;
 8000264:	4b02      	ldr	r3, [pc, #8]	@ (8000270 <USART1_IRQHandler+0x10>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	691b      	ldr	r3, [r3, #16]
 800026a:	4798      	blx	r3

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000024 	.word	0x20000024

08000274 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	Global_config->P_IRQ_Callback () ;
 8000278:	4b02      	ldr	r3, [pc, #8]	@ (8000284 <USART2_IRQHandler+0x10>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	691b      	ldr	r3, [r3, #16]
 800027e:	4798      	blx	r3

}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000024 	.word	0x20000024

08000288 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	Global_config->P_IRQ_Callback () ;
 800028c:	4b02      	ldr	r3, [pc, #8]	@ (8000298 <USART3_IRQHandler+0x10>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	691b      	ldr	r3, [r3, #16]
 8000292:	4798      	blx	r3


}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000024 	.word	0x20000024

0800029c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800029c:	480d      	ldr	r0, [pc, #52]	@ (80002d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a4:	480c      	ldr	r0, [pc, #48]	@ (80002d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a6:	490d      	ldr	r1, [pc, #52]	@ (80002dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a8:	4a0d      	ldr	r2, [pc, #52]	@ (80002e0 <LoopForever+0xe>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ac:	e002      	b.n	80002b4 <LoopCopyDataInit>

080002ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b2:	3304      	adds	r3, #4

080002b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b8:	d3f9      	bcc.n	80002ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ba:	4a0a      	ldr	r2, [pc, #40]	@ (80002e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002bc:	4c0a      	ldr	r4, [pc, #40]	@ (80002e8 <LoopForever+0x16>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c0:	e001      	b.n	80002c6 <LoopFillZerobss>

080002c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c4:	3204      	adds	r2, #4

080002c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c8:	d3fb      	bcc.n	80002c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ca:	f000 f811 	bl	80002f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ce:	f7ff ff4f 	bl	8000170 <main>

080002d2 <LoopForever>:

LoopForever:
  b LoopForever
 80002d2:	e7fe      	b.n	80002d2 <LoopForever>
  ldr   r0, =_estack
 80002d4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e0:	08000358 	.word	0x08000358
  ldr r2, =_sbss
 80002e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e8:	20000028 	.word	0x20000028

080002ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ec:	e7fe      	b.n	80002ec <ADC1_2_IRQHandler>
	...

080002f0 <__libc_init_array>:
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	2600      	movs	r6, #0
 80002f4:	4d0c      	ldr	r5, [pc, #48]	@ (8000328 <__libc_init_array+0x38>)
 80002f6:	4c0d      	ldr	r4, [pc, #52]	@ (800032c <__libc_init_array+0x3c>)
 80002f8:	1b64      	subs	r4, r4, r5
 80002fa:	10a4      	asrs	r4, r4, #2
 80002fc:	42a6      	cmp	r6, r4
 80002fe:	d109      	bne.n	8000314 <__libc_init_array+0x24>
 8000300:	f000 f81a 	bl	8000338 <_init>
 8000304:	2600      	movs	r6, #0
 8000306:	4d0a      	ldr	r5, [pc, #40]	@ (8000330 <__libc_init_array+0x40>)
 8000308:	4c0a      	ldr	r4, [pc, #40]	@ (8000334 <__libc_init_array+0x44>)
 800030a:	1b64      	subs	r4, r4, r5
 800030c:	10a4      	asrs	r4, r4, #2
 800030e:	42a6      	cmp	r6, r4
 8000310:	d105      	bne.n	800031e <__libc_init_array+0x2e>
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f855 3b04 	ldr.w	r3, [r5], #4
 8000318:	4798      	blx	r3
 800031a:	3601      	adds	r6, #1
 800031c:	e7ee      	b.n	80002fc <__libc_init_array+0xc>
 800031e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000322:	4798      	blx	r3
 8000324:	3601      	adds	r6, #1
 8000326:	e7f2      	b.n	800030e <__libc_init_array+0x1e>
 8000328:	08000350 	.word	0x08000350
 800032c:	08000350 	.word	0x08000350
 8000330:	08000350 	.word	0x08000350
 8000334:	08000354 	.word	0x08000354

08000338 <_init>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr

08000344 <_fini>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr
